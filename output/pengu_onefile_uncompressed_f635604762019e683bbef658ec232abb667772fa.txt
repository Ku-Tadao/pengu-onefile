<!-- Note: Minimal XML escaping applied. In text: & -> &amp;, < -> &lt; (we keep '>' literal). Attributes are safely quoted & escaped. -->
<source type="local_directory" path="work/PenguLoader">
<file name="README.md">
&lt;br>

&lt;div align="center">
  &lt;a href="https://pengu.lol">
    &lt;img src="https://i.imgur.com/kQOMxqS.jpg" width="144"/>
  &lt;/a>
  &lt;h1 align="center">Pengu Loader&lt;/h1>
  &lt;p align="center">
    ✨ The ultimate JavaScript plugin loader, build your unmatched LoL Client.
  &lt;/p>
  &lt;p align="center">
    &lt;a href="https://chat.pengu.lol">
      &lt;img src ="https://img.shields.io/discord/1069483280438673418?style=for-the-badge&amp;logo=discord&amp;logoColor=white&amp;color=5c5fff"/>
    &lt;/a>
    &lt;a href="https://github.com/PenguLoader/PenguLoader/releases/latest">
      &lt;img src="https://img.shields.io/github/downloads/PenguLoader/PenguLoader/total?style=for-the-badge" />
    &lt;/a>
    &lt;a href="https://github.com/PenguLoader/PenguLoader">
      &lt;img src="https://img.shields.io/github/stars/PenguLoader/PenguLoader.svg?style=for-the-badge&amp;logo=github" />
    &lt;/a>
  &lt;/p>
&lt;/div>

&lt;br>

## About

**Pengu Loader** — formerly League Loader — is a powerful plugin loader tailored for the **League of Legends Client**, enabling limitless customization and personalization.
With Pengu Loader, you can seamlessly load JavaScript plugins directly into the Client, allowing you to transform its appearance, add unique features, and integrate custom content to enhance your overall experience.

## Features

- **Plugin support** to customize the League Client
- **Personalize &amp; theme** with flexible web stacks
- **Modern JavaScript** compatibility
- **Built-in DevTools** for easier debugging
- **Simplified API** access and hooks

## Getting Started

Please visit the homepage to begin:

### 👉 https://pengu.lol/

## Disclaimer

THE PROGRAM IS PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGMENT, OR OF FITNESS FOR A PARTICULAR PURPOSE. LICENSOR DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED IN THE PROGRAM WILL MEET YOUR REQUIREMENTS OR THAT OPERATION WILL BE UNINTERRUPTED OR ERROR FREE. LICENSOR MAKES NO WARRANTIES RESPECTING ANY HARM THAT MAY BE CAUSED BY MALICIOUS USE OF THIS SOFTWARE. LICENSOR FURTHER EXPRESSLY DISCLAIMS ANY WARRANTY OR REPRESENTATION TO AUTHORIZED USERS OR TO ANY THIRD PARTY.

Pengu Loader isn't endorsed by Riot Games and doesn't reflect the views or opinions of Riot Games or anyone officially involved in producing or managing Riot Games properties. Riot Games, and all associated properties are trademarks or registered trademarks of Riot Games, Inc.

## Sponsors

&lt;table>
  &lt;tr>
    &lt;td>&lt;img src="https://github.com/user-attachments/assets/58e9a6f4-6630-437d-a758-b284c0ed41e7" />&lt;/td>
    &lt;td>Free code signing on Windows provided by &lt;a href="https://about.signpath.io">SignPath.io&lt;/a>, certificate by &lt;a href="https://signpath.org">SignPath Foundation&lt;/a>&lt;/td>
  &lt;/tr>
&lt;/table>

## License: MIT

[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fnomi-san%2Fleague-loader.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fnomi-san%2Fleague-loader?ref=badge_large)

</file>
<file name="core/insert_dylib.c">
// Repo: https://github.com/tyilo/insert_dylib

#include &lt;stdlib.h>
#include &lt;stdio.h>
#include &lt;stdbool.h>
#include &lt;stdarg.h>
#include &lt;string.h>
#include &lt;unistd.h>
#include &lt;getopt.h>
#include &lt;sys/stat.h>
#include &lt;sys/param.h>
#include &lt;copyfile.h>
#include &lt;mach-o/loader.h>
#include &lt;mach-o/fat.h>

#define IS_64_BIT(x) ((x) == MH_MAGIC_64 || (x) == MH_CIGAM_64)
#define IS_LITTLE_ENDIAN(x) ((x) == FAT_CIGAM || (x) == MH_CIGAM_64 || (x) == MH_CIGAM)
#define SWAP32(x, magic) (IS_LITTLE_ENDIAN(magic)? OSSwapInt32(x): (x))
#define SWAP64(x, magic) (IS_LITTLE_ENDIAN(magic)? OSSwapInt64(x): (x))

#define ROUND_UP(x, y) (((x) + (y) - 1) &amp; -(y))

#define ABSDIFF(x, y) ((x) > (y)? (uintmax_t)(x) - (uintmax_t)(y): (uintmax_t)(y) - (uintmax_t)(x))

#define BUFSIZE 512

void fbzero(FILE *f, off_t offset, size_t len) {
	static unsigned char zeros[BUFSIZE] = {0};
	fseeko(f, offset, SEEK_SET);
	while(len != 0) {
		size_t size = MIN(len, sizeof(zeros));
		fwrite(zeros, size, 1, f);
		len -= size;
	}
}

void fmemmove(FILE *f, off_t dst, off_t src, size_t len) {
	static unsigned char buf[BUFSIZE];
	while(len != 0) {
		size_t size = MIN(len, sizeof(buf));
		fseeko(f, src, SEEK_SET);
		fread(&amp;buf, size, 1, f);
		fseeko(f, dst, SEEK_SET);
		fwrite(buf, size, 1, f);

		len -= size;
		src += size;
		dst += size;
	}
}

int inplace_flag = false;
int weak_flag = false;
int overwrite_flag = false;
int codesig_flag = 0;
int yes_flag = false;

static struct option long_options[] = {
	{"inplace",          no_argument, &amp;inplace_flag,   true},
	{"weak",             no_argument, &amp;weak_flag,      true},
	{"overwrite",        no_argument, &amp;overwrite_flag, true},
	{"strip-codesig",    no_argument, &amp;codesig_flag,   1},
	{"no-strip-codesig", no_argument, &amp;codesig_flag,   2},
	{"all-yes",          no_argument, &amp;yes_flag,       true},
	{NULL,               0,           NULL,            0}
};

__attribute__((noreturn)) void usage(void) {
	printf("Usage: insert_dylib dylib_path binary_path [new_binary_path]\n");

	printf("Option flags:");

	struct option *opt = long_options;
	while(opt->name != NULL) {
		printf(" --%s", opt->name);
		opt++;
	}

	printf("\n");

	exit(1);
}

__attribute__((format(printf, 1, 2))) bool ask(const char *format, ...) {
	char *question;
	asprintf(&amp;question, "%s [y/n] ", format);

	va_list args;
	va_start(args, format);
	vprintf(question, args);
	va_end(args);

	free(question);

	while(true) {
		char *line = NULL;
		size_t size;
		if(yes_flag) {
			puts("y");
			line = "y";
		} else {
			getline(&amp;line, &amp;size, stdin);
		}

		switch(line[0]) {
			case 'y':
			case 'Y':
				return true;
				break;
			case 'n':
			case 'N':
				return false;
				break;
			default:
				printf("Please enter y or n: ");
		}
	}
}

size_t fpeek(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream) {
	off_t pos = ftello(stream);
	size_t result = fread(ptr, size, nitems, stream);
	fseeko(stream, pos, SEEK_SET);
	return result;
}

void *read_load_command(FILE *f, uint32_t cmdsize) {
	void *lc = malloc(cmdsize);

	fpeek(lc, cmdsize, 1, f);

	return lc;
}

bool check_load_commands(FILE *f, struct mach_header *mh, size_t header_offset, size_t commands_offset, const char *dylib_path, off_t *slice_size) {
	fseeko(f, commands_offset, SEEK_SET);

	uint32_t ncmds = SWAP32(mh->ncmds, mh->magic);

	off_t linkedit_32_pos = -1;
	off_t linkedit_64_pos = -1;
	struct segment_command linkedit_32;
	struct segment_command_64 linkedit_64;

	off_t symtab_pos = -1;
	uint32_t symtab_size = 0;

	for(int i = 0; i &lt; ncmds; i++) {
		struct load_command lc;
		fpeek(&amp;lc, sizeof(lc), 1, f);

		uint32_t cmdsize = SWAP32(lc.cmdsize, mh->magic);
		uint32_t cmd = SWAP32(lc.cmd, mh->magic);

		switch(cmd) {
			case LC_CODE_SIGNATURE:
				if(i == ncmds - 1) {
					if(codesig_flag == 2) {
						return true;
					}

					if(codesig_flag == 0 &amp;&amp; !ask("LC_CODE_SIGNATURE load command found. Remove it?")) {
						return true;
					}

					struct linkedit_data_command *cmd = read_load_command(f, cmdsize);

					fbzero(f, ftello(f), cmdsize);

					uint32_t dataoff = SWAP32(cmd->dataoff, mh->magic);
					uint32_t datasize = SWAP32(cmd->datasize, mh->magic);

					free(cmd);

					uint64_t linkedit_fileoff = 0;
					uint64_t linkedit_filesize = 0;

					if(linkedit_32_pos != -1) {
						linkedit_fileoff = SWAP32(linkedit_32.fileoff, mh->magic);
						linkedit_filesize = SWAP32(linkedit_32.filesize, mh->magic);
					} else if(linkedit_64_pos != -1) {
						linkedit_fileoff = SWAP64(linkedit_64.fileoff, mh->magic);
						linkedit_filesize = SWAP64(linkedit_64.filesize, mh->magic);
					} else {
						fprintf(stderr, "Warning: __LINKEDIT segment not found.\n");
					}

					if(linkedit_32_pos != -1 || linkedit_64_pos != -1) {
						if(linkedit_fileoff + linkedit_filesize != *slice_size) {
							fprintf(stderr, "Warning: __LINKEDIT segment is not at the end of the file, so codesign will not work on the patched binary.\n");
						} else {
							if(dataoff + datasize != *slice_size) {
								fprintf(stderr, "Warning: Codesignature is not at the end of __LINKEDIT segment, so codesign will not work on the patched binary.\n");
							} else {
								*slice_size -= datasize;
								//int64_t diff_size = 0;
								if(symtab_pos == -1) {
									fprintf(stderr, "Warning: LC_SYMTAB load command not found. codesign might not work on the patched binary.\n");
								} else {
									fseeko(f, symtab_pos, SEEK_SET);
									struct symtab_command *symtab = read_load_command(f, symtab_size);

									uint32_t strsize = SWAP32(symtab->strsize, mh->magic);
									int64_t diff_size = SWAP32(symtab->stroff, mh->magic) + strsize - (int64_t)*slice_size;
									if(-0x10 &lt;= diff_size &amp;&amp; diff_size &lt;= 0) {
										symtab->strsize = SWAP32((uint32_t)(strsize - diff_size), mh->magic);
										fwrite(symtab, symtab_size, 1, f);
									} else {
										fprintf(stderr, "Warning: String table doesn't appear right before code signature. codesign might not work on the patched binary. (0x%llx)\n", diff_size);
									}

									free(symtab);
								}

								linkedit_filesize -= datasize;
								uint64_t linkedit_vmsize = ROUND_UP(linkedit_filesize, 0x1000);

								if(linkedit_32_pos != -1) {
									linkedit_32.filesize = SWAP32((uint32_t)linkedit_filesize, mh->magic);
									linkedit_32.vmsize = SWAP32((uint32_t)linkedit_vmsize, mh->magic);

									fseeko(f, linkedit_32_pos, SEEK_SET);
									fwrite(&amp;linkedit_32, sizeof(linkedit_32), 1, f);
								} else {
									linkedit_64.filesize = SWAP64(linkedit_filesize, mh->magic);
									linkedit_64.vmsize = SWAP64(linkedit_vmsize, mh->magic);

									fseeko(f, linkedit_64_pos, SEEK_SET);
									fwrite(&amp;linkedit_64, sizeof(linkedit_64), 1, f);
								}

								goto fix_header;
							}
						}
					}

					// If we haven't truncated the file, zero out the code signature
					fbzero(f, header_offset + dataoff, datasize);

				fix_header:
					mh->ncmds = SWAP32(ncmds - 1, mh->magic);
					mh->sizeofcmds = SWAP32(SWAP32(mh->sizeofcmds, mh->magic) - cmdsize, mh->magic);

					return true;
				} else {
					printf("LC_CODE_SIGNATURE is not the last load command, so couldn't remove.\n");
				}
				break;
			case LC_LOAD_DYLIB:
			case LC_LOAD_WEAK_DYLIB: {
				struct dylib_command *dylib_command = read_load_command(f, cmdsize);

				union lc_str offset = dylib_command->dylib.name;
				char *name = &amp;((char *)dylib_command)[SWAP32(offset.offset, mh->magic)];

				int cmp = strcmp(name, dylib_path);

				free(dylib_command);

				if(cmp == 0) {
					if(!ask("Binary already contains a load command for that dylib. Continue anyway?")) {
						return false;
					}
				}

				break;
			}
			case LC_SEGMENT:
			case LC_SEGMENT_64:
				if(cmd == LC_SEGMENT) {
					struct segment_command *cmd = read_load_command(f, cmdsize);
					if(strcmp(cmd->segname, "__LINKEDIT") == 0) {
						linkedit_32_pos = ftello(f);
						linkedit_32 = *cmd;
					}
					free(cmd);
				} else {
					struct segment_command_64 *cmd = read_load_command(f, cmdsize);
					if(strcmp(cmd->segname, "__LINKEDIT") == 0) {
						linkedit_64_pos = ftello(f);
						linkedit_64 = *cmd;
					}
					free(cmd);
				}
			case LC_SYMTAB:
				symtab_pos = ftello(f);
				symtab_size = cmdsize;
		}

		fseeko(f, SWAP32(lc.cmdsize, mh->magic), SEEK_CUR);
	}

	return true;
}

bool insert_dylib(FILE *f, size_t header_offset, const char *dylib_path, off_t *slice_size) {
	fseeko(f, header_offset, SEEK_SET);

	struct mach_header mh;
	fread(&amp;mh, sizeof(struct mach_header), 1, f);

	if(mh.magic != MH_MAGIC_64 &amp;&amp; mh.magic != MH_CIGAM_64 &amp;&amp; mh.magic != MH_MAGIC &amp;&amp; mh.magic != MH_CIGAM) {
		printf("Unknown magic: 0x%x\n", mh.magic);
		return false;
	}

	size_t commands_offset = header_offset + (IS_64_BIT(mh.magic)? sizeof(struct mach_header_64): sizeof(struct mach_header));

	bool cont = check_load_commands(f, &amp;mh, header_offset, commands_offset, dylib_path, slice_size);

	if(!cont) {
		return true;
	}

	// Even though a padding of 4 works for x86_64, codesign doesn't like it
	size_t path_padding = 8;

	size_t dylib_path_len = strlen(dylib_path);
	size_t dylib_path_size = (dylib_path_len &amp; ~(path_padding - 1)) + path_padding;
	uint32_t cmdsize = (uint32_t)(sizeof(struct dylib_command) + dylib_path_size);

	struct dylib_command dylib_command = {
		.cmd = SWAP32(weak_flag? LC_LOAD_WEAK_DYLIB: LC_LOAD_DYLIB, mh.magic),
		.cmdsize = SWAP32(cmdsize, mh.magic),
		.dylib = {
			.name = SWAP32(sizeof(struct dylib_command), mh.magic),
			.timestamp = 0,
			.current_version = 0,
			.compatibility_version = 0
		}
	};

	uint32_t sizeofcmds = SWAP32(mh.sizeofcmds, mh.magic);

	fseeko(f, commands_offset + sizeofcmds, SEEK_SET);
	char space[cmdsize];

	fread(&amp;space, cmdsize, 1, f);

	bool empty = true;
	for(int i = 0; i &lt; cmdsize; i++) {
		if(space[i] != 0) {
			empty = false;
			break;
		}
	}

	if(!empty) {
		if(!ask("It doesn't seem like there is enough empty space. Continue anyway?")) {
			return false;
		}
	}

	fseeko(f, -((off_t)cmdsize), SEEK_CUR);

	char *dylib_path_padded = calloc(dylib_path_size, 1);
	memcpy(dylib_path_padded, dylib_path, dylib_path_len);

	fwrite(&amp;dylib_command, sizeof(dylib_command), 1, f);
	fwrite(dylib_path_padded, dylib_path_size, 1, f);

	free(dylib_path_padded);

	mh.ncmds = SWAP32(SWAP32(mh.ncmds, mh.magic) + 1, mh.magic);
	sizeofcmds += cmdsize;
	mh.sizeofcmds = SWAP32(sizeofcmds, mh.magic);

	fseeko(f, header_offset, SEEK_SET);
	fwrite(&amp;mh, sizeof(mh), 1, f);

	return true;
}

int main(int argc, const char *argv[]) {
	while(true) {
		int option_index = 0;

		int c = getopt_long(argc, (char *const *)argv, "", long_options, &amp;option_index);

		if(c == -1) {
			break;
		}

		switch(c) {
			case 0:
				break;
			case '?':
				usage();
				break;
			default:
				abort();
				break;
		}
	}

	argv = &amp;argv[optind - 1];
	argc -= optind - 1;

	if(argc &lt; 3 || argc > 4) {
		usage();
	}

	const char *lc_name = weak_flag? "LC_LOAD_WEAK_DYLIB": "LC_LOAD_DYLIB";

	const char *dylib_path = argv[1];
	const char *binary_path = argv[2];

	struct stat s;

	if(stat(binary_path, &amp;s) != 0) {
		perror(binary_path);
		exit(1);
	}

	if(dylib_path[0] != '@' &amp;&amp; stat(dylib_path, &amp;s) != 0) {
		if(!ask("The provided dylib path doesn't exist. Continue anyway?")) {
			exit(1);
		}
	}

	bool binary_path_was_malloced = false;
	if(!inplace_flag) {
		char *new_binary_path;
		if(argc == 4) {
			new_binary_path = (char *)argv[3];
		} else {
			asprintf(&amp;new_binary_path, "%s_patched", binary_path);
			binary_path_was_malloced = true;
		}

		if(!overwrite_flag &amp;&amp; stat(new_binary_path, &amp;s) == 0) {
			if(!ask("%s already exists. Overwrite it?", new_binary_path)) {
				exit(1);
			}
		}

		if(copyfile(binary_path, new_binary_path, NULL, COPYFILE_DATA | COPYFILE_UNLINK)) {
			printf("Failed to create %s\n", new_binary_path);
			exit(1);
		}

		binary_path = new_binary_path;
	}

	FILE *f = fopen(binary_path, "r+");

	if(!f) {
		printf("Couldn't open file %s\n", binary_path);
		exit(1);
	}

	bool success = true;

	fseeko(f, 0, SEEK_END);
	off_t file_size = ftello(f);
	rewind(f);

	uint32_t magic;
	fread(&amp;magic, sizeof(uint32_t), 1, f);

	switch(magic) {
		case FAT_MAGIC:
		case FAT_CIGAM: {
			fseeko(f, 0, SEEK_SET);

			struct fat_header fh;
			fread(&amp;fh, sizeof(fh), 1, f);

			uint32_t nfat_arch = SWAP32(fh.nfat_arch, magic);

			printf("Binary is a fat binary with %d archs.\n", nfat_arch);

			struct fat_arch archs[nfat_arch];
			fread(archs, sizeof(archs), 1, f);

			int fails = 0;

			uint32_t offset = 0;
			if(nfat_arch > 0) {
				offset = SWAP32(archs[0].offset, magic);
			}

			for(int i = 0; i &lt; nfat_arch; i++) {
				off_t orig_offset = SWAP32(archs[i].offset, magic);
				off_t orig_slice_size = SWAP32(archs[i].size, magic);
				offset = ROUND_UP(offset, 1 &lt;&lt; SWAP32(archs[i].align, magic));
				if(orig_offset != offset) {
					fmemmove(f, offset, orig_offset, orig_slice_size);
					fbzero(f, MIN(offset, orig_offset) + orig_slice_size, ABSDIFF(offset, orig_offset));

					archs[i].offset = SWAP32(offset, magic);
				}

				off_t slice_size = orig_slice_size;
				bool r = insert_dylib(f, offset, dylib_path, &amp;slice_size);
				if(!r) {
					printf("Failed to add %s to arch #%d!\n", lc_name, i + 1);
					fails++;
				}

				if(slice_size &lt; orig_slice_size &amp;&amp; i &lt; nfat_arch - 1) {
					fbzero(f, offset + slice_size, orig_slice_size - slice_size);
				}

				file_size = offset + slice_size;
				offset += slice_size;
				archs[i].size = SWAP32((uint32_t)slice_size, magic);
			}

			rewind(f);
			fwrite(&amp;fh, sizeof(fh), 1, f);
			fwrite(archs, sizeof(archs), 1, f);

			// We need to flush before truncating
			fflush(f);
			ftruncate(fileno(f), file_size);

			if(fails == 0) {
				printf("Added %s to all archs in %s\n", lc_name, binary_path);
			} else if(fails == nfat_arch) {
				printf("Failed to add %s to any archs.\n", lc_name);
				success = false;
			} else {
				printf("Added %s to %d/%d archs in %s\n", lc_name, nfat_arch - fails, nfat_arch, binary_path);
			}

			break;
		}
		case MH_MAGIC_64:
		case MH_CIGAM_64:
		case MH_MAGIC:
		case MH_CIGAM:
			if(insert_dylib(f, 0, dylib_path, &amp;file_size)) {
				ftruncate(fileno(f), file_size);
				printf("Added %s to %s\n", lc_name, binary_path);
			} else {
				printf("Failed to add %s!\n", lc_name);
				success = false;
			}
			break;
		default:
			printf("Unknown magic: 0x%x\n", magic);
			exit(1);
	}

	fclose(f);

	if(!success) {
		if(!inplace_flag) {
			unlink(binary_path);
		}
		exit(1);
	}

	if(binary_path_was_malloced) {
		free((void *)binary_path);
	}

    return 0;
}
</file>
<file name="core/src/platform.h">
#ifndef _PLATFORM_H_
#define _PLATFORM_H_

#if defined(_WIN32) || defined(_WIN64)
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif
#ifndef OS_WIN
#define OS_WIN 1
#endif
#elif defined(__APPLE__) || defined(__MACH__)
#ifndef OS_MAC
#define OS_MAC 1
#endif
#else
#error "Your platform is not supported."
#endif

#if !(defined(_M_X64) || defined(_M_AMD64) || defined(__x86_64__) || defined(__amd64__))
#error "Target 64-bit (x86-64/amd64) only."
#endif

#ifdef _MSC_VER
#define NOMINMAX
#define _CRT_SECURE_NO_WARNINGS
#ifndef UNICODE
#define UNICODE 1
#endif
#endif

#ifndef COUNT_OF
#define COUNT_OF(arr) (sizeof(arr) / sizeof(*arr))
#endif

#if OS_WIN
#define PLATFORM_NAME "win"
#define LIBCEF_MODULE_NAME "libcef.dll"
#elif OS_MAC
#define PLATFORM_NAME "mac"
#define LIBCEF_MODULE_NAME "League of Legends.app/Contents/Frameworks/Chromium Embedded Framework.framework/Chromium Embedded Framework"
#endif

#ifndef NDEBUG
#define _DEBUG 1
#endif

#endif
</file>
<file name="core/src/hook.h">
#ifndef _HOOK_H_
#define _HOOK_H_

#include "platform.h"
#include &lt;stdint.h>
#include &lt;string.h>
#include &lt;mutex>

#if OS_WIN
#include &lt;windows.h>
#elif OS_MAC
#include &lt;mach/mach_init.h>
#include &lt;mach/mach_vm.h>
#include &lt;sys/mman.h>
#include &lt;dlfcn.h>
#endif

namespace hook
{
    struct Shellcode
    {
#if OS_WIN
        uint8_t opcodes[12];
#elif OS_MAC
        uint8_t opcodes[16];
#endif
        Shellcode(intptr_t addr)
        {
            memset(opcodes, 0, sizeof(opcodes));
#if OS_WIN
            // movabs rax [addr]
            opcodes[0] = 0x48;
            opcodes[1] = 0xB8;
            memcpy(&amp;opcodes[2], &amp;addr, sizeof(intptr_t));
            // push rax
            opcodes[10] = 0x50;
            // ret
            opcodes[11] = 0xC3;
#elif OS_MAC
            // jmp qword ptr [rip + offset] ; pad 2
            opcodes[0] = 0xFF;
            opcodes[1] = 0x25;
            memset(&amp;opcodes[2], 0, sizeof(int32_t));
            memcpy(&amp;opcodes[6], &amp;addr, sizeof(intptr_t));
#endif
        }
    };

    struct Restorable
    {
        Restorable(void *func, const void *code, size_t size)
            : func_(func), size_(size), backup_(new uint8_t[size])
        {
            memcpy(backup_, func, size);
            memcpy_safe(func, code, size);
        }

        ~Restorable()
        {
            memcpy_safe(func_, backup_, size_);
            delete[] backup_;
        }

        Restorable swap()
        {
            return Restorable(func_, backup_, size_);
        }

    private:
        void *func_;
        uint8_t *backup_;
        size_t size_;

        static bool memcpy_safe(void *dst, const void *src, size_t size)
        {
#if OS_WIN
            DWORD op;
            BOOL success = VirtualProtect(dst, size, PAGE_EXECUTE_READWRITE, &amp;op);
            if (success == 0)
                return false;
            memcpy(dst, src, size);
            success = VirtualProtect(dst, size, op, &amp;op);
            return success != 0;
#elif OS_MAC
            kern_return_t kr;
            kr = mach_vm_protect(mach_task_self(),
                                 (mach_vm_address_t)dst, (mach_vm_size_t)size,
                                 FALSE, VM_PROT_READ | VM_PROT_WRITE | VM_PROT_EXECUTE | VM_PROT_COPY);
            if (kr != KERN_SUCCESS)
                return false;

            kr = mach_vm_write(mach_task_self(),
                               (mach_vm_address_t)dst, (vm_offset_t)src, size);
            if (kr != KERN_SUCCESS)
                return false;

            kr = mach_vm_protect(mach_task_self(),
                                 (mach_vm_address_t)dst, (mach_vm_size_t)size,
                                 FALSE, VM_PROT_READ | VM_PROT_EXECUTE);
            return kr == KERN_SUCCESS;
#endif
        }
    };

    template &lt;typename>
    class Hook;

    template &lt;typename R, typename... Args>
    class Hook&lt;R (*)(Args...)>
    {
    public:
        using Fn = R (*)(Args...);

        ~Hook()
        {
            if (rest_)
            {
                std::lock_guard&lt;std::mutex> _l(mutex_);
                {
                    delete rest_;
                }
            }
        }

        bool hook(Fn orig, Fn hook)
        {
            if (!orig || !hook)
                return false;

            orig_ = orig;
            Shellcode code(reinterpret_cast&lt;intptr_t>(hook));
            rest_ = new Restorable((void *)orig, code.opcodes, sizeof(code.opcodes));
            return true;
        }

        bool hook(const char *lib, const char *proc, Fn hook)
        {
#if OS_WIN
            if (HMODULE mod = GetModuleHandleA(lib))
                if (Fn orig = reinterpret_cast&lt;Fn>(GetProcAddress(mod, proc)))
#elif OS_MAC
            if (void *mod = dlopen(lib, RTLD_NOLOAD | RTLD_LAZY))
                if (Fn orig = reinterpret_cast&lt;Fn>(dlsym(mod, proc)))
#endif
                    return this->hook(orig, hook);
            return false;
        }

        R operator()(Args... args)
        {
            std::lock_guard&lt;std::mutex> _l(mutex_);
            {
                Restorable _t = rest_->swap();
                {
                    return orig_(args...);
                }
            }
        }

    protected:
        Fn orig_ = nullptr;
        Restorable *rest_ = nullptr;
        std::mutex mutex_;
    };
}

#endif
</file>
<file name="core/src/pengu.h">
#ifndef _PENGU_H_
#define _PENGU_H_
#include "platform.h"

#include &lt;stdint.h>
#include &lt;stdio.h>
#include &lt;stdlib.h>

#ifdef OS_WIN
#include &lt;windows.h>
#elif OS_MAC
#include &lt;unistd.h>
#define CALLBACK
#endif

#include &lt;type_traits>
#include &lt;atomic>
#include &lt;string>
#include &lt;vector>
#include &lt;filesystem>

using path = std::filesystem::path;

/// LCUX used UTF-16 CEF strings.
#define CEF_STRING_TYPE_UTF16 1
#include "include/internal/cef_string.h"
#include "include/capi/cef_base_capi.h"

///
/// We don't use the C++ API libcef_wrapper for some reasons,
/// most notably are performance and hooking.
/// 
/// C++ CEF uses virtual methods,
/// CEF CAPI just wraps them around function pointer with self.
/// 
/// For example, a virtual method should be CefV8Handler::Execute(a, b, c)
/// then we get CAPI method: cef_v8handler_t::execute(cef_v8handler_t *self, a, b, c)
/// when constructing a C object, cef_v8handler_t::execute must be assigned a function pointer,
/// but with these helpers, we can bind the method from C++ class directly to this fp
/// and skip the `self` to access the class.
/// 
/// ** Native C++ **
/// 
/// class MyHandler : public CefV8Handler {
/// public:
///     virtual Execute(...) override {
///         // impl    
///     }
///     IMPLEMENT_REFCOUNTING(MyHandler);
/// };
/// 
/// ** Basic CAPI in C++ **
/// 
/// struct MyHandler : cef_v8handler_t {
///     MyHandler() {
///         // impl ref-counter
///         cef_v8handler_t::execute = _execute;
///     }
///     static _execute(cef_v8handler_t *_self, ...) {
///         auto MyHandler *self = (MyHandler *)_self;
///         // impl
///     }
/// }
/// 
/// ** Our bindings **
/// 
/// class MyHandler : CefRefCount&lt;cef_v8handler_t> {
/// public:
///     MyHandler() : CefRefCount(this) {
///         cef_bind_method(MyHandler, execute);
///     }
///     _execute(...) {
///         // impl
///     }
/// }
/// 

template&lt;typename T>
struct remove_arg1;

/// Remove the first arg (self) from function sig.
template&lt;typename R, typename Arg1, typename... Args>
struct remove_arg1&lt;R(*)(Arg1, Args...)>
{
    using type = R(*)(Args...);
    using self = Arg1;
};

template &lt;typename T>
struct method_traits;

/// Used to extract the method pairs with class.
template &lt;typename T, typename R, typename... Args>
struct method_traits&lt;R(T::*)(Args...)>
{
    using type = R(*)(Args...);
    using klass = T;
};

template &lt;int id, typename This, typename M, typename R, typename Self, typename... Args>
struct self_bind_traits_base
{
    static M m_;

    static inline R CALLBACK invoke(Self self, Args ...args) noexcept {
        return (reinterpret_cast&lt;This *>(self)->*m_)(args...);
    }
};

template &lt;int id, typename This, typename M, typename R, typename Self, typename... Args>
/* typename */ M self_bind_traits_base&lt;id, This, M, R, Self, Args...>::m_ = nullptr;

template &lt;int id, typename, typename, typename>
struct self_bind_traits;

template &lt;int id, typename This, typename M, typename R, typename Self, typename... Args>
struct self_bind_traits&lt;id, This, M, R(*)(Self, Args...)>
    : self_bind_traits_base&lt;id, This, M, R, Self, Args...> {};

template &lt;int id, typename M, typename To>
static inline void self_bind(M from, To &amp;to) noexcept
{
    using traits = self_bind_traits&lt;id, typename method_traits&lt;M>::klass, M, To>;
    if (traits::m_ == nullptr) traits::m_ = from;
    to = traits::invoke;
}

/// Use __COUNTER__ to make unique static variables on the same funtion sig.
/// `static_assert` to check method type when updating headers.
#define cef_bind_method(klass, m)                                                   \
    do {                                                                            \
        static_assert(std::is_same&lt;method_traits&lt;decltype(&amp;klass::_##m)>::type,     \
            remove_arg1&lt;decltype(m)>::type>::value, "Invalid method.");             \
        self_bind&lt;__COUNTER__>(&amp;klass::_##m, m);                                    \
    } while (0)

///
/// Basic reference counting for CAPI CEF objects.
/// Use it with the method bindings above.
/// 
template &lt;typename T>
struct CefRefCount : public T
{
    template &lt;typename U>
    CefRefCount(const U *) noexcept : T{}, ref_(1) {
        T::base.size = sizeof(U);
        T::base.add_ref = _Base_AddRef;
        T::base.release = _Base_Release;
        T::base.has_one_ref = _Base_HasOneRef;
        T::base.has_at_least_one_ref = _Base_HasAtLeastOneRef;
        self_delete_ = [](void *self) noexcept { delete static_cast&lt;U *>(self); };
    }

    CefRefCount(nullptr_t) noexcept : CefRefCount(static_cast&lt;T *>(nullptr)) {}

private:
    void(*self_delete_)(void *);
    std::atomic&lt;size_t> ref_;

    static void CALLBACK _Base_AddRef(cef_base_ref_counted_t *_) noexcept {
        ++reinterpret_cast&lt;CefRefCount *>(_)->ref_;
    }

    static int CALLBACK _Base_Release(cef_base_ref_counted_t *_) noexcept {
        CefRefCount *self = reinterpret_cast&lt;CefRefCount *>(_);
        if (--self->ref_ == 0) {
            self->self_delete_(_);
            return 1;
        }
        return 0;
    }

    static int CALLBACK _Base_HasOneRef(cef_base_ref_counted_t *_) noexcept {
        return reinterpret_cast&lt;CefRefCount *>(_)->ref_ == 1;
    }

    static int CALLBACK _Base_HasAtLeastOneRef(cef_base_ref_counted_t *_) noexcept {
        return reinterpret_cast&lt;CefRefCount *>(_)->ref_ > 0;
    }
};

/// cef string interface
struct CefStrBase : cef_string_t
{
    CefStrBase();

    ///
    /// Check if the string is empty.
    /// 
    bool empty() const;

    // some string manipulations

    bool equal(const char *that) const;
    bool contain(const char *sub) const;
    bool startw(const char *sub) const;
    bool endw(const char *sub) const;

    ///
    /// Copy the string to utf-16 std string.
    /// 
    void copy(std::u16string &amp;to) const;

    ///
    /// Convert the string to utf-8 std string.
    /// 
    std::string to_utf8() const;

    ///
    /// Convert the string to utf-16 std string.
    /// 
    std::u16string to_utf16() const;

    ///
    /// Convert the string to fs path.
    /// 
    std::filesystem::path to_path() const;
};

struct CefStr : CefStrBase
{
    CefStr();
    ~CefStr();

    CefStr(const char *s, size_t len);
    CefStr(const char16_t *s, size_t len);
    CefStr(const std::string &amp;s);
    CefStr(const std::u16string &amp;s);

    ///
    /// Forward the underlying string value.
    /// The current dtor() is set to null.
    /// 
    cef_string_t forward();
    
    ///
    /// Get reference to base string from const pointer.
    /// 
    static const CefStrBase &amp;borrow(const cef_string_t *s);

    ///
    /// Convert fs path to string.
    /// 
    static CefStr from_path(const path &amp;path);

    ///
    /// Wrap u16string in cef_string_t on stack.
    /// 
    static cef_string_t wrap(const std::u16string &amp;utf16) {
        return cef_string_t{
            (char16 *)utf16.data(),
            utf16.length(),
            nullptr
        };
    }
};

///
/// A wrapper of `cef_string_userfree_t` to auto-free.
/// Do not free userfree pointer after passed to this struct.
///
struct CefScopedStr : CefStrBase
{
    ///
    /// @param uf CEF userfree string,
    ///   the `ptr()` method will return empty string when `uf` is null.
    /// 
    CefScopedStr(cef_string_userfree_t uf);
    ~CefScopedStr();

    const cef_string_t *ptr() {
        return str_;
    }

private:
    // underlying pointer
    cef_string_userfree_t str_;
};

/**
 * CefString UTF-16 literal.
*/
static inline cef_string_t operator""_s(const char16_t *s, size_t l)
{
    return cef_string_t{ (char16 *)s, l, nullptr };
}

namespace platform
{
    ///
    /// Get OS version.
    /// @returns Semver version string.
    const char *get_os_version();

    /// 
    /// Get OS build number.
    /// @returns Build number string.
    /// 
    const char *get_os_build();
}

namespace config
{
    ///
    /// Get the loader dir (root pengu folder).
    /// @returns Path to dir.
    /// 
    path loader_dir();

    ///
    /// Get the datastore path.
    /// @returns Path to datastore file.
    /// 
    path datastore_path();

    ///
    /// Get the cache dir for League Client.
    /// @returns Path to possible cache dir.
    /// 
    path cache_dir();

    ///
    /// Get the League Client dir.
    /// @returns Path to League dir.
    /// 
    path league_dir();

    ///
    /// Get the plugins dir.
    /// By default, it's a child of root dir.
    /// It could be replaced by `plugins_dir` in config.
    /// @returns Path to plugins dir.
    /// 
    path plugins_dir();

    ///
    /// Get the list of disabled plugins in hex-hashed path splitted by commas.
    /// @returns A list in string.
    /// 
    std::string disabled_plugins();

    namespace options
    {
        bool use_hotkeys();
        bool optimized_client();
        bool silent_mode();
        bool super_potato();
        bool isecure_mode();
        bool use_devtools();
        bool use_riotclient();
        bool use_proxy();

        // undocumented
        int debug_port();
    }
}

namespace file
{
    ///
    /// Check if the path is a directory.
    /// @param path Path to dir.
    /// @returns true if the dir exists.
    /// 
    bool is_dir(const path &amp;path);

    ///
    /// Check if the path is a file.
    /// @param path Path to file.
    /// @returns true if the file exists.
    /// 
    bool is_file(const path &amp;path);

    ///
    /// Check if the path is a symlink.
    /// @param path Path to symlink file.
    /// @returns true if the path is symlink.
    /// 
    bool is_symlink(const path &amp;path);

    ///
    /// Read content of a file.
    /// @param path Path to file.
    /// @param buffer Output buffer, must be freed when success.
    /// @param length Output buffer length.
    /// @returns true if success.
    /// 
    bool read_file(const path &amp;path, void **buffer, size_t *length);

    ///
    /// Read content of a file.
    /// @param path Path to file.
    /// @param buffer Output buffer.
    /// @param length Output buffer length.
    /// @returns true if success.
    /// 
    bool write_file(const path &amp;path, const void *buffer, size_t length);

    ///
    /// Get files inside a dir.
    /// @param path Path to dir.
    /// @returns A vector of file paths.
    /// 
    std::vector&lt;path> read_dir(const path &amp;dir);
}

namespace dialog
{
    /// 
    /// Show a system message box, it will block the executing thread.
    /// 
    void alert(const char *message, const char *caption);

    ///
    /// Show a system message box with Yes-No buttons.
    /// @returns true if user pressed `Yes`.
    /// 
    bool confirm(const char *message, const char *caption);

#if OS_WIN
    static void alert(const char *message, const char *caption) {
        MessageBoxA(NULL, message, caption,
            MB_ICONINFORMATION | MB_OK | MB_TOPMOST);
    }
    static bool confirm(const char *message, const char *caption) {
        return IDYES == MessageBoxA(NULL, message, caption,
            MB_ICONWARNING/* MB_ICONQUESTION */ | MB_YESNO | MB_TOPMOST);
    }
#endif
}

namespace shell
{
    /// 
    /// Open an URL in browser.
    /// @param url A string should start with `https://`.
    /// 
    void open_url(const char *url);

    /// 
    /// Open a folder path in Explorer/Finder.
    /// @param path Absolute path of folder.
    /// 
    void open_folder(const path &amp;path);
}

namespace window
{
    /// 
    /// Get window rectangle on screen.
    /// @param handle `NSView*` on macOS, or `HWND` on Windows.
    /// 
    void get_rect(void *handle, int *x, int *y, int *w, int *h);

    /// 
    /// Get window DPI scale factor.
    /// @param handle `NSView*` on macOS, or `HWND` on Windows.
    /// 
    float get_scaling(void *handle);

    /// 
    /// Bring window to foreground.
    /// @param handle `NSView*` on macOS, or `HWND` on Windows.
    /// 
    void make_foreground(void *handle);

    /// 
    /// Set window vibrancy effect.
    /// @param handle `NSView*` on macOS, or `HWND` on Windows.
    /// @param material `NSVisualEffectMaterial` enum on macOS.
    ///      On Windows, it should be one of following values:
    ///        `0` (transparent - Windows 7+),
    ///        `1` (blurbehind -Windows 7+),
    ///        `2` (acrylic - Windows 10+),
    ///        `3` (unified - Windows 10+),
    ///        `4` (mica - Windows 11).
    /// @param state `NSVisualEffectState` enum on macOS, or accent background color on Windows.
    /// 
    void apply_vibrancy(void *handle, uint32_t material, uint32_t state);

    /// 
    /// Remove applied vibrancy effect in window.
    /// @param handle `NSView*` on macOS, or `HWND` on Windows.
    /// 
    void clear_vibrancy(void *handle);

    /// 
    /// Enable window drop shadow.
    /// @param handle `NSView*` on macOS, or `HWND` on Windows.
    /// @note Windows 7 requires aero enabled.
    /// 
    void enable_shadow(void *handle);

    /// 
    /// Check the current system appearance is dark mode.
    /// @note Support Windows 10 1607+, macOS 10.14+.
    /// 
    bool is_dark_theme();

    /// 
    /// Set default window theme.
    /// @param handle `NSView*` on macOS, or `HWND` on Windows.
    /// @note Support Windows 10 1809+, macOS 10.14+.
    /// 
    void set_theme(void *handle, bool dark);
}

namespace dylib
{
    ///
    /// Find the loaded dylib/dll.
    /// @param name Library name or full `.framework` name on macOS.
    ///
    void *find_lib(const char *name);

    ///
    /// Find symbol/proc in lib.
    /// @param lib A handle from `find_lib()`.
    /// @param proc Symbol name.
    ///
    void *find_proc(void *lib, const char *proc);

    ///
    /// Find memory in a module with matching pattern.
    /// @param rladdr Relative address near to the module's address space.
    /// @param pattern Matching pattern e.g `AA BB CC 00`, also allows wildcard `AA ?? FF`.
    ///
    void *find_memory(const void *rladdr, const char *pattern);
}

#endif
</file>
<file name="core/src/browser/browser.h">
#pragma once
#include "pengu.h"
#include "include/capi/cef_browser_capi.h"
#include "include/capi/cef_frame_capi.h"
#include "include/capi/cef_request_context_capi.h"

namespace browser
{
    extern cef_window_handle_t window;
    void setup_window(cef_browser_t *browser);

    void open_devtools(cef_browser_t *browser);

    void register_riotclient_domain(cef_request_context_t *ctx);
    void set_riotclient_credentials(const char *port, const char *token);

    void register_plugins_domain(cef_request_context_t *ctx);
}
</file>
<file name="core/src/renderer/v8_wrapper.h">
#ifndef _V8_WRAPPER_H_
#define _V8_WRAPPER_H_

#include "include/capi/cef_v8_capi.h"

struct V8ValueBase
{
    inline cef_v8value_t *ptr()
    {
        return &amp;_;
    }

protected:
    cef_v8value_t _;
};

struct V8Value : V8ValueBase
{
    inline bool isUndefined() { return _.is_undefined(&amp;_); }
    inline bool isNull() { return _.is_null(&amp;_); }

    inline bool isBool() { return _.is_bool(&amp;_); }
    inline bool isInt() { return _.is_int(&amp;_); }
    inline bool isUint() { return _.is_uint(&amp;_); }
    inline bool isDouble() { return _.is_double(&amp;_); }
    inline bool isString() { return _.is_string(&amp;_); }
    inline bool isObject() { return _.is_object(&amp;_); }
    inline bool isArray() { return _.is_array(&amp;_); }
    inline bool isFunction() { return _.is_function(&amp;_); }

    inline bool asBool() { return _.get_bool_value(&amp;_); }
    inline int asInt() { return _.get_int_value(&amp;_); }
    inline uint32_t asUint() { return _.get_uint_value(&amp;_); }
    inline double asDouble() { return _.get_double_value(&amp;_); }
    inline cef_string_userfree_t asString() { return _.get_string_value(&amp;_); }

    inline struct V8Array *asArray() { return reinterpret_cast&lt;struct V8Array *>(&amp;_); }
    inline struct V8Object *asObject() { return reinterpret_cast&lt;struct V8Object *>(&amp;_); }

    static inline V8Value *undefined()
    {
        return (V8Value *)cef_v8value_create_undefined();
    }

    static inline V8Value *null()
    {
        return (V8Value *)cef_v8value_create_null();
    }

    static inline V8Value *boolean(bool value)
    {
        return (V8Value *)cef_v8value_create_bool(value);
    }

    static inline V8Value *number(double value)
    {
        return (V8Value *)cef_v8value_create_double(value);
    }

    static inline V8Value *number(int value)
    {
        return (V8Value *)cef_v8value_create_int(value);
    }

    static inline V8Value *string(const cef_string_t *value)
    {
        return (V8Value *)cef_v8value_create_string(value);
    }

    static inline V8Value *function(const cef_string_t *name, cef_v8handler_t *handler)
    {
        return (V8Value *)cef_v8value_create_function(name, handler);
    }
};

struct V8Array : V8ValueBase
{
    inline int length()
    {
        return _.get_array_length(&amp;_);
    }

    inline V8Value *get(int index)
    {
        return (V8Value *)_.get_value_byindex(&amp;_, index);
    }

    inline void set(int index, V8ValueBase *value)
    {
        _.set_value_byindex(&amp;_, index, (cef_v8value_t *)value);
    }

    static inline V8Array *create(int length)
    {
        return (V8Array *)cef_v8value_create_array(length);
    }
};

struct V8Object : V8ValueBase
{
    inline bool has(const cef_string_t *key)
    {
        return _.has_value_bykey(&amp;_, key);
    }

    inline V8Value *get(const cef_string_t *key)
    {
        return (V8Value *)_.get_value_bykey(&amp;_, key);
    }

    inline void set(const cef_string_t *key, V8ValueBase *value, cef_v8_propertyattribute_t attr)
    {
        _.set_value_bykey(&amp;_, key, (cef_v8value_t *)value, attr);
    }

    static inline V8Object *create()
    {
        return (V8Object *)cef_v8value_create_object(nullptr, nullptr);
    }
};

typedef V8Value *(*V8FunctionHandler)(V8Value *const argv[], int argc);

struct V8HandlerFunctionEntry
{
    const char *name;
    V8FunctionHandler func;
};

#endif
</file>
<file name="loader/vite.config.ts">
import { defineConfig } from 'vite'
import { resolve } from 'node:path'
import solid from 'vite-plugin-solid'
import autoprefixer from 'autoprefixer'
import tailwindcss from 'tailwindcss'

import pkg from './package.json'

// https://vitejs.dev/config/
export default defineConfig({
  css: {
    postcss: {
      plugins: [
        autoprefixer,
        tailwindcss
      ]
    }
  },
  define: {
    '__VERSION__': JSON.stringify(pkg.version),
    '__PLATFORM__':  JSON.stringify(process.platform),
  },
  publicDir: false,
  plugins: [
    solid(),
  ],
  resolve: {
    alias: {
      '~': resolve(__dirname, './src')
    }
  },

  // Vite options tailored for Tauri development and only applied in `tauri dev` or `tauri build`
  //
  // 1. prevent vite from obscuring rust errors
  clearScreen: false,
  // 2. tauri expects a fixed port, fail if that port is not available
  server: {
    port: 1420,
    strictPort: true,
    watch: {
      // 3. tell vite to ignore watching `src-tauri`
      ignored: ['**/src-tauri/**'],
    },
  },
})
</file>
<file name="loader/README.md">
## Pengu Loader UI &amp; Built-in Plugins

This folder includes the app UI and built-in plugins.

```
loader/
  |__ src/
  |__ src-tuari/

  |__ src-plugins
</file>
<file name="loader/package.json">
{
  "name": "pengu-loader",
  "version": "1.2.0",
  "description": "Pengu Loader app",
  "license": "MIT",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "serve": "vite preview",
    "tauri": "tauri"
  },
  "dependencies": {
    "@std/ini": "npm:@jsr/std__ini@^0.225",
    "@std/yaml": "npm:@jsr/std__yaml@^1.0.2",
    "@tauri-apps/api": "^1",
    "class-variance-authority": "^0.7.0",
    "js-yaml": "^4.1.0",
    "solid-js": "^1.7.8",
    "tailwind-merge": "^2.4.0",
    "tippy.js": "^6.3.7"
  },
  "devDependencies": {
    "@tauri-apps/cli": "^1",
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^20",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.41",
    "tailwindcss": "^3.4.7",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5.2.2",
    "vite": "^5.3.1",
    "vite-plugin-solid": "^2.8.0"
  }
}

</file>
<file name="loader/tsconfig.json">
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "~/*": [
        "./src/*"
      ]
    },
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",
    "jsxImportSource": "solid-js",
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
  },
  "include": [
    "src"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}
</file>
<file name="loader/tailwind.config.ts">
import { Config } from 'tailwindcss'

const config: Config = {
  darkMode: 'class',
  content: [
    './src/**/*.{ts,tsx}',
    './src/**/*.css'
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px'
      }
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'rgb(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        info: {
          DEFAULT: 'hsl(var(--info))',
          foreground: 'hsl(var(--info-foreground))'
        },
        success: {
          DEFAULT: 'hsl(var(--success))',
          foreground: 'hsl(var(--success-foreground))'
        },
        warning: {
          DEFAULT: 'hsl(var(--warning))',
          foreground: 'hsl(var(--warning-foreground))'
        },
        error: {
          DEFAULT: 'hsl(var(--error))',
          foreground: 'hsl(var(--error-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        card: {
          DEFAULT: 'rgb(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        }
      },
      borderRadius: {
        xl: 'calc(var(--radius) + 4px)',
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      },
    }
  },
  plugins: [
    require('tailwindcss-animate'),
  ]
}

export default config
</file>
<file name="loader/tsconfig.node.json">
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
  },
  "include": [
    "vite.config.ts"
  ]
}
</file>
<file name="loader/translations.json">
{
  "languages": [
    {
      "id": "en",
      "name": "English",
      "translations": {
        "welcome": "Welcome",
        "choose_lang": "Choose your language",
        "accept_tos": "Accept terms and conditions",
        "tos_content": "Pengu Loader is SAFE, but using exploit plugins could get you banned.",
        "get_started": "Get Started"
      }
    },
    {
      "id": "vi",
      "name": "Tiếng Việt",
      "translations": {
        "welcome": "Xin Chào",
        "choose_lang": "Chọn ngôn ngữ",
        "accept_tos": "Tôi đồng với ý các điều khoản",
        "tos_content": "Pengu Loader an toàn, nhưng sử dụng các plugin khai thác lỗ hổng có thể bị khóa tài khoản.",
        "get_started": "Bắt Đầu"
      }
    }
  ]
}
</file>
<file name="loader/pnpm-lock.yaml">
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@std/ini':
        specifier: npm:@jsr/std__ini@^0.225
        version: '@jsr/std__ini@0.225.2'
      '@std/yaml':
        specifier: npm:@jsr/std__yaml@^1.0.2
        version: '@jsr/std__yaml@1.0.3'
      '@tauri-apps/api':
        specifier: ^1
        version: 1.6.0
      class-variance-authority:
        specifier: ^0.7.0
        version: 0.7.0
      js-yaml:
        specifier: ^4.1.0
        version: 4.1.0
      solid-js:
        specifier: ^1.7.8
        version: 1.8.21
      tailwind-merge:
        specifier: ^2.4.0
        version: 2.5.2
      tippy.js:
        specifier: ^6.3.7
        version: 6.3.7
    devDependencies:
      '@tauri-apps/cli':
        specifier: ^1
        version: 1.6.0
      '@types/js-yaml':
        specifier: ^4.0.9
        version: 4.0.9
      '@types/node':
        specifier: ^20
        version: 20.16.1
      autoprefixer:
        specifier: ^10.4.20
        version: 10.4.20(postcss@8.4.41)
      postcss:
        specifier: ^8.4.41
        version: 8.4.41
      tailwindcss:
        specifier: ^3.4.7
        version: 3.4.10
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.10)
      typescript:
        specifier: ^5.2.2
        version: 5.5.4
      vite:
        specifier: ^5.3.1
        version: 5.4.2(@types/node@20.16.1)
      vite-plugin-solid:
        specifier: ^2.8.0
        version: 2.10.2(solid-js@1.8.21)(vite@5.4.2)

packages:

  '@alloc/quick-lru@5.2.0':
    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
    engines: {node: '>=10'}

  '@ampproject/remapping@2.3.0':
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}

  '@babel/code-frame@7.24.7':
    resolution: {integrity: sha512-BcYH1CVJBO9tvyIZ2jVeXgSIMvGZ2FDRvDdOIVQyuklNKSsx+eppDEBq/g47Ayw+RqNFE+URvOShmf+f/qwAlA==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.25.2':
    resolution: {integrity: sha512-bYcppcpKBvX4znYaPEeFau03bp89ShqNMLs+rmdptMw+heSZh9+z84d2YG+K7cYLbWwzdjtDoW/uqZmPjulClQ==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.25.2':
    resolution: {integrity: sha512-BBt3opiCOxUr9euZ5/ro/Xv8/V7yJ5bjYMqG/C1YAo8MIKAnumZalCN+msbci3Pigy4lIQfPUpfMM27HMGaYEA==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.25.0':
    resolution: {integrity: sha512-3LEEcj3PVW8pW2R1SR1M89g/qrYk/m/mB/tLqn7dn4sbBUQyTqnlod+II2U4dqiGtUmkcnAmkMDralTFZttRiw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.25.2':
    resolution: {integrity: sha512-U2U5LsSaZ7TAt3cfaymQ8WHh0pxvdHoEk6HVpaexxixjyEquMh0L0YNJNM6CTGKMXV1iksi0iZkGw4AcFkPaaw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.18.6':
    resolution: {integrity: sha512-0NFvs3VkuSYbFi1x2Vd6tKrywq+z/cLeYC/RJNFrIX/30Bf5aiGYbtvGXolEktzJH8o5E5KJ3tT+nkxuuZFVlA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.24.7':
    resolution: {integrity: sha512-8AyH3C+74cgCVVXow/myrynrAGv+nTVg5vKu2nZph9x7RcRwzmh0VFallJuFTZ9mx6u4eSdXZfcOzSqTUm0HCA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.25.2':
    resolution: {integrity: sha512-BjyRAbix6j/wv83ftcVJmBt72QtHI56C7JXZoG2xATiLpmoC7dpd8WnkikExHDVPpi/3qCmO6WY1EaXOluiecQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-plugin-utils@7.24.8':
    resolution: {integrity: sha512-FFWx5142D8h2Mgr/iPVGH5G7w6jDn4jUSpZTyDnQO0Yn7Ks2Kuz6Pci8H6MPCoUJegd/UZQ3tAvfLCxQSnWWwg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-simple-access@7.24.7':
    resolution: {integrity: sha512-zBAIvbCMh5Ts+b86r/CjU+4XGYIs+R1j951gxI3KmmxBMhCg4oQMsv6ZXQ64XOm/cvzfU1FmoCyt6+owc5QMYg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.24.8':
    resolution: {integrity: sha512-pO9KhhRcuUyGnJWwyEgnRJTSIZHiT+vMD0kPeD+so0l7mxkMT19g3pjY9GTnHySck/hDzq+dtW/4VgnMkippsQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.24.7':
    resolution: {integrity: sha512-rR+PBcQ1SMQDDyF6X0wxtG8QyLCgUB0eRAGguqRLfkCA87l7yAP7ehq8SNj96OOGTO8OBV70KhuFYcIkHXOg0w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.24.8':
    resolution: {integrity: sha512-xb8t9tD1MHLungh/AIoWYN+gVHaB9kwlu8gffXGSt3FFEIT7RjS+xWbc2vUD1UTZdIpKj/ab3rdqJ7ufngyi2Q==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.25.0':
    resolution: {integrity: sha512-MjgLZ42aCm0oGjJj8CtSM3DB8NOOf8h2l7DCTePJs29u+v7yO/RBX9nShlKMgFnRks/Q4tBAe7Hxnov9VkGwLw==}
    engines: {node: '>=6.9.0'}

  '@babel/highlight@7.24.7':
    resolution: {integrity: sha512-EStJpq4OuY8xYfhGVXngigBJRWxftKX9ksiGDnmlY3o7B/V7KIAc9X4oiK87uPJSc/vs5L869bem5fhZa8caZw==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.25.3':
    resolution: {integrity: sha512-iLTJKDbJ4hMvFPgQwwsVoxtHyWpKKPBrxkANrSYewDPaPpT5py5yeVkgPIJ7XYXhndxJpaA3PyALSXQ7u8e/Dw==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-syntax-jsx@7.24.7':
    resolution: {integrity: sha512-6ddciUPe/mpMnOKv/U+RSd2vvVy+Yw/JfBB0ZHYjEZt9NLHmCUylNYlsbqCCS1Bffjlb0fCwC9Vqz+sBz6PsiQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/template@7.25.0':
    resolution: {integrity: sha512-aOOgh1/5XzKvg1jvVz7AVrx2piJ2XBi227DHmbY6y+bM9H2FlN+IfecYu4Xl0cNiiVejlsCri89LUsbj8vJD9Q==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.25.3':
    resolution: {integrity: sha512-HefgyP1x754oGCsKmV5reSmtV7IXj/kpaE1XYY+D9G5PvKKoFfSbiS4M77MdjuwlZKDIKFCffq9rPU+H/s3ZdQ==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.25.2':
    resolution: {integrity: sha512-YTnYtra7W9e6/oAZEHj0bJehPRUlLH9/fbpT5LfB0NhQXyALCRkRs3zH9v07IYhkgpqX6Z78FnuccZr/l4Fs4Q==}
    engines: {node: '>=6.9.0'}

  '@esbuild/aix-ppc64@0.21.5':
    resolution: {integrity: sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.21.5':
    resolution: {integrity: sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.21.5':
    resolution: {integrity: sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.21.5':
    resolution: {integrity: sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.21.5':
    resolution: {integrity: sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.21.5':
    resolution: {integrity: sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.21.5':
    resolution: {integrity: sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.21.5':
    resolution: {integrity: sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.21.5':
    resolution: {integrity: sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.21.5':
    resolution: {integrity: sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.21.5':
    resolution: {integrity: sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.21.5':
    resolution: {integrity: sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.21.5':
    resolution: {integrity: sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.21.5':
    resolution: {integrity: sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.21.5':
    resolution: {integrity: sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.21.5':
    resolution: {integrity: sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.21.5':
    resolution: {integrity: sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-x64@0.21.5':
    resolution: {integrity: sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-x64@0.21.5':
    resolution: {integrity: sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.21.5':
    resolution: {integrity: sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.21.5':
    resolution: {integrity: sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.21.5':
    resolution: {integrity: sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.21.5':
    resolution: {integrity: sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@jridgewell/gen-mapping@0.3.5':
    resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@jsr/std__ini@0.225.2':
    resolution: {integrity: sha512-WDCkw7yaNQL8AifpYIK8+bPSs0q3tL7Xu5jvDezU4UltwPpMXstdbrgWklZXDgs9I5DobT2IflSCNDDkeHT4xA==, tarball: https://npm.jsr.io/~/11/@jsr/std__ini/0.225.2.tgz}

  '@jsr/std__yaml@1.0.3':
    resolution: {integrity: sha512-msyq7wDqVrB7erhT13z6FrJ8DRrCgPJhMz1ia2xrKjYlSqt21AOMeiKPsVF4+OZij1tOoqyNtLXNbUIoSXypDw==, tarball: https://npm.jsr.io/~/11/@jsr/std__yaml/1.0.3.tgz}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@popperjs/core@2.11.8':
    resolution: {integrity: sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==}

  '@rollup/rollup-android-arm-eabi@4.21.0':
    resolution: {integrity: sha512-WTWD8PfoSAJ+qL87lE7votj3syLavxunWhzCnx3XFxFiI/BA/r3X7MUM8dVrH8rb2r4AiO8jJsr3ZjdaftmnfA==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.21.0':
    resolution: {integrity: sha512-a1sR2zSK1B4eYkiZu17ZUZhmUQcKjk2/j9Me2IDjk1GHW7LB5Z35LEzj9iJch6gtUfsnvZs1ZNyDW2oZSThrkA==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.21.0':
    resolution: {integrity: sha512-zOnKWLgDld/svhKO5PD9ozmL6roy5OQ5T4ThvdYZLpiOhEGY+dp2NwUmxK0Ld91LrbjrvtNAE0ERBwjqhZTRAA==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.21.0':
    resolution: {integrity: sha512-7doS8br0xAkg48SKE2QNtMSFPFUlRdw9+votl27MvT46vo44ATBmdZdGysOevNELmZlfd+NEa0UYOA8f01WSrg==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-linux-arm-gnueabihf@4.21.0':
    resolution: {integrity: sha512-pWJsfQjNWNGsoCq53KjMtwdJDmh/6NubwQcz52aEwLEuvx08bzcy6tOUuawAOncPnxz/3siRtd8hiQ32G1y8VA==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.21.0':
    resolution: {integrity: sha512-efRIANsz3UHZrnZXuEvxS9LoCOWMGD1rweciD6uJQIx2myN3a8Im1FafZBzh7zk1RJ6oKcR16dU3UPldaKd83w==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.21.0':
    resolution: {integrity: sha512-ZrPhydkTVhyeGTW94WJ8pnl1uroqVHM3j3hjdquwAcWnmivjAwOYjTEAuEDeJvGX7xv3Z9GAvrBkEzCgHq9U1w==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.21.0':
    resolution: {integrity: sha512-cfaupqd+UEFeURmqNP2eEvXqgbSox/LHOyN9/d2pSdV8xTrjdg3NgOFJCtc1vQ/jEke1qD0IejbBfxleBPHnPw==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.21.0':
    resolution: {integrity: sha512-ZKPan1/RvAhrUylwBXC9t7B2hXdpb/ufeu22pG2psV7RN8roOfGurEghw1ySmX/CmDDHNTDDjY3lo9hRlgtaHg==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.21.0':
    resolution: {integrity: sha512-H1eRaCwd5E8eS8leiS+o/NqMdljkcb1d6r2h4fKSsCXQilLKArq6WS7XBLDu80Yz+nMqHVFDquwcVrQmGr28rg==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.21.0':
    resolution: {integrity: sha512-zJ4hA+3b5tu8u7L58CCSI0A9N1vkfwPhWd/puGXwtZlsB5bTkwDNW/+JCU84+3QYmKpLi+XvHdmrlwUwDA6kqw==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.21.0':
    resolution: {integrity: sha512-e2hrvElFIh6kW/UNBQK/kzqMNY5mO+67YtEh9OA65RM5IJXYTWiXjX6fjIiPaqOkBthYF1EqgiZ6OXKcQsM0hg==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.21.0':
    resolution: {integrity: sha512-1vvmgDdUSebVGXWX2lIcgRebqfQSff0hMEkLJyakQ9JQUbLDkEaMsPTLOmyccyC6IJ/l3FZuJbmrBw/u0A0uCQ==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.21.0':
    resolution: {integrity: sha512-s5oFkZ/hFcrlAyBTONFY1TWndfyre1wOMwU+6KCpm/iatybvrRgmZVM+vCFwxmC5ZhdlgfE0N4XorsDpi7/4XQ==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.21.0':
    resolution: {integrity: sha512-G9+TEqRnAA6nbpqyUqgTiopmnfgnMkR3kMukFBDsiyy23LZvUCpiUwjTRx6ezYCjJODXrh52rBR9oXvm+Fp5wg==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.21.0':
    resolution: {integrity: sha512-2jsCDZwtQvRhejHLfZ1JY6w6kEuEtfF9nzYsZxzSlNVKDX+DpsDJ+Rbjkm74nvg2rdx0gwBS+IMdvwJuq3S9pQ==}
    cpu: [x64]
    os: [win32]

  '@tauri-apps/api@1.6.0':
    resolution: {integrity: sha512-rqI++FWClU5I2UBp4HXFvl+sBWkdigBkxnpJDQUWttNyG7IZP4FwQGhTNL5EOw0vI8i6eSAJ5frLqO7n7jbJdg==}
    engines: {node: '>= 14.6.0', npm: '>= 6.6.0', yarn: '>= 1.19.1'}

  '@tauri-apps/cli-darwin-arm64@1.6.0':
    resolution: {integrity: sha512-SNRwUD9nqGxY47mbY1CGTt/jqyQOU7Ps7Mx/mpgahL0FVUDiCEY/5L9QfEPPhEgccgcelEVn7i6aQHIkHyUtCA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@tauri-apps/cli-darwin-x64@1.6.0':
    resolution: {integrity: sha512-g2/uDR/eeH2arvuawA4WwaEOqv/7jDO/ZLNI3JlBjP5Pk8GGb3Kdy0ro1xQzF94mtk2mOnOXa4dMgAet4sUJ1A==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@tauri-apps/cli-linux-arm-gnueabihf@1.6.0':
    resolution: {integrity: sha512-EVwf4oRkQyG8BpSrk0gqO7oA0sDM2MdNDtJpMfleYFEgCxLIOGZKNqaOW3M7U+0Y4qikmG3TtRK+ngc8Ymtrjg==}
    engines: {node: '>= 10'}
    cpu: [arm]
    os: [linux]

  '@tauri-apps/cli-linux-arm64-gnu@1.6.0':
    resolution: {integrity: sha512-YdpY17cAySrhK9dX4BUVEmhAxE2o+6skIEFg8iN/xrDwRxhaNPI9I80YXPatUTX54Kx55T5++25VJG9+3iw83A==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@tauri-apps/cli-linux-arm64-musl@1.6.0':
    resolution: {integrity: sha512-4U628tuf2U8pMr4tIBJhEkrFwt+46dwhXrDlpdyWSZtnop5RJAVKHODm0KbWns4xGKfTW1F3r6sSv+2ZxLcISA==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@tauri-apps/cli-linux-x64-gnu@1.6.0':
    resolution: {integrity: sha512-AKRzp76fVUaJyXj5KRJT9bJyhwZyUnRQU0RqIRqOtZCT5yr6qGP8rjtQ7YhCIzWrseBlOllc3Qvbgw3Yl0VQcA==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@tauri-apps/cli-linux-x64-musl@1.6.0':
    resolution: {integrity: sha512-0edIdq6aMBTaRMIXddHfyAFL361JqulLLd2Wi2aoOie7DkQ2MYh6gv3hA7NB9gqFwNIGE+xtJ4BkXIP2tSGPlg==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@tauri-apps/cli-win32-arm64-msvc@1.6.0':
    resolution: {integrity: sha512-QwWpWk4ubcwJ1rljsRAmINgB2AwkyzZhpYbalA+MmzyYMREcdXWGkyixWbRZgqc6fEWEBmq5UG73qz5eBJiIKg==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@tauri-apps/cli-win32-ia32-msvc@1.6.0':
    resolution: {integrity: sha512-Vtw0yxO9+aEFuhuxQ57ALG43tjECopRimRuKGbtZYDCriB/ty5TrT3QWMdy0dxBkpDTu3Rqsz30sbDzw6tlP3Q==}
    engines: {node: '>= 10'}
    cpu: [ia32]
    os: [win32]

  '@tauri-apps/cli-win32-x64-msvc@1.6.0':
    resolution: {integrity: sha512-h54FHOvGi7+LIfRchzgZYSCHB1HDlP599vWXQQJ/XnwJY+6Rwr2E5bOe/EhqoG8rbGkfK0xX3KPAvXPbUlmggg==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@tauri-apps/cli@1.6.0':
    resolution: {integrity: sha512-DBBpBl6GhTzm8ImMbKkfaZ4fDTykWrC7Q5OXP4XqD91recmDEn2LExuvuiiS3HYe7uP8Eb5B9NPHhqJb+Zo7qQ==}
    engines: {node: '>= 10'}
    hasBin: true

  '@types/babel__core@7.20.5':
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}

  '@types/babel__generator@7.6.8':
    resolution: {integrity: sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==}

  '@types/babel__template@7.4.4':
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}

  '@types/babel__traverse@7.20.6':
    resolution: {integrity: sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==}

  '@types/estree@1.0.5':
    resolution: {integrity: sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==}

  '@types/js-yaml@4.0.9':
    resolution: {integrity: sha512-k4MGaQl5TGo/iipqb2UDG2UwjXziSWkh0uysQelTlJpX1qGlpUZYm8PnO4DxG1qBomtJUdYJ6qR6xdIah10JLg==}

  '@types/node@20.16.1':
    resolution: {integrity: sha512-zJDo7wEadFtSyNz5QITDfRcrhqDvQI1xQNQ0VoizPjM/dVAODqqIUWbJPkvsxmTI0MYRGRikcdjMPhOssnPejQ==}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.0.1:
    resolution: {integrity: sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==}
    engines: {node: '>=12'}

  ansi-styles@3.2.1:
    resolution: {integrity: sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==}
    engines: {node: '>=4'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  arg@5.0.2:
    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  autoprefixer@10.4.20:
    resolution: {integrity: sha512-XY25y5xSv/wEoqzDyXXME4AFfkZI0P23z6Fs3YgymDnKJkCGOnkL0iTxCa85UTqaSgfcqyf3UA6+c7wUvx/16g==}
    engines: {node: ^10 || ^12 || >=14}
    hasBin: true
    peerDependencies:
      postcss: ^8.1.0

  babel-plugin-jsx-dom-expressions@0.38.1:
    resolution: {integrity: sha512-4FD4H69Cu4jHx2uLDEvx4YC5T/fC/Dmaafhsm8hXm7SjHYzjr09gBVyHdoFza+91f/g9e6tIzjbLCMkOXwmlew==}
    peerDependencies:
      '@babel/core': ^7.20.12

  babel-preset-solid@1.8.19:
    resolution: {integrity: sha512-F3MoUdx3i4znhStnXUBno+5kGSbvhpbGrPgqfRPrS8W7foVJUOSd1/F9QDyd9dgClHfr+J7V14931eu1PEDDMQ==}
    peerDependencies:
      '@babel/core': ^7.0.0

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.23.3:
    resolution: {integrity: sha512-btwCFJVjI4YWDNfau8RhZ+B1Q/VLoUITrm3RlP6y1tYGWIOa+InuYiRGXUBXo8nA1qKmHMyLB/iVQg5TT4eFoA==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  camelcase-css@2.0.1:
    resolution: {integrity: sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==}
    engines: {node: '>= 6'}

  caniuse-lite@1.0.30001651:
    resolution: {integrity: sha512-9Cf+Xv1jJNe1xPZLGuUXLNkE1BoDkqRqYyFJ9TDYSqhduqA4hu4oR9HluGoWYQC/aj8WHjsGVV+bwkh0+tegRg==}

  chalk@2.4.2:
    resolution: {integrity: sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==}
    engines: {node: '>=4'}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  class-variance-authority@0.7.0:
    resolution: {integrity: sha512-jFI8IQw4hczaL4ALINxqLEXQbWcNjoSkloa4IaufXCJr6QawJyw7tuRysRsrE8w2p/4gGaxKIt/hX3qz/IbD1A==}

  clsx@2.0.0:
    resolution: {integrity: sha512-rQ1+kcj+ttHG0MKVGBUXwayCCF1oh39BF5COIpRzuCEv8Mwjv0XucrI2ExNTOn9IlLifGClWQcU9BrZORvtw6Q==}
    engines: {node: '>=6'}

  color-convert@1.9.3:
    resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.3:
    resolution: {integrity: sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  cross-spawn@7.0.3:
    resolution: {integrity: sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==}
    engines: {node: '>= 8'}

  cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  debug@4.3.6:
    resolution: {integrity: sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  didyoumean@1.2.2:
    resolution: {integrity: sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==}

  dlv@1.1.3:
    resolution: {integrity: sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  electron-to-chromium@1.5.12:
    resolution: {integrity: sha512-tIhPkdlEoCL1Y+PToq3zRNehUaKp3wBX/sr7aclAWdIWjvqAe/Im/H0SiCM4c1Q8BLPHCdoJTol+ZblflydehA==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  esbuild@0.21.5:
    resolution: {integrity: sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==}
    engines: {node: '>=12'}
    hasBin: true

  escalade@3.1.2:
    resolution: {integrity: sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==}
    engines: {node: '>=6'}

  escape-string-regexp@1.0.5:
    resolution: {integrity: sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==}
    engines: {node: '>=0.8.0'}

  fast-glob@3.3.2:
    resolution: {integrity: sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==}
    engines: {node: '>=8.6.0'}

  fastq@1.17.1:
    resolution: {integrity: sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  foreground-child@3.3.0:
    resolution: {integrity: sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==}
    engines: {node: '>=14'}

  fraction.js@4.3.7:
    resolution: {integrity: sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  has-flag@3.0.0:
    resolution: {integrity: sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==}
    engines: {node: '>=4'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  html-entities@2.3.3:
    resolution: {integrity: sha512-DV5Ln36z34NNTDgnz0EWGBLZENelNAtkiFA4kyNOG2tDI6Mz1uSWiq1wAKdyjnJwyDiDO7Fa2SO1CTxPXL8VxA==}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-core-module@2.15.0:
    resolution: {integrity: sha512-Dd+Lb2/zvk9SKy1TGCt1wFJFo/MWBPMX5x7KcvLajWTGuomczdQX61PvY5yK6SVACwpoexWo81IfFyoKY2QnTA==}
    engines: {node: '>= 0.4'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-what@4.1.16:
    resolution: {integrity: sha512-ZhMwEosbFJkA0YhFnNDgTM4ZxDRsS6HqTo7qsZM08fehyRYIYa0yHu5R6mgo1n/8MgaPBXiPimPD77baVFYg+A==}
    engines: {node: '>=12.13'}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  jackspeak@3.4.3:
    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}

  jiti@1.21.6:
    resolution: {integrity: sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==}
    hasBin: true

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsesc@2.5.2:
    resolution: {integrity: sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==}
    engines: {node: '>=4'}
    hasBin: true

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  lilconfig@2.1.0:
    resolution: {integrity: sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==}
    engines: {node: '>=10'}

  lilconfig@3.1.2:
    resolution: {integrity: sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  merge-anything@5.1.7:
    resolution: {integrity: sha512-eRtbOb1N5iyH0tkQDAoQ4Ipsp/5qSR79Dzrz8hEPxRX10RWWR/iQXdoKmBSRCThY1Fh5EhISDtpSc93fpxUniQ==}
    engines: {node: '>=12.13'}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromatch@4.0.7:
    resolution: {integrity: sha512-LPP/3KorzCwBxfeUuZmaR6bG2kdeHSbe0P2tY3FLRU4vYrjYz5hI4QZwV0njUx3jeuKe67YukQ1LSPZBKDqO/Q==}
    engines: {node: '>=8.6'}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  ms@2.1.2:
    resolution: {integrity: sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==}

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  nanoid@3.3.7:
    resolution: {integrity: sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  node-releases@2.0.18:
    resolution: {integrity: sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  normalize-range@0.1.2:
    resolution: {integrity: sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==}
    engines: {node: '>=0.10.0'}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-hash@3.0.0:
    resolution: {integrity: sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==}
    engines: {node: '>= 6'}

  package-json-from-dist@1.0.0:
    resolution: {integrity: sha512-dATvCeZN/8wQsGywez1mzHtTlP22H8OEfPrVMLNr4/eGa+ijtLn/6M5f0dY8UKNrC2O9UCU6SSoG3qRKnt7STw==}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  picocolors@1.0.1:
    resolution: {integrity: sha512-anP1Z8qwhkbmu7MFP5iTt+wQKXgwzf7zTyGlcdzabySa9vd0Xt392U0rVmz9poOaBj0uHJKyyo9/upk0HrEQew==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  pify@2.3.0:
    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
    engines: {node: '>=0.10.0'}

  pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}

  postcss-import@15.1.0:
    resolution: {integrity: sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      postcss: ^8.0.0

  postcss-js@4.0.1:
    resolution: {integrity: sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==}
    engines: {node: ^12 || ^14 || >= 16}
    peerDependencies:
      postcss: ^8.4.21

  postcss-load-config@4.0.2:
    resolution: {integrity: sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==}
    engines: {node: '>= 14'}
    peerDependencies:
      postcss: '>=8.0.9'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      postcss:
        optional: true
      ts-node:
        optional: true

  postcss-nested@6.2.0:
    resolution: {integrity: sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==}
    engines: {node: '>=12.0'}
    peerDependencies:
      postcss: ^8.2.14

  postcss-selector-parser@6.1.2:
    resolution: {integrity: sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==}
    engines: {node: '>=4'}

  postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}

  postcss@8.4.41:
    resolution: {integrity: sha512-TesUflQ0WKZqAvg52PWL6kHgLKP6xB6heTOdoYM0Wt2UHyxNa4K25EZZMgKns3BH1RLVbZCREPpLY0rhnNoHVQ==}
    engines: {node: ^10 || ^12 || >=14}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  read-cache@1.0.0:
    resolution: {integrity: sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  resolve@1.22.8:
    resolution: {integrity: sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==}
    hasBin: true

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rollup@4.21.0:
    resolution: {integrity: sha512-vo+S/lfA2lMS7rZ2Qoubi6I5hwZwzXeUIctILZLbHI+laNtvhhOIon2S1JksA5UEDQ7l3vberd0fxK44lTYjbQ==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  seroval-plugins@1.1.1:
    resolution: {integrity: sha512-qNSy1+nUj7hsCOon7AO4wdAIo9P0jrzAMp18XhiOzA6/uO5TKtP7ScozVJ8T293oRIvi5wyCHSM4TrJo/c/GJA==}
    engines: {node: '>=10'}
    peerDependencies:
      seroval: ^1.0

  seroval@1.1.1:
    resolution: {integrity: sha512-rqEO6FZk8mv7Hyv4UCj3FD3b6Waqft605TLfsCe/BiaylRpyyMC0b+uA5TJKawX3KzMrdi3wsLbCaLplrQmBvQ==}
    engines: {node: '>=10'}

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  solid-js@1.8.21:
    resolution: {integrity: sha512-FHUGdoo7GVa1BTpGh/4UtwIISde0vSXoqNB6KFpHiTgkIY959tmCJ7NYQAWDfScBfnpoMGZR8lFz0DiwW/gFlw==}

  solid-refresh@0.6.3:
    resolution: {integrity: sha512-F3aPsX6hVw9ttm5LYlth8Q15x6MlI/J3Dn+o3EQyRTtTxidepSTwAYdozt01/YA+7ObcciagGEyXIopGZzQtbA==}
    peerDependencies:
      solid-js: ^1.3

  source-map-js@1.2.0:
    resolution: {integrity: sha512-itJW8lvSA0TXEphiRoawsCksnlf8SyvmFzIhltqAHluXd88pkCd+cXJVHTDwdCr0IzwptSm035IHQktUu1QUMg==}
    engines: {node: '>=0.10.0'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  supports-color@5.5.0:
    resolution: {integrity: sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==}
    engines: {node: '>=4'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  tailwind-merge@2.5.2:
    resolution: {integrity: sha512-kjEBm+pvD+6eAwzJL2Bi+02/9LFLal1Gs61+QB7HvTfQQ0aXwC5LGT8PEt1gS0CWKktKe6ysPTAy3cBC5MeiIg==}

  tailwindcss-animate@1.0.7:
    resolution: {integrity: sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA==}
    peerDependencies:
      tailwindcss: '>=3.0.0 || insiders'

  tailwindcss@3.4.10:
    resolution: {integrity: sha512-KWZkVPm7yJRhdu4SRSl9d4AK2wM3a50UsvgHZO7xY77NQr2V+fIrEuoDGQcbvswWvFGbS2f6e+jC/6WJm1Dl0w==}
    engines: {node: '>=14.0.0'}
    hasBin: true

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  tippy.js@6.3.7:
    resolution: {integrity: sha512-E1d3oP2emgJ9dRQZdf3Kkn0qJgI6ZLpyS5z6ZkY1DF3kaQaBsGZsndEpHwx+eC+tYM41HaSNvNtLx8tU57FzTQ==}

  to-fast-properties@2.0.0:
    resolution: {integrity: sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==}
    engines: {node: '>=4'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  typescript@5.5.4:
    resolution: {integrity: sha512-Mtq29sKDAEYP7aljRgtPOpTvOfbwRWlS6dPRzwjdE+C0R4brX/GUyhHSecbHMFLNBLcJIPt9nl9yG5TZ1weH+Q==}
    engines: {node: '>=14.17'}
    hasBin: true

  undici-types@6.19.8:
    resolution: {integrity: sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==}

  update-browserslist-db@1.1.0:
    resolution: {integrity: sha512-EdRAaAyk2cUE1wOf2DkEhzxqOQvFOoRJFNS6NeyJ01Gp2beMRpBAINjM2iDXE3KCuKhwnvHIQCJm6ThL2Z+HzQ==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  validate-html-nesting@1.2.2:
    resolution: {integrity: sha512-hGdgQozCsQJMyfK5urgFcWEqsSSrK63Awe0t/IMR0bZ0QMtnuaiHzThW81guu3qx9abLi99NEuiaN6P9gVYsNg==}

  vite-plugin-solid@2.10.2:
    resolution: {integrity: sha512-AOEtwMe2baBSXMXdo+BUwECC8IFHcKS6WQV/1NEd+Q7vHPap5fmIhLcAzr+DUJ04/KHx/1UBU0l1/GWP+rMAPQ==}
    peerDependencies:
      '@testing-library/jest-dom': ^5.16.6 || ^5.17.0 || ^6.*
      solid-js: ^1.7.2
      vite: ^3.0.0 || ^4.0.0 || ^5.0.0
    peerDependenciesMeta:
      '@testing-library/jest-dom':
        optional: true

  vite@5.4.2:
    resolution: {integrity: sha512-dDrQTRHp5C1fTFzcSaMxjk6vdpKvT+2/mIdE07Gw2ykehT49O0z/VHS3zZ8iV/Gh8BJJKHWOe5RjaNrW5xf/GA==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^18.0.0 || >=20.0.0
      less: '*'
      lightningcss: ^1.21.0
      sass: '*'
      sass-embedded: '*'
      stylus: '*'
      sugarss: '*'
      terser: ^5.4.0
    peerDependenciesMeta:
      '@types/node':
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      sass-embedded:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true

  vitefu@0.2.5:
    resolution: {integrity: sha512-SgHtMLoqaeeGnd2evZ849ZbACbnwQCIwRH57t18FxcXoZop0uQu0uzlIhJBlF/eWVzuce0sHeqPcDo+evVcg8Q==}
    peerDependencies:
      vite: ^3.0.0 || ^4.0.0 || ^5.0.0
    peerDependenciesMeta:
      vite:
        optional: true

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yaml@2.5.0:
    resolution: {integrity: sha512-2wWLbGbYDiSqqIKoPjar3MPgB94ErzCtrNE1FdqGuaO0pi2JGjmE8aW8TDZwzU7vuxcGRdL/4gPQwQ7hD5AMSw==}
    engines: {node: '>= 14'}
    hasBin: true

snapshots:

  '@alloc/quick-lru@5.2.0': {}

  '@ampproject/remapping@2.3.0':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25

  '@babel/code-frame@7.24.7':
    dependencies:
      '@babel/highlight': 7.24.7
      picocolors: 1.0.1

  '@babel/compat-data@7.25.2': {}

  '@babel/core@7.25.2':
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.24.7
      '@babel/generator': 7.25.0
      '@babel/helper-compilation-targets': 7.25.2
      '@babel/helper-module-transforms': 7.25.2(@babel/core@7.25.2)
      '@babel/helpers': 7.25.0
      '@babel/parser': 7.25.3
      '@babel/template': 7.25.0
      '@babel/traverse': 7.25.3
      '@babel/types': 7.25.2
      convert-source-map: 2.0.0
      debug: 4.3.6
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.25.0':
    dependencies:
      '@babel/types': 7.25.2
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 2.5.2

  '@babel/helper-compilation-targets@7.25.2':
    dependencies:
      '@babel/compat-data': 7.25.2
      '@babel/helper-validator-option': 7.24.8
      browserslist: 4.23.3
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-module-imports@7.18.6':
    dependencies:
      '@babel/types': 7.25.2

  '@babel/helper-module-imports@7.24.7':
    dependencies:
      '@babel/traverse': 7.25.3
      '@babel/types': 7.25.2
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.25.2(@babel/core@7.25.2)':
    dependencies:
      '@babel/core': 7.25.2
      '@babel/helper-module-imports': 7.24.7
      '@babel/helper-simple-access': 7.24.7
      '@babel/helper-validator-identifier': 7.24.7
      '@babel/traverse': 7.25.3
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-plugin-utils@7.24.8': {}

  '@babel/helper-simple-access@7.24.7':
    dependencies:
      '@babel/traverse': 7.25.3
      '@babel/types': 7.25.2
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-string-parser@7.24.8': {}

  '@babel/helper-validator-identifier@7.24.7': {}

  '@babel/helper-validator-option@7.24.8': {}

  '@babel/helpers@7.25.0':
    dependencies:
      '@babel/template': 7.25.0
      '@babel/types': 7.25.2

  '@babel/highlight@7.24.7':
    dependencies:
      '@babel/helper-validator-identifier': 7.24.7
      chalk: 2.4.2
      js-tokens: 4.0.0
      picocolors: 1.0.1

  '@babel/parser@7.25.3':
    dependencies:
      '@babel/types': 7.25.2

  '@babel/plugin-syntax-jsx@7.24.7(@babel/core@7.25.2)':
    dependencies:
      '@babel/core': 7.25.2
      '@babel/helper-plugin-utils': 7.24.8

  '@babel/template@7.25.0':
    dependencies:
      '@babel/code-frame': 7.24.7
      '@babel/parser': 7.25.3
      '@babel/types': 7.25.2

  '@babel/traverse@7.25.3':
    dependencies:
      '@babel/code-frame': 7.24.7
      '@babel/generator': 7.25.0
      '@babel/parser': 7.25.3
      '@babel/template': 7.25.0
      '@babel/types': 7.25.2
      debug: 4.3.6
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.25.2':
    dependencies:
      '@babel/helper-string-parser': 7.24.8
      '@babel/helper-validator-identifier': 7.24.7
      to-fast-properties: 2.0.0

  '@esbuild/aix-ppc64@0.21.5':
    optional: true

  '@esbuild/android-arm64@0.21.5':
    optional: true

  '@esbuild/android-arm@0.21.5':
    optional: true

  '@esbuild/android-x64@0.21.5':
    optional: true

  '@esbuild/darwin-arm64@0.21.5':
    optional: true

  '@esbuild/darwin-x64@0.21.5':
    optional: true

  '@esbuild/freebsd-arm64@0.21.5':
    optional: true

  '@esbuild/freebsd-x64@0.21.5':
    optional: true

  '@esbuild/linux-arm64@0.21.5':
    optional: true

  '@esbuild/linux-arm@0.21.5':
    optional: true

  '@esbuild/linux-ia32@0.21.5':
    optional: true

  '@esbuild/linux-loong64@0.21.5':
    optional: true

  '@esbuild/linux-mips64el@0.21.5':
    optional: true

  '@esbuild/linux-ppc64@0.21.5':
    optional: true

  '@esbuild/linux-riscv64@0.21.5':
    optional: true

  '@esbuild/linux-s390x@0.21.5':
    optional: true

  '@esbuild/linux-x64@0.21.5':
    optional: true

  '@esbuild/netbsd-x64@0.21.5':
    optional: true

  '@esbuild/openbsd-x64@0.21.5':
    optional: true

  '@esbuild/sunos-x64@0.21.5':
    optional: true

  '@esbuild/win32-arm64@0.21.5':
    optional: true

  '@esbuild/win32-ia32@0.21.5':
    optional: true

  '@esbuild/win32-x64@0.21.5':
    optional: true

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@jridgewell/gen-mapping@0.3.5':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@jsr/std__ini@0.225.2': {}

  '@jsr/std__yaml@1.0.3': {}

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.17.1

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@popperjs/core@2.11.8': {}

  '@rollup/rollup-android-arm-eabi@4.21.0':
    optional: true

  '@rollup/rollup-android-arm64@4.21.0':
    optional: true

  '@rollup/rollup-darwin-arm64@4.21.0':
    optional: true

  '@rollup/rollup-darwin-x64@4.21.0':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.21.0':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.21.0':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.21.0':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.21.0':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.21.0':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.21.0':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.21.0':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.21.0':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.21.0':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.21.0':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.21.0':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.21.0':
    optional: true

  '@tauri-apps/api@1.6.0': {}

  '@tauri-apps/cli-darwin-arm64@1.6.0':
    optional: true

  '@tauri-apps/cli-darwin-x64@1.6.0':
    optional: true

  '@tauri-apps/cli-linux-arm-gnueabihf@1.6.0':
    optional: true

  '@tauri-apps/cli-linux-arm64-gnu@1.6.0':
    optional: true

  '@tauri-apps/cli-linux-arm64-musl@1.6.0':
    optional: true

  '@tauri-apps/cli-linux-x64-gnu@1.6.0':
    optional: true

  '@tauri-apps/cli-linux-x64-musl@1.6.0':
    optional: true

  '@tauri-apps/cli-win32-arm64-msvc@1.6.0':
    optional: true

  '@tauri-apps/cli-win32-ia32-msvc@1.6.0':
    optional: true

  '@tauri-apps/cli-win32-x64-msvc@1.6.0':
    optional: true

  '@tauri-apps/cli@1.6.0':
    optionalDependencies:
      '@tauri-apps/cli-darwin-arm64': 1.6.0
      '@tauri-apps/cli-darwin-x64': 1.6.0
      '@tauri-apps/cli-linux-arm-gnueabihf': 1.6.0
      '@tauri-apps/cli-linux-arm64-gnu': 1.6.0
      '@tauri-apps/cli-linux-arm64-musl': 1.6.0
      '@tauri-apps/cli-linux-x64-gnu': 1.6.0
      '@tauri-apps/cli-linux-x64-musl': 1.6.0
      '@tauri-apps/cli-win32-arm64-msvc': 1.6.0
      '@tauri-apps/cli-win32-ia32-msvc': 1.6.0
      '@tauri-apps/cli-win32-x64-msvc': 1.6.0

  '@types/babel__core@7.20.5':
    dependencies:
      '@babel/parser': 7.25.3
      '@babel/types': 7.25.2
      '@types/babel__generator': 7.6.8
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.6

  '@types/babel__generator@7.6.8':
    dependencies:
      '@babel/types': 7.25.2

  '@types/babel__template@7.4.4':
    dependencies:
      '@babel/parser': 7.25.3
      '@babel/types': 7.25.2

  '@types/babel__traverse@7.20.6':
    dependencies:
      '@babel/types': 7.25.2

  '@types/estree@1.0.5': {}

  '@types/js-yaml@4.0.9': {}

  '@types/node@20.16.1':
    dependencies:
      undici-types: 6.19.8

  ansi-regex@5.0.1: {}

  ansi-regex@6.0.1: {}

  ansi-styles@3.2.1:
    dependencies:
      color-convert: 1.9.3

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  arg@5.0.2: {}

  argparse@2.0.1: {}

  autoprefixer@10.4.20(postcss@8.4.41):
    dependencies:
      browserslist: 4.23.3
      caniuse-lite: 1.0.30001651
      fraction.js: 4.3.7
      normalize-range: 0.1.2
      picocolors: 1.0.1
      postcss: 8.4.41
      postcss-value-parser: 4.2.0

  babel-plugin-jsx-dom-expressions@0.38.1(@babel/core@7.25.2):
    dependencies:
      '@babel/core': 7.25.2
      '@babel/helper-module-imports': 7.18.6
      '@babel/plugin-syntax-jsx': 7.24.7(@babel/core@7.25.2)
      '@babel/types': 7.25.2
      html-entities: 2.3.3
      validate-html-nesting: 1.2.2

  babel-preset-solid@1.8.19(@babel/core@7.25.2):
    dependencies:
      '@babel/core': 7.25.2
      babel-plugin-jsx-dom-expressions: 0.38.1(@babel/core@7.25.2)

  balanced-match@1.0.2: {}

  binary-extensions@2.3.0: {}

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.23.3:
    dependencies:
      caniuse-lite: 1.0.30001651
      electron-to-chromium: 1.5.12
      node-releases: 2.0.18
      update-browserslist-db: 1.1.0(browserslist@4.23.3)

  camelcase-css@2.0.1: {}

  caniuse-lite@1.0.30001651: {}

  chalk@2.4.2:
    dependencies:
      ansi-styles: 3.2.1
      escape-string-regexp: 1.0.5
      supports-color: 5.5.0

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  class-variance-authority@0.7.0:
    dependencies:
      clsx: 2.0.0

  clsx@2.0.0: {}

  color-convert@1.9.3:
    dependencies:
      color-name: 1.1.3

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.3: {}

  color-name@1.1.4: {}

  commander@4.1.1: {}

  convert-source-map@2.0.0: {}

  cross-spawn@7.0.3:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  cssesc@3.0.0: {}

  csstype@3.1.3: {}

  debug@4.3.6:
    dependencies:
      ms: 2.1.2

  didyoumean@1.2.2: {}

  dlv@1.1.3: {}

  eastasianwidth@0.2.0: {}

  electron-to-chromium@1.5.12: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  esbuild@0.21.5:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.21.5
      '@esbuild/android-arm': 0.21.5
      '@esbuild/android-arm64': 0.21.5
      '@esbuild/android-x64': 0.21.5
      '@esbuild/darwin-arm64': 0.21.5
      '@esbuild/darwin-x64': 0.21.5
      '@esbuild/freebsd-arm64': 0.21.5
      '@esbuild/freebsd-x64': 0.21.5
      '@esbuild/linux-arm': 0.21.5
      '@esbuild/linux-arm64': 0.21.5
      '@esbuild/linux-ia32': 0.21.5
      '@esbuild/linux-loong64': 0.21.5
      '@esbuild/linux-mips64el': 0.21.5
      '@esbuild/linux-ppc64': 0.21.5
      '@esbuild/linux-riscv64': 0.21.5
      '@esbuild/linux-s390x': 0.21.5
      '@esbuild/linux-x64': 0.21.5
      '@esbuild/netbsd-x64': 0.21.5
      '@esbuild/openbsd-x64': 0.21.5
      '@esbuild/sunos-x64': 0.21.5
      '@esbuild/win32-arm64': 0.21.5
      '@esbuild/win32-ia32': 0.21.5
      '@esbuild/win32-x64': 0.21.5

  escalade@3.1.2: {}

  escape-string-regexp@1.0.5: {}

  fast-glob@3.3.2:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.7

  fastq@1.17.1:
    dependencies:
      reusify: 1.0.4

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  foreground-child@3.3.0:
    dependencies:
      cross-spawn: 7.0.3
      signal-exit: 4.1.0

  fraction.js@4.3.7: {}

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  gensync@1.0.0-beta.2: {}

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.4.5:
    dependencies:
      foreground-child: 3.3.0
      jackspeak: 3.4.3
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.0
      path-scurry: 1.11.1

  globals@11.12.0: {}

  has-flag@3.0.0: {}

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  html-entities@2.3.3: {}

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-core-module@2.15.0:
    dependencies:
      hasown: 2.0.2

  is-extglob@2.1.1: {}

  is-fullwidth-code-point@3.0.0: {}

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-number@7.0.0: {}

  is-what@4.1.16: {}

  isexe@2.0.0: {}

  jackspeak@3.4.3:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jiti@1.21.6: {}

  js-tokens@4.0.0: {}

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsesc@2.5.2: {}

  json5@2.2.3: {}

  lilconfig@2.1.0: {}

  lilconfig@3.1.2: {}

  lines-and-columns@1.2.4: {}

  lru-cache@10.4.3: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  merge-anything@5.1.7:
    dependencies:
      is-what: 4.1.16

  merge2@1.4.1: {}

  micromatch@4.0.7:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.1

  minipass@7.1.2: {}

  ms@2.1.2: {}

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  nanoid@3.3.7: {}

  node-releases@2.0.18: {}

  normalize-path@3.0.0: {}

  normalize-range@0.1.2: {}

  object-assign@4.1.1: {}

  object-hash@3.0.0: {}

  package-json-from-dist@1.0.0: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  picocolors@1.0.1: {}

  picomatch@2.3.1: {}

  pify@2.3.0: {}

  pirates@4.0.6: {}

  postcss-import@15.1.0(postcss@8.4.41):
    dependencies:
      postcss: 8.4.41
      postcss-value-parser: 4.2.0
      read-cache: 1.0.0
      resolve: 1.22.8

  postcss-js@4.0.1(postcss@8.4.41):
    dependencies:
      camelcase-css: 2.0.1
      postcss: 8.4.41

  postcss-load-config@4.0.2(postcss@8.4.41):
    dependencies:
      lilconfig: 3.1.2
      postcss: 8.4.41
      yaml: 2.5.0

  postcss-nested@6.2.0(postcss@8.4.41):
    dependencies:
      postcss: 8.4.41
      postcss-selector-parser: 6.1.2

  postcss-selector-parser@6.1.2:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-value-parser@4.2.0: {}

  postcss@8.4.41:
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.0.1
      source-map-js: 1.2.0

  queue-microtask@1.2.3: {}

  read-cache@1.0.0:
    dependencies:
      pify: 2.3.0

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  resolve@1.22.8:
    dependencies:
      is-core-module: 2.15.0
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  reusify@1.0.4: {}

  rollup@4.21.0:
    dependencies:
      '@types/estree': 1.0.5
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.21.0
      '@rollup/rollup-android-arm64': 4.21.0
      '@rollup/rollup-darwin-arm64': 4.21.0
      '@rollup/rollup-darwin-x64': 4.21.0
      '@rollup/rollup-linux-arm-gnueabihf': 4.21.0
      '@rollup/rollup-linux-arm-musleabihf': 4.21.0
      '@rollup/rollup-linux-arm64-gnu': 4.21.0
      '@rollup/rollup-linux-arm64-musl': 4.21.0
      '@rollup/rollup-linux-powerpc64le-gnu': 4.21.0
      '@rollup/rollup-linux-riscv64-gnu': 4.21.0
      '@rollup/rollup-linux-s390x-gnu': 4.21.0
      '@rollup/rollup-linux-x64-gnu': 4.21.0
      '@rollup/rollup-linux-x64-musl': 4.21.0
      '@rollup/rollup-win32-arm64-msvc': 4.21.0
      '@rollup/rollup-win32-ia32-msvc': 4.21.0
      '@rollup/rollup-win32-x64-msvc': 4.21.0
      fsevents: 2.3.3

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  semver@6.3.1: {}

  seroval-plugins@1.1.1(seroval@1.1.1):
    dependencies:
      seroval: 1.1.1

  seroval@1.1.1: {}

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  signal-exit@4.1.0: {}

  solid-js@1.8.21:
    dependencies:
      csstype: 3.1.3
      seroval: 1.1.1
      seroval-plugins: 1.1.1(seroval@1.1.1)

  solid-refresh@0.6.3(solid-js@1.8.21):
    dependencies:
      '@babel/generator': 7.25.0
      '@babel/helper-module-imports': 7.24.7
      '@babel/types': 7.25.2
      solid-js: 1.8.21
    transitivePeerDependencies:
      - supports-color

  source-map-js@1.2.0: {}

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.0.1

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      commander: 4.1.1
      glob: 10.4.5
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.6
      ts-interface-checker: 0.1.13

  supports-color@5.5.0:
    dependencies:
      has-flag: 3.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  tailwind-merge@2.5.2: {}

  tailwindcss-animate@1.0.7(tailwindcss@3.4.10):
    dependencies:
      tailwindcss: 3.4.10

  tailwindcss@3.4.10:
    dependencies:
      '@alloc/quick-lru': 5.2.0
      arg: 5.0.2
      chokidar: 3.6.0
      didyoumean: 1.2.2
      dlv: 1.1.3
      fast-glob: 3.3.2
      glob-parent: 6.0.2
      is-glob: 4.0.3
      jiti: 1.21.6
      lilconfig: 2.1.0
      micromatch: 4.0.7
      normalize-path: 3.0.0
      object-hash: 3.0.0
      picocolors: 1.0.1
      postcss: 8.4.41
      postcss-import: 15.1.0(postcss@8.4.41)
      postcss-js: 4.0.1(postcss@8.4.41)
      postcss-load-config: 4.0.2(postcss@8.4.41)
      postcss-nested: 6.2.0(postcss@8.4.41)
      postcss-selector-parser: 6.1.2
      resolve: 1.22.8
      sucrase: 3.35.0
    transitivePeerDependencies:
      - ts-node

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  tippy.js@6.3.7:
    dependencies:
      '@popperjs/core': 2.11.8

  to-fast-properties@2.0.0: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  ts-interface-checker@0.1.13: {}

  typescript@5.5.4: {}

  undici-types@6.19.8: {}

  update-browserslist-db@1.1.0(browserslist@4.23.3):
    dependencies:
      browserslist: 4.23.3
      escalade: 3.1.2
      picocolors: 1.0.1

  util-deprecate@1.0.2: {}

  validate-html-nesting@1.2.2: {}

  vite-plugin-solid@2.10.2(solid-js@1.8.21)(vite@5.4.2):
    dependencies:
      '@babel/core': 7.25.2
      '@types/babel__core': 7.20.5
      babel-preset-solid: 1.8.19(@babel/core@7.25.2)
      merge-anything: 5.1.7
      solid-js: 1.8.21
      solid-refresh: 0.6.3(solid-js@1.8.21)
      vite: 5.4.2(@types/node@20.16.1)
      vitefu: 0.2.5(vite@5.4.2)
    transitivePeerDependencies:
      - supports-color

  vite@5.4.2(@types/node@20.16.1):
    dependencies:
      '@types/node': 20.16.1
      esbuild: 0.21.5
      postcss: 8.4.41
      rollup: 4.21.0
    optionalDependencies:
      fsevents: 2.3.3

  vitefu@0.2.5(vite@5.4.2):
    dependencies:
      vite: 5.4.2(@types/node@20.16.1)

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  yallist@3.1.1: {}

  yaml@2.5.0: {}

</file>
<file name="loader/index.html">
&lt;!doctype html>
&lt;html lang="en">

&lt;head>
  &lt;meta charset="utf-8" />
  &lt;meta name="viewport" content="width=device-width, initial-scale=1" />
  &lt;meta name="theme-color" content="#000000" />
  &lt;link rel="icon" type="image/png" href="/src/assets/icon.png" />
  &lt;title>Pengu Loader&lt;/title>
&lt;/head>

&lt;body>
  &lt;div id="root">&lt;/div>
  &lt;script src="/src/index.tsx" type="module">&lt;/script>
&lt;/body>

&lt;/html>
</file>
<file name="loader/src/index.tsx">
/* @refresh reload */
import { render } from 'solid-js/web'

import App from './App'

// @ts-ignore
window.appVersion = __VERSION__
// @ts-ignore
window.isMac = __PLATFORM__ === 'darwin'

render(() => &lt;App />, document.getElementById('root') as HTMLElement)
</file>
<file name="loader/src/App.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 20 14.3% 4.1%;
    --foreground: 0 0% 95%;
    --card: 33 36 41;
    --card-foreground: 0 0% 95%;
    --popover: 0 0% 9%;
    --popover-foreground: 0 0% 95%;
    --primary: 34 197 94;
    --primary-foreground: 144.9 80.4% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 15%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 12 6.5% 15.1%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 142.4 71.8% 29.2%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground select-none;
    font-feature-settings: "rlig" 1, ss"calt" 1;
  }
}

:root {
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

body {
  background-color: #212429;
  position: relative;
}

body::before {
  content: '';
  position: absolute;
  /* background-color: #0002; */
  background-image: url(./assets/bg-mask.svg);
  background-size: cover;
  width: 100vw;
  height: 100vh;
  top: 0;
  z-index: -1;
}

body::after {
  content: '';
  position: absolute;
  width: 100vw;
  height: 100vh;
  top: 0;
  z-index: -1;
  border: solid 1px #484a4e20;
}

.pengu-activ {
  z-index: 2;
  transition: ease-in-out all .3s;
  pointer-events: none;
}

.pengu-status {
  z-index: 1;
  transition: ease-in-out all .2s;
}

.active .pengu-activ {
  transform: translateX(5rem) rotate(360deg);
}

.active .pengu-status {
  transform: translateX(-2.2rem);
}

::-webkit-scrollbar {
  width: 6px;
}

::-webkit-scrollbar-track {
  background: transparent;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  @apply bg-gray-500 rounded-md;
}
</file>
<file name="loader/src/vite-env.d.ts">
/// &lt;reference types="vite/client" />

declare interface Window {
  isMac: boolean
  appVersion: string
}
</file>
<file name="loader/src/App.tsx">
import { createSignal, onMount, Show } from 'solid-js'
import { Config } from './lib/config'
import { WelcomePage } from './pages/WelcomePage'
import { Appbar } from './components/Appbar'
import { MainPage } from './pages/MainPage'

import './App.css'
import 'tippy.js/dist/tippy.css'

function App() {
  const [ready, setReady] = createSignal(false)
  const [welcome, setWelcome] = createSignal(true)

  onMount(async () => {
    setWelcome(!await Config.load())
    setReady(true)
  })

  return (
    &lt;div class="h-screen flex flex-col">
      &lt;div class="blur-[140px] h-[10rem] max-w-[40rem] absolute top-[10rem] z-10 pointer-events-none w-[-webkit-fill-available]">
        &lt;div class="w-full h-full bg-[linear-gradient(97.62deg,rgba(0,71,225,0.22),rgba(26,214,255,0.32),rgba(0,220,130,0.42))]">
        &lt;/div>
      &lt;/div>
      &lt;Show when={ready()}>
        &lt;Appbar isHome={!welcome()} />
        &lt;Show
          when={!welcome()}
          fallback={&lt;WelcomePage onDone={() => setWelcome(false)} />}
        >
          &lt;MainPage />
        &lt;/Show>
      &lt;/Show>
    &lt;/div>
  )
}

export default App
</file>
<file name="loader/src/pages/WelcomePage.tsx">
import { Component, createSignal } from 'solid-js'
import { Button, ComboBox, Checkbox } from '../components/ui'
import { useI18n } from '../lib/i18n'
import { useConfig } from '../lib/config'

export const WelcomePage: Component&lt;{
  onDone: () => void
}> = (props) => {

  const i18n = useI18n()
  const config = useConfig()
  const [accepted, setAccepted] = createSignal(false)

  const selectLang = async (id: string) => {
    i18n.switchTo(id)
    await config.app.language(id)
  }

  return (
    &lt;div class="flex flex-col justify-center items-center my-auto">
      &lt;div class="mb-8">
        &lt;h2 class="text-4xl font-semibold text-center">{i18n.t('welcome')}&lt;/h2>
      &lt;/div>
      &lt;div class="flex flex-col gap-8 max-w-60">
        &lt;div class="gap-2">
          &lt;p class="text-sm my-2 pl-2">{i18n.t('choose_lang')}&lt;/p>
          &lt;ComboBox
            items={i18n.languages}
            selected={config.app.language()}
            onSelect={selectLang}
          />
        &lt;/div>
        &lt;label class="flex space-x-2">
          &lt;Checkbox checked={accepted()} onClick={() => setAccepted(v => !v)} />
          &lt;div class="grid gap-1.5 leading-none">
            &lt;h2 class="text-sm font-medium leading-none">{i18n.t('accept_tos')}&lt;/h2>
            &lt;p class="text-sm text-muted-foreground">{i18n.t('tos_content')}&lt;/p>
          &lt;/div>
        &lt;/label>
        &lt;div class="mt-4">
          &lt;Button class="w-full" onClick={props.onDone} disabled={!accepted()}>
            {i18n.t('get_started')}
          &lt;/Button>
        &lt;/div>
      &lt;/div>
    &lt;/div>
  )
}
</file>
<file name="loader/src/pages/SplashPage.tsx">
import { Component } from 'solid-js'
import { LoaderIcon } from '~/components/Icons'

export const SplashPage: Component = () => {
  return (
    &lt;div class="flex justify-center items-center h-screen">
      &lt;div class="flex flex-col items-center gap-4">
        &lt;img class="size-32 rounded-full pointer-events-none" src="/pengu-xl.jpg" />
        {/* &lt;h2 class="text-3xl font-semibold text-white">Pengu Loader&lt;/h2> */}
        &lt;p class="text-lg text-slate-200 flex items-center">
          ✨ Build your unmatched &lt;img class="mx-1 size-6 inline-block" src="/lol-logo.png" /> Client
        &lt;/p>
        &lt;span class="animate-spin">
          &lt;LoaderIcon thickness={1} />
        &lt;/span>
      &lt;/div>
    &lt;/div>
  )
}
</file>
<file name="loader/src/pages/MainPage.tsx">
import { Component, Match, Show, Switch } from 'solid-js'
import { Activator } from '../components/Activator'
import { Settings } from '../components/settings'
import { PluginGallery } from '../components/PluginGallery'
import { PluginStore } from '../components/PluginStore'
import { useRoot } from '~/lib/root'

export const MainPage: Component = () => {

  const { isStore } = useRoot()

  return (
    &lt;div class="flex flex-col flex-1 overflow-hidden">
      &lt;div class="flex-1 overflow-y-auto container">
        &lt;Switch>
          &lt;Match when={isStore()} children={PluginStore} />
          &lt;Match when={!isStore()} children={PluginGallery} />
        &lt;/Switch>
      &lt;/div>
      &lt;Show when={!isStore()} children={Activator} />
      &lt;Settings />
    &lt;/div>
  )
}
</file>
<file name="loader/src/components/Icons.tsx">
import { Component, JSXElement, children } from 'solid-js'

interface IconProps {
  size?: number
  class?: string
  thickness?: number
}

const Svg: Component&lt;IconProps &amp; { children: JSXElement }> = (props) => {
  const c = children(() => props.children)
  const size = props.size ?? 24
  const thickness = props.thickness ?? 2
  return (
    &lt;svg
      class={props.class} xmlns="http://www.w3.org/2000/svg"
      width={size} height={size} viewBox="0 0 24 24"
      fill="none" stroke="currentColor" stroke-width={thickness}
      stroke-linecap="round" stroke-linejoin="round"
    >
      {c()}
    &lt;/svg>
  )
}

export const HomeIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M5 12l-2 0l9 -9l9 9l-2 0" />
    &lt;path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7" />
    &lt;path d="M10 12h4v4h-4z" />
  &lt;/Svg>
)

export const PluginIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M9.785 6l8.215 8.215l-2.054 2.054a5.81 5.81 0 1 1 -8.215 -8.215l2.054 -2.054z" />
    &lt;path d="M4 20l3.5 -3.5" />
    &lt;path d="M15 4l-3.5 3.5" />
    &lt;path d="M20 9l-3.5 3.5" />
  &lt;/Svg>
)

export const StoreIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M4 4m0 4a4 4 0 0 1 4 -4h8a4 4 0 0 1 4 4v8a4 4 0 0 1 -4 4h-8a4 4 0 0 1 -4 -4z" />
    &lt;path d="M9 8a3 3 0 0 0 6 0" />
  &lt;/Svg>
)

export const SettingsIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M19.875 6.27a2.225 2.225 0 0 1 1.125 1.948v7.284c0 .809 -.443 1.555 -1.158 1.948l-6.75 4.27a2.269 2.269 0 0 1 -2.184 0l-6.75 -4.27a2.225 2.225 0 0 1 -1.158 -1.948v-7.285c0 -.809 .443 -1.554 1.158 -1.947l6.75 -3.98a2.33 2.33 0 0 1 2.25 0l6.75 3.98h-.033z" />
    &lt;path d="M12 12m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0" />
  &lt;/Svg>
)

export const ReloadIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M19.933 13.041a8 8 0 1 1 -9.925 -8.788c3.899 -1 7.935 1.007 9.425 4.747" />
    &lt;path d="M20 4v5h-5" />
  &lt;/Svg>
)

export const WhirlIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M14 12a2 2 0 1 0 -4 0a2 2 0 0 0 4 0z" />
    &lt;path d="M12 21c-3.314 0 -6 -2.462 -6 -5.5s2.686 -5.5 6 -5.5" />
    &lt;path d="M21 12c0 3.314 -2.462 6 -5.5 6s-5.5 -2.686 -5.5 -6" />
    &lt;path d="M12 14c3.314 0 6 -2.462 6 -5.5s-2.686 -5.5 -6 -5.5" />
    &lt;path d="M14 12c0 -3.314 -2.462 -6 -5.5 -6s-5.5 2.686 -5.5 6" />
  &lt;/Svg>
)

export const PowerIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M7 6a7.75 7.75 0 1 0 10 0" />
    &lt;path d="M12 4l0 8" />
  &lt;/Svg>
)

export const RechargingIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M10 20.777a8.942 8.942 0 0 1 -2.48 -.969" />
    &lt;path d="M14 3.223a9.003 9.003 0 0 1 0 17.554" />
    &lt;path d="M4.579 17.093a8.961 8.961 0 0 1 -1.227 -2.592" />
    &lt;path d="M3.124 10.5c.16 -.95 .468 -1.85 .9 -2.675l.169 -.305" />
    &lt;path d="M6.907 4.579a8.954 8.954 0 0 1 3.093 -1.356" />
    &lt;path d="M12 9l-2 3h4l-2 3" />
  &lt;/Svg>
)

export const BoltIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M13 3l0 7l6 0l-8 11l0 -7l-6 0l8 -11" />
  &lt;/Svg>
)

export const LoaderIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M12 6l0 -3" />
    &lt;path d="M16.25 7.75l2.15 -2.15" />
    &lt;path d="M18 12l3 0" />
    &lt;path d="M16.25 16.25l2.15 2.15" />
    &lt;path d="M12 18l0 3" />
    &lt;path d="M7.75 16.25l-2.15 2.15" />
    &lt;path d="M6 12l-3 0" />
    &lt;path d="M7.75 7.75l-2.15 -2.15" />
  &lt;/Svg>
)

export const LinkIcon: Component&lt;IconProps> = (props) => (
  &lt;Svg {...props}>
    &lt;path stroke="none" d="M0 0h24v24H0z" fill="none" />
    &lt;path d="M9 15l6 -6" />
    &lt;path d="M11 6l.463 -.536a5 5 0 0 1 7.071 7.072l-.534 .464" />
    &lt;path d="M13 18l-.397 .534a5.068 5.068 0 0 1 -7.127 0a4.972 4.972 0 0 1 0 -7.071l.524 -.463" />
  &lt;/Svg>
)

export const DiscordIcon: Component&lt;IconProps> = (props) => {
  return (
    &lt;Svg {...props}>
      &lt;path fill="currentColor" stroke="none" d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zM8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9555-2.4189 2.157-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.9555 2.4189-2.1569 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9554-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.946 2.4189-2.1568 2.4189Z" />
    &lt;/Svg>
  )
}

export const GitHubIcon: Component&lt;IconProps> = (props) => {
  return (
    &lt;Svg {...props}>
      &lt;path fill="currentColor" stroke="none" d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
    &lt;/Svg>
  )
}
</file>
<file name="loader/src/components/Activator.tsx">
import { Component, createSignal, onMount } from 'solid-js'
import { Dynamic } from 'solid-js/web'
import { CoreModule } from '../lib/core-module'
import { dialog, event } from '@tauri-apps/api'
import { BoltIcon, PowerIcon } from './Icons'

export const Activator: Component = () => {

  const [loading, setLoading] = createSignal(true)
  const [active, setActive] = createSignal(false)

  const activate = async () => {
    if (!loading()) {
      setLoading(true)

      try {
        if (!await CoreModule.checkLeagueDir()) {
          await dialog.message('Please select a valid LoL Client folder in Settings.', { type: 'warning' })
          return
        }

        if (!await CoreModule.exists()) {
          await dialog.message('Failed to perform activation, the core module is not found.', { type: 'warning' })
          return
        }

        const nextActive = !active()
        const { activated, error } = await CoreModule.doActivate(nextActive)

        if (error) {
          await dialog.message(`Failed to perform activation, got error:\n${error}`, { type: 'warning' })
        } else if (activated === nextActive) {
          setActive(activated)
        }
      }
      finally {
        setLoading(false)
      }
    }
  }

  onMount(async () => {
    setActive(await CoreModule.isActivated())
    setLoading(false)

    if (window.isMac) {
      event.listen('active-status', (e) => {
        setActive(Boolean(e.payload))
      })
    }
  })

  return (
    &lt;div
      class="fixed bottom-6 right-0 z-10 translate-x-28 hover:translate-x-0 transition-transform"
    >
      &lt;div
        class="flex items-center justify-between pl-3 shadow-lg w-44 h-14 rounded-l-full border border-neutral-700/30 border-r-0
        cursor-pointer aria-disabled::cursor-not-allowed group bg-card aria-checked:bg-primary
        hover:shadow-xl transition-colors ease-out duration-300"
        aria-disabled={loading()}
        aria-checked={active()}
        onClick={activate}
      >
        &lt;div
          class="flex items-center justify-center size-8 text-primary rounded-full group-hover:bg-primary
          aria-checked:bg-muted group-hover:text-accent group-hover:aria-checked:bg-muted group-hover:aria-checked:text-primary"
          aria-checked={active()}>
          &lt;span class="group-hover:animate-pulse">
            &lt;Dynamic component={active() ? BoltIcon : PowerIcon} thickness={2.5} />
          &lt;/span>
        &lt;/div>
        &lt;div
          class="flex-1 px-6 text-lg text-center font-semibold text-primary aria-checked:text-muted"
          aria-checked={active()}
        >{active() ? 'READY' : 'Activate'}&lt;/div>
      &lt;/div>
    &lt;/div>
  )
}
</file>
<file name="loader/src/components/Appbar.tsx">
import { Component, createSignal, JSX, onMount, Show, splitProps } from 'solid-js'
import { appWindow } from '@tauri-apps/api/window'
import { twMerge } from 'tailwind-merge'
import { SettingsIcon, StoreIcon } from './Icons'
import { useRoot } from '../lib/root'
import { useTippy } from '../lib/utils'
import icon from '../assets/icon-sm.png'

const Command: Component&lt;JSX.HTMLAttributes&lt;HTMLSpanElement>> = (props) => {
  const [local, rest] = splitProps(props, ['class'])
  return (
    &lt;span
      class={twMerge("flex justify-center items-center w-12 h-full hover:bg-foreground/15", local.class)}
      {...rest}
    />
  )
}

export const Appbar: Component&lt;{
  isHome: boolean
}> = (props) => {

  const { settings, setStore } = useRoot()
  const [focus, setFocus] = createSignal(true)

  const minimize = () => appWindow.minimize()
  const close = () => {
    if (window.isMac) {
      appWindow.hide()
    } else {
      appWindow.close()
    }
  }

  onMount(async () => {
    setFocus(await appWindow.isFocused())
    appWindow.onFocusChanged(e => setFocus(e.payload))
  })

  return (
    &lt;div
      data-tauri-drag-region
      class="flex items-center justify-between h-10 aria-busy:bg-neutral-700 aria-busy:opacity-85"
      aria-busy={!focus()}
    >

      &lt;div class="flex items-center px-[10px] h-full pointer-events-none">
        &lt;img src={icon} class="size-5 rounded-sm" />
        &lt;span class="px-2 text-sm">Pengu Loader&lt;/span>
        &lt;span class="text-sm text-foreground/50">v{window.appVersion}&lt;/span>
      &lt;/div>

      &lt;div class="flex justify-center h-full text-foreground/80">
        &lt;Show when={props.isHome}>
          &lt;Command onClick={() => setStore(true)} ref={useTippy('Plugin Store')}>
            &lt;StoreIcon size={16} />
          &lt;/Command>
          &lt;Command onClick={settings.show} ref={useTippy('Settings')}>
            &lt;SettingsIcon size={16} />
          &lt;/Command>
        &lt;/Show>
        &lt;Command onClick={minimize}>
          &lt;svg width="10" height="10" viewBox="0 0 10.2 1" fill="currentColor">
            &lt;rect x="0" y="50%" width="10.2" height="1" />
          &lt;/svg>
        &lt;/Command>
        &lt;Command onClick={close} class="hover:text-white hover:bg-red-600">
          &lt;svg width="10" height="10" viewBox="0 0 10 10" fill="currentColor">
            &lt;polygon points="10.2,0.7 9.5,0 5.1,4.4 0.7,0 0,0.7 4.4,5.1 0,9.5 0.7,10.2 5.1,5.8 9.5,10.2 10.2,9.5 5.8,5.1" />
          &lt;/svg>
        &lt;/Command>
      &lt;/div>

    &lt;/div>
  )
}
</file>
<file name="loader/src/components/PluginStore.tsx">
import { Component, createSignal, onMount } from 'solid-js'
import { useRoot } from '~/lib/root'
import { StoreManager } from '~/lib/store'

export const PluginStore: Component = () => {

  const { setStore } = useRoot()
  // const [loading, setLoading] = createSignal(true)

  // onMount(async () => {
  //   const plugins = await StoreManager.fetchPlugins()
  // })

  return (
    &lt;div class="h-full flex flex-col p-4">
      &lt;div class="flex-1 flex flex-col items-center">
        &lt;div class="m-auto text-center space-y-4">
          &lt;p class="text-lg m-auto">Plugin Store is coming soon!&lt;/p>
          &lt;button
            class="inline-flex gap-1 items-center text-sm border border-foreground/10 rounded-sm px-3 py-1 hover:bg-foreground hover:text-background"
            tabIndex={-1} onClick={() => setStore(false)}
          >Go back&lt;/button>
        &lt;/div>
      &lt;/div>
    &lt;/div>
  )
}
</file>
<file name="loader/src/components/PluginGallery.tsx">
import { Component, For, createSignal, onMount, Switch, Match, Show, createEffect } from 'solid-js'
import { type PluginInfo, PluginManager } from '../lib/plugins'
import { LoaderIcon, ReloadIcon, StoreIcon } from './Icons'
import { Checkbox } from './ui'
import { useConfig } from '~/lib/config'
import { useRoot } from '~/lib/root'

const PluginCard: Component&lt;PluginInfo> = (props) => {
  const [enabled, setEnabled] = createSignal(PluginManager.isEnabled(props.hash))
  const toggle = () => {
    PluginManager.toggleState(props.hash).then(setEnabled)
  }
  return (
    &lt;label draggable="false" class="flex flex-col gap-2 overflow-hidden shadow-md rounded-md border-solid bg-card border-[1px] border-neutral-600 hover:border-neutral-400">
      {/* &lt;div class="aspect-video relative overflow-hidden cursor-pointer aria-[disabled=true]:grayscale" aria-disabled={!enabled()}>
        &lt;a href="/overlays/lol?select=arenaAugments">
          &lt;img src="..." alt="" />
        &lt;/a>
      &lt;/div> */}
      &lt;div class="flex flex-col p-3 gap-2 items-stretch">
        &lt;div class="flex items-center space-x-2">
          &lt;Checkbox checked={enabled()} onClick={toggle} />
          &lt;h3 class="font-semibold leading-7 text-base text-ellipsis whitespace-nowrap overflow-hidden">{props.name}&lt;/h3>
        &lt;/div>
        {/* &lt;ul class="flex items-center gap-1 flex-1">
          &lt;li class="rounded-sm px-1 bg-slate-300 leading-3">
            &lt;span class="text-xs leading-5 font-semibold">Utility&lt;/span>
          &lt;/li>
        &lt;/ul> */}
        &lt;div class="text-sm leading-5 text-muted-foreground break-words">@plugins/{props.path}&lt;/div>
      &lt;/div>
    &lt;/label>
  )
}

export const PluginGallery: Component = () => {

  const config = useConfig()
  const { setStore } = useRoot()

  const [loading, setLoading] = createSignal(false)
  const [plugins, setPlugins] = createSignal(Array&lt;PluginInfo>(), { equals: false })

  const revealPlugins = () => {
    PluginManager.openFolder()
  }

  const reload = () => {
    setPlugins([])
    setLoading(true)

    Promise.all([
      PluginManager.getPlugins()
        .then(setPlugins)
        .catch(() => { }),
      new Promise((r) => setTimeout(r, 500))
    ])
      .finally(() => setLoading(false))
  }

  onMount(reload)
  createEffect(() => {
    // watch the dir changes
    config.app.plugins_dir()
    reload()
  })

  return (
    &lt;div class="h-full">
      &lt;Switch>
        &lt;Match when={loading()}>
          &lt;div class="text-accent-foreground m-auto flex flex-col items-center justify-center gap-2 h-full">
            &lt;LoaderIcon class="animate-spin" />
            &lt;p>Loading...&lt;/p>
          &lt;/div>
        &lt;/Match>
        &lt;Match when={!loading()}>
          &lt;div class="grid p-4">
            &lt;h1 class="text-foreground/80 text-sm">Installed plugins ({plugins().length})&lt;/h1>
            &lt;Show
              when={plugins().length > 0}
              fallback={&lt;h3 class="text-center my-8 w-full">You have no plugins!&lt;/h3>}
            >
              &lt;div class="grid grid-cols-3 gap-x-4 my-4 gap-y-6">
                &lt;For each={plugins()}>
                  {plugin => &lt;PluginCard {...plugin} />}
                &lt;/For>
              &lt;/div>
            &lt;/Show>
            &lt;div class="flex justify-evenly items-center w-full py-8">
              &lt;div class="flex flex-col items-center space-y-4">
                &lt;p class="text-sm text-secondary-foreground/70">Don't see your plugins?&lt;/p>
                &lt;div class="flex gap-1">
                  &lt;button
                    class="inline-flex gap-1 items-center text-sm border border-foreground/10 rounded-sm px-3 py-1 hover:bg-foreground hover:text-background"
                    tabIndex={-1}
                    onClick={reload}
                  >
                    &lt;ReloadIcon size={14} /> Reload
                  &lt;/button>
                  &lt;button
                    class="inline-flex gap-1 items-center text-sm border border-foreground/10 rounded-sm px-3 py-1 hover:bg-foreground hover:text-background"
                    tabIndex={-1}
                    onClick={revealPlugins}
                  >
                    Open folder
                  &lt;/button>
                &lt;/div>
              &lt;/div>
              &lt;div class="flex flex-col items-center space-y-4">
                &lt;p class="text-sm text-secondary-foreground/70">More plugins?&lt;/p>
                &lt;button
                  class="inline-flex gap-1 items-center text-sm border border-foreground/10 rounded-sm px-3 py-1 hover:bg-foreground hover:text-background"
                  tabIndex={-1}
                  onClick={() => setStore(true)}
                >
                  &lt;StoreIcon size={14} /> Get in Store
                &lt;/button>
              &lt;/div>
            &lt;/div>
          &lt;/div>
        &lt;/Match>
      &lt;/Switch>
    &lt;/div>
  )
}
</file>
<file name="loader/src/components/ui/Checkbox.tsx">
import type { Component } from 'solid-js'

export type CheckboxProps = {
  checked?: boolean
  disabled?: boolean
  onChange?: (checked: boolean) => void
  onClick?: () => void
}

export const Checkbox: Component&lt;CheckboxProps> = (props) => {

  const click = () => {
    if (!props.disabled) {
      props.onClick?.()
      props.onChange?.(!(props.checked === true))
    }
  }

  return (
    &lt;button
      class="size-4 shrink-0 border-2 border-primary/40 flex items-center justify-center rounded-sm cursor-default
      hover:border-primary aria-checked:bg-primary aria-checked:border-primary
      disabled:bg-muted disabled:opacity-50 disabled:hover:border-primary/40"
      disabled={props.disabled}
      aria-checked={props.checked}
      onClick={click}
    >
      &lt;span
        class="text-accent invisible aria-checked:visible"
        aria-checked={props.checked}
      >
        &lt;svg width="10" height="8" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
          &lt;path fill-rule="evenodd" clip-rule="evenodd" d="M9.143 1.433a.5.5 0 0 1 .007.707L4.04 7.346a.5.5 0 0 1-.74-.029L.82 4.355a.5.5 0 0 1 .063-.704l.639-.534a.5.5 0 0 1 .704.062l1.536 1.835L7.842.857A.5.5 0 0 1 8.549.85l.594.583Z" />
        &lt;/svg>
      &lt;/span>
    &lt;/button>
  )
}
</file>
<file name="loader/src/components/ui/RadioButton.tsx">
import { Component } from 'solid-js'

export type RadioButtonProps = {
  checked?: boolean
  disabled?: boolean
  onClick?: () => void
}

export const RadioButton: Component&lt;RadioButtonProps> = (props) => {

  const click = () => {
    if (!props.disabled) {
      props.onClick?.()
    }
  }

  return (
    &lt;button
      role="radio"
      type="button"
      class="shrink-0 size-4 flex cursor-default rounded-full border-2 border-primary/40 hover:border-primary aria-checked:border-primary aria-checked:bg-primary"
      onClick={click}
      aria-checked={props.checked}
      aria-disabled={props.disabled}
    >
      &lt;span
        class="block mx-auto my-auto rounded-md size-3 border-2 border-black invisible aria-checked:visible"
        aria-checked={props.checked}
      >
      &lt;/span>
    &lt;/button>
  )
}
</file>
<file name="loader/src/components/ui/index.ts">
export { Button } from './Button'
export { Checkbox } from './Checkbox'
export { ComboBox } from './ComboBox'
export { RadioButton } from './RadioButton'
</file>
<file name="loader/src/components/ui/Button.tsx">
import { Component, JSX, splitProps } from 'solid-js'
import { twMerge } from 'tailwind-merge'
import { cva } from 'class-variance-authority'

const buttonVariants = cva(
  [
    'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors',
    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
    'disabled:pointer-events-none disabled:opacity-50',
  ],
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        outline: 'border border-foreground/20 hover:bg-foreground hover:text-secondary',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    }
  }
)

interface Props extends JSX.HTMLAttributes&lt;HTMLButtonElement> {
  disabled?: boolean
  variant?: 'default' | 'outline' | 'link'
  size?: 'default' | 'sm' | 'lg'
}

export const Button: Component&lt;Props> = (props) => {
  const [local, rest] = splitProps(props, ['class', 'variant', 'size'])
  return (
    &lt;button
      class={twMerge(buttonVariants({ variant: local.variant, size: local.size }), local.class)}
      {...rest}
    />
  )
}
</file>
<file name="loader/src/components/ui/ComboBox.tsx">
import { Component, For, Show, createMemo, createSignal } from 'solid-js'

const ComboboxItem: Component&lt;{
  text: string
  selected: boolean
  onClick: () => void
}> = (props) => {
  return (
    &lt;div
      onClick={props.onClick}
      class="relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent"
      role="option"
    >
      {props.text}
      &lt;Show when={props.selected}>
        &lt;svg width="15" height="15" viewBox="0 0 15 15" fill="none" class="ml-auto h-4 w-4">
          &lt;path d="M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd">&lt;/path>
        &lt;/svg>
      &lt;/Show>
    &lt;/div>
  )
}

interface Item {
  id: string
  name: string
  selected?: boolean
}

interface Props {
  items: Array&lt;Item>
  selected?: string | number
  onSelect?: (id: string, index: number) => void
}

export const ComboBox: Component&lt;Props> = (props) => {

  const [opened, setOpened] = createSignal(false)
  const selected = createMemo(() => {
    if (typeof props.selected === 'number') {
      return Math.min(props.selected, props.items.length)
    } else if (typeof props.selected === 'string') {
      for (let i = 0; i &lt; props.items.length; i++) {
        if (props.items[i].id === props.selected) {
          return i
        }
      }
    }
    return 0
  })

  const select = (id: string, index: number) => {
    setOpened(false)
    props.onSelect?.(id, index)
  }

  return (
    &lt;div class="relative min-w-48">
      &lt;button
        onClick={() => setOpened(v => !v)}
        class="relative inline-flex items-center whitespace-nowrap rounded-md text-sm font-medium 
          transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring 
          disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm 
          hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2 w-full justify-between"
        role="combobox"
        aria-expanded={opened()}
        type="button"
      >
        &lt;span>
          {props.items[selected()]?.name ?? ''}
        &lt;/span>
        &lt;svg
          width="15"
          height="15"
          viewBox="0 0 15 15"
          fill="none"

          class="ml-2 h-4 w-4 shrink-0 opacity-50"
        >
          &lt;path
            d="M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z"
            fill="currentColor"
            fill-rule="evenodd"
            clip-rule="evenodd"
          >&lt;/path>
        &lt;/svg>
      &lt;/button>
      &lt;Show when={opened()}>
        &lt;div class="absolute top-full left-0 z-50 mt-1 w-full">
          &lt;div
            role="dialog"
            class="rounded-md border bg-popover text-popover-foreground shadow-md outline-none"
            tabindex="-1"
          >
            &lt;div class="flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground">
              &lt;div class="overflow-hidden p-1 text-foreground" role="presentation">
                &lt;div role="group">
                  &lt;For each={props.items}>
                    {(item, index) => &lt;ComboboxItem
                      text={item.name}
                      selected={selected() === index()}
                      onClick={() => select(item.id, index())}
                    />}
                  &lt;/For>
                &lt;/div>
              &lt;/div>
            &lt;/div>
          &lt;/div>
        &lt;/div>
      &lt;/Show>
    &lt;/div>
  )
}
</file>
<file name="loader/src/components/settings/templates.tsx">
import { children, Component, Show } from 'solid-js'
import { Checkbox, CheckboxProps } from '../ui/Checkbox'
import { RadioButton, RadioButtonProps } from '../ui/RadioButton'

export const OptionSet: Component&lt;{
  name: string
  disabled?: boolean
  children: any
}> = (props) => {
  const c = children(() => props.children)
  return (
    &lt;div class="aria-disabled:pointer-events-none aria-disabled:opacity-50" aria-disabled={props.disabled}>
      &lt;h3 class="font-semibold text-neutral-400 text-sm mb-2">{props.name}&lt;/h3>
      &lt;div class="space-y-4">
        {c()}
      &lt;/div>
    &lt;/div>
  )
}

export const CheckOption: Component&lt;CheckboxProps &amp; {
  caption: string
  message?: string
}> = (props) => {
  return (
    &lt;label class="flex mb-4 space-x-4 aria-disabled:pointer-events-none aria-disabled:opacity-60" aria-disabled={props.disabled}>
      &lt;div class="mt-1">
        &lt;Checkbox {...props} />
      &lt;/div>
      &lt;div class="flex flex-col justify-start">
        &lt;h2 class="text-neutral-200">{props.caption}&lt;/h2>
        &lt;Show when={props.message}>
          &lt;p class="text-neutral-400 text-sm">{props.message}&lt;/p>
        &lt;/Show>
      &lt;/div>
    &lt;/label>
  )
}

export const RadioOption: Component&lt;RadioButtonProps &amp; {
  caption: string
  message: string
}> = (props) => {
  return (
    &lt;label class="flex mb-4 space-x-4 aria-disabled:pointer-events-none aria-disabled:opacity-60" aria-disabled={props.disabled}>
      &lt;div class="mt-1">
        &lt;RadioButton {...props} />
      &lt;/div>
      &lt;div class="flex flex-col justify-start">
        &lt;h2 class="text-neutral-200">{props.caption}&lt;/h2>
        &lt;p class="text-neutral-400 text-sm">{props.message}&lt;/p>
      &lt;/div>
    &lt;/label>
  )
}
</file>
<file name="loader/src/components/settings/Tab.Pengu.tsx">
import { Component, createSignal, onMount, Show } from 'solid-js'
import { dialog } from '@tauri-apps/api'
import { Config, useConfig } from '~/lib/config'
import { LeagueClient } from '~/lib/league-client'
import { CheckOption, OptionSet, RadioOption } from './templates'
import { ActivationMode, CoreModule } from '~/lib/core-module'
import { Startup } from '~/lib/startup'

const LaunchSettings: Component = () => {
  const [startup, setSatrtup] = createSignal(false)

  const toggleStartup = async () => {
    let enable = !await Startup.isEnabled()
    await Startup.setEnable(enable)
    setSatrtup(enable)
  }

  onMount(async () => {
    setSatrtup(await Startup.isEnabled())
  })

  return (
    &lt;OptionSet name="Launch Settings">
      &lt;CheckOption
        caption="Run on startup"
        message="Automatically run Pengu when your computer starts."
        checked={startup()}
        onClick={toggleStartup}
      />
    &lt;/OptionSet>
  )
}

export const TabPengu: Component = () => {

  const { app } = useConfig()

  const changePluginsDir = async () => {
    const dir = await dialog.open({
      directory: true,
      defaultPath: Config.basePath(),
    })

    if (typeof dir === 'string') {
      await app.plugins_dir(dir)
    }
  }

  const setActivationMode = async (mode: ActivationMode) => {
    if (await CoreModule.isActivated()) {
      await dialog.message('Please deactivate Pengu before changing the activation mode.', { type: 'warning' })
    } else {
      await app.activation_mode(mode)
    }
  }

  const changeLeagueDir = async () => {
    const dir = await dialog.open({
      directory: true
    })

    if (typeof dir === 'string') {
      if (await LeagueClient.validateDir(dir)) {
        await app.league_dir(dir)
      } else {
        await dialog.message('Your selected path is not valid.', { type: 'warning' })
      }
    }
  }

  return (
    &lt;div class="space-y-4">

      &lt;OptionSet name="Plugins Folder">
        &lt;span
          class="block text-base text-neutral-200 px-3 py-1 hover:bg-neutral-400/20 rounded-md"
          onClick={changePluginsDir}>
          {app.plugins_dir() || './plugins'}
        &lt;/span>
      &lt;/OptionSet>

      &lt;Show when={!window.isMac}>
        &lt;OptionSet name="LoL Client Location" disabled={app.activation_mode() === ActivationMode.Universal}>
          &lt;span
            class="block text-base text-neutral-200 px-3 py-1 hover:bg-neutral-400/20 rounded-md"
            onClick={changeLeagueDir}>
            {app.league_dir() || '(not selected)'}
          &lt;/span>
        &lt;/OptionSet>
      &lt;/Show>

      &lt;Show when={window.isMac}>
        &lt;LaunchSettings />
      &lt;/Show>

      &lt;OptionSet name="Activation Mode">
        &lt;Show when={!window.isMac}>
          &lt;RadioOption
            caption="Universal"
            message="Apply to all League Clients, including live and PBE."
            checked={app.activation_mode() === ActivationMode.Universal}
            onClick={() => setActivationMode(ActivationMode.Universal)}
          />
          &lt;RadioOption
            caption="Targeted"
            message="Apply to a specific League Client that you choose. Use it if you get access denied in Universal mode, except the Tencent server."
            checked={app.activation_mode() === ActivationMode.Targeted}
            onClick={() => setActivationMode(ActivationMode.Targeted)}
          />
        &lt;/Show>
        &lt;Show when={window.isMac}>
          &lt;RadioOption
            caption="On-demand"
            message="Apply to a specific League Client that you launch from the Riot Client. You have to keep Pengu running in background."
            disabled
            checked
          />
        &lt;/Show>
      &lt;/OptionSet>

    &lt;/div>
  )
}
</file>
<file name="loader/src/components/settings/index.tsx">
import { Component, createMemo, createSignal, For } from 'solid-js'
import { Dynamic } from 'solid-js/web'
import { useRoot } from '~/lib/root'

import { TabClient } from './Tab.Client'
import { TabPengu } from './Tab.Pengu'
import { TabAbout } from './Tab.About'

const Tabs: Array&lt;[string, any]> = [
  ['Pengu Loader', TabPengu],
  ['League Client', TabClient],
  ['About', TabAbout],
]

export const Settings: Component = () => {

  const { settings } = useRoot()
  const [tabIndex, setTabIndex] = createSignal(0)

  const currenTab = createMemo(() => Tabs[tabIndex()][1])
  const currenTabName = createMemo(() => Tabs[tabIndex()][0])

  return (
    &lt;div
      class="h-screen fixed inset-0 bg-[#0006] z-50 flex justify-center items-center aria-hidden:hidden"
      aria-hidden={!settings.visible()}
    >
      &lt;div data-tauri-drag-region class="absolute top-0 w-full h-10" />
      &lt;div class="border-[1px] border-foreground/15 bg-card rounded-[12px] relative flex w-[800px] h-[460px]">

        &lt;span class="absolute top-2 right-2 flex justify-center items-center w-8 h-8 text-slate-300 hover:text-white hover:bg-neutral-500/20 rounded-lg" onClick={settings.hide}>
          &lt;svg width="10" height="10" viewBox="0 0 10 10" fill="currentColor">
            &lt;polygon points="10.2,0.7 9.5,0 5.1,4.4 0.7,0 0,0.7 4.4,5.1 0,9.5 0.7,10.2 5.1,5.8 9.5,10.2 10.2,9.5 5.8,5.1" />
          &lt;/svg>
        &lt;/span>

        &lt;div class="flex flex-col bg-black/10 p-4 w-[210px] py-8">
          &lt;h1 class="text-neutral-400 text-lg font-bold mx-4">Settings&lt;/h1>
          &lt;nav class="flex flex-col mt-5 text-neutral-300 space-y-1">
            &lt;For each={Tabs}>
              {([name], index) => (
                &lt;a
                  class="px-4 py-1.5 rounded-md hover:bg-neutral-500/10 data-[active=true]:text-white data-[active=true]:bg-neutral-500/20"
                  data-active={tabIndex() === index()} onClick={() => setTabIndex(index)}
                >{name}&lt;/a>
              )}
            &lt;/For>
          &lt;/nav>
        &lt;/div>

        &lt;div class="flex flex-col flex-1 p-4 py-8 pr-1 pb-2">
          &lt;h1 class="text-white text-lg font-bold mx-4">{currenTabName()}&lt;/h1>
          &lt;div class="flex flex-col mt-5 space-y-2 pl-4 pr-8 pb-4 flex-auto h-0 overflow-y-auto">
            &lt;Dynamic component={currenTab()} />
          &lt;/div>
        &lt;/div>

      &lt;/div>
    &lt;/div>
  )
}
</file>
<file name="loader/src/components/settings/Tab.About.tsx">
import { Component } from 'solid-js'
import { Button } from '../ui/Button'
import { DiscordIcon, GitHubIcon, LinkIcon } from '../Icons'
import { shell } from '@tauri-apps/api'

const links = {
  home: 'https://pengu.lol',
  github: 'https://github.com/PenguLoader/PenguLoader/',
  discord: 'https://chat.pengu.lol/'
}

export const TabAbout: Component = () => {
  return (
    &lt;div>
      &lt;div class="flex flex-col space-y-4">
        &lt;p class="text-base font-semibold leading-none text-neutral-300">Pengu Loader v{window.appVersion}&lt;/p>
        &lt;div class="flex items-center space-x-4 text-neutral-200">
          &lt;Button variant="outline" size="sm" class="flex items-center gap-x-2" onClick={() => shell.open(links.home)}>&lt;LinkIcon size={16} />pengu.lol&lt;/Button>
          &lt;Button variant="outline" size="sm" class="flex items-center gap-x-2" onClick={() => shell.open(links.discord)}>&lt;DiscordIcon size={16} /> Discord&lt;/Button>
          &lt;Button variant="outline" size="sm" class="flex items-center gap-x-2" onClick={() => shell.open(links.github)}>&lt;GitHubIcon size={16} /> GitHub&lt;/Button>
        &lt;/div>
      &lt;/div>
    &lt;/div>
  )
}
</file>
<file name="loader/src/components/settings/Tab.Client.tsx">
import { Component } from 'solid-js'
import { useConfig } from '~/lib/config'
import { CheckOption, OptionSet } from './templates'

export const TabClient: Component = () => {

  const { client } = useConfig()

  return (
    &lt;div class="space-y-4">

      &lt;p class="text-sm text-neutral-400">*These options work within the Client, restart it to take effect.&lt;/p>

      &lt;OptionSet name="Hot Keys">
        &lt;CheckOption
          caption="Enable hot keys"
          message="Allow Pengu to catch these hot keys when you press in the Client to perform functions below."
          checked={client.use_hotkeys()}
          onChange={client.use_hotkeys}
        />
        &lt;div class="space-y-2 ml-8 aria-disabled:opacity-50" aria-disabled={!client.use_hotkeys()}>
          &lt;div class="flex items-center space-x-2">
            &lt;kbd class="px-2 py-0.5 rounded-sm text-xs bg-neutral-500/30">Ctrl Shift R&lt;/kbd>
            &lt;p class="text-sm text-neutral-400">Reload the Client&lt;/p>
          &lt;/div>
          &lt;div class="flex items-center space-x-2">
            &lt;kbd class="px-2 py-0.5 rounded-sm text-xs bg-neutral-500/30">Ctrl Shift Enter&lt;/kbd>
            &lt;p class="text-sm text-neutral-400">Restart the UX&lt;/p>
          &lt;/div>
          &lt;div class="flex items-center space-x-2 aria-disabled:line-through" aria-disabled={!client.use_devtools()}>
            &lt;kbd class="px-2 py-0.5 rounded-sm text-xs bg-neutral-500/30">Ctrl Shift I&lt;/kbd>
            &lt;span>/&lt;/span>
            &lt;kbd class="px-2 py-0.5 rounded-sm text-xs bg-neutral-500/30">F12&lt;/kbd>
            &lt;p class="text-sm text-neutral-400">Open Chrome DevTools&lt;/p>
          &lt;/div>
        &lt;/div>
      &lt;/OptionSet>

      &lt;OptionSet name="Tweaks">
        &lt;CheckOption
          caption="Optimized Client"
          message="Enable caching and disable some unnecessary things under the Client. This option does not cause your connection issues."
          checked={client.optimized_client()}
          onChange={client.optimized_client}
        />
        &lt;CheckOption
          caption="Super Potato Mode"
          message="Disable all animations and transitions, also reduce input lag from the Client."
          checked={client.super_potato()}
          onChange={client.super_potato}
        />
        &lt;CheckOption
          caption="Silent Mode"
          message="Suppress all notifications and flashing foreground window when matchmaking found."
          checked={client.silent_mode()}
          onChange={client.silent_mode}
        />
      &lt;/OptionSet>

      &lt;OptionSet name="Developer">
        &lt;CheckOption
          caption="Developer Tools"
          message="Allow you to open Chrome DevTools to debug the UX and plugins."
          checked={client.use_devtools()}
          onChange={client.use_devtools}
        />
        &lt;CheckOption
          caption="Insecure Mode"
          message="Disable all web security features like CORS and CSP."
          checked={client.insecure_mode()}
          onChange={client.insecure_mode}
        />
        &lt;CheckOption
          caption="RiotClient API"
          message="Allow you to access RiotClient API via 'riotclient' domain."
          checked={client.use_riotclient()}
          onChange={client.use_riotclient}
        />
        &lt;CheckOption
          caption="Allow Proxy"
          message="Allow the UX requests traffic through network proxy."
          checked={client.use_proxy()}
          onChange={client.use_proxy}
        />
      &lt;/OptionSet>

    &lt;/div>
  )
}
</file>
<file name="loader/src/lib/store.ts">
import yaml from 'js-yaml'

interface IPlugin {
  name: string
  slug: string
  description: string

  images: string[]
  repo: string
  tags: string[]

  theme: boolean
  auto_update: boolean
}

interface IRegistry {
  name: string
  version: string
  plugins: IPlugin
}

export const StoreManager = new class {

  async fetchPlugins(): Promise&lt;IPlugin> {
    const res = await fetch('https://raw.githack.com/PenguLoader/plugin-store/main/registry/plugins.yml')
    const registry = &lt;IRegistry>await res.text().then(t => yaml.load(t))
    return registry.plugins
  }

}
</file>
<file name="loader/src/lib/datatstore.ts">
import { exists, readBinaryFile } from '@tauri-apps/api/fs'
import { Config } from './config'

export const DataStore = new class {

    async json(): Promise&lt;object> {
        const path = await Config.basePath('datastore')
        if (await exists(path)) {
            try {
                const data = await readBinaryFile(path)
                this.transform(data)
                return this.decode(data)
            } catch {
            }
        }
        return {}
    }

    private decode(data: Uint8Array) {
        if (data.length >= 2) {
            const decoder = new TextDecoder()
            const json = decoder.decode(data)
            return JSON.stringify(json)
        } else {
            return {}
        }
    }

    private transform(data: Uint8Array) {
        const key = 'A5dgY6lz9fpG9kGNiH1mZ'
        for (let i = 0; i &lt; data.length; i++) {
            data[i] ^= key.charCodeAt(i % key.length)
        }
    }
}
</file>
<file name="loader/src/lib/utils.ts">
import { createSignal, onCleanup, onMount } from 'solid-js'
import tippy, { type Instance as TippyInstance } from 'tippy.js'

export function isMac() {
  return /mac/i.test(navigator.platform)
}

// fnv1a 32-bit
export function getHash(str: string) {
  const data = new TextEncoder().encode(str)
  let hash = 0x811c9dc5

  for (const byte of data) {
    hash ^= byte
    hash += (hash &lt;&lt; 1) + (hash &lt;&lt; 4) + (hash &lt;&lt; 7) + (hash &lt;&lt; 8) + (hash &lt;&lt; 24)
  }

  return hash >>> 0
}

export function useTippy(tooltip: string) {
  let instance: TippyInstance
  const [ref, setRef] = createSignal&lt;HTMLElement>(null!)

  onMount(() => {
    instance = tippy(ref(), {
      content: tooltip,
      arrow: false,
    })
  })

  onCleanup(() => {
    instance?.destroy()
  })

  return setRef
}
</file>
<file name="loader/src/lib/config.ts">
import { Accessor, createRoot, createSignal } from 'solid-js'
import { fs, invoke } from '@tauri-apps/api'
import { ActivationMode } from './core-module'
import { IniMap } from '@std/ini'

const defaultConfig = {
  app: {
    language: 'en',
    plugins_dir: '',
    league_dir: '',
    disabled_plugins: '',
    activation_mode: ActivationMode.Universal,
  },
  client: {
    use_hotkeys: true,
    optimized_client: true,
    silent_mode: false,
    super_potato: false,
    insecure_mode: false,
    use_devtools: false,
    use_riotclient: false,
    use_proxy: false,
  }
}

/// TS is awesome!
type ConfigSection = keyof typeof defaultConfig
type ConfigKey&lt;S extends ConfigSection> = keyof typeof defaultConfig[S]
type ConfigValue&lt;S extends ConfigSection, K extends ConfigKey&lt;S>> = typeof defaultConfig[S][K]

/**
 * Parse string value based on the default value.
 */
function parseValue(val?: string, def?: any) {
  if (val != null) {
    if (typeof def === 'boolean') {
      val = val.trim().toLowerCase()
      return val === '1' || val === 'true'
    } else if (typeof def === 'number') {
      const num = parseInt(val.trim())
      if (!isNaN(num) &amp;&amp; !isFinite(num)) {
        return num
      }
    } else {
      return val
    }
  }
  return def
}

export const Config = new class {

  private baseDir = '.'
  private configPath = 'config'
  private ini = new IniMap({ pretty: true })

  /**
   * Get base path to the exec dir.
   * The function does not support relative paths.
   * Don't use Tauri's join() due to async issue.
   */
  basePath(...paths: string[]) {
    return this.baseDir + '/' + paths.join('/')
  }

  /**
   * Load config data from file.
   * Must call it first before doing UI operations.
   * @returns A boolean value indicates the config file already exists.
   */
  async load(): Promise&lt;boolean> {
    const base = await invoke&lt;string>('plugin:config|get_base_dir')
    this.baseDir = base.replace(/\\/g, '/')
    this.configPath = `${this.baseDir}/config`

    if (await fs.exists(this.configPath)) {
      const content = await fs.readTextFile(this.configPath)

      this.ini.parse(content, (key, value, section) => {
        // ensure keys are in default config 
        if (section &amp;&amp; section in defaultConfig) {
          const sec = (&lt;any>defaultConfig)[section] as Record&lt;string, any>
          if (key in sec) {
            return parseValue(value, sec[key])
          }
        }
        return value
      })

      return true
    }

    return false
  }

  /**
   * Save config data to file.
   */
  async save() {
    const content = this.ini.toString()
      .replace(/([^\n])\n\[/g, '$1\n\n[')
      .trimStart()
    await fs.writeTextFile(this.configPath, content)
  }

  /**
   * Get intermidiate data.
   */
  get&lt;S extends ConfigSection, K extends ConfigKey&lt;S>>(section: S, key: K, def?: ConfigValue&lt;S, K>): ConfigValue&lt;S, K> {
    return &lt;any>this.ini.get(section, &lt;string>key) ?? def
  }

  /**
   * Set intermidiate data.
   */
  set&lt;S extends ConfigSection, K extends ConfigKey&lt;S>>(section: S, key: K, value: ConfigValue&lt;S, K>) {
    this.ini.set(section, &lt;string>key, value)
  }
}

interface ConfigEntry&lt;T> extends Accessor&lt;T> {
  // (): T
  (value: T): Promise&lt;void>
  (setter: (prev: T) => T): Promise&lt;void>
}

type TransformEntry&lt;T> = {
  [K in keyof T]: T[K] extends object ? TransformEntry&lt;T[K]> : ConfigEntry&lt;T[K]>
}

function defineEntry(section: string, key: string, def: any) {
  const [get, set] = createSignal()
  return function (value?: any) {
    if (arguments.length === 0 || value == null) {
      let val = get()
      if (val === undefined) {
        // @ts-ignore
        val = Config.get(section, key, def)
        set(() => val)
      }
      return val
    } else {
      if (typeof value === 'function') {
        value = value(get())
      }
      // @ts-ignore
      Config.set&lt;T>(section, key, value!)
      set(() => value!)
      return Config.save()
    }
  }
}

const _config = createRoot(() => {
  const base = defaultConfig as any
  const config: Record&lt;string, object> = {}

  for (const section in defaultConfig) {
    const sec: Record&lt;string, any> = {}

    for (const key in base[section]) {
      const def = base[section][key]
      sec[key] = defineEntry(section, key, def)
    }

    config[section] = sec
  }

  return config as TransformEntry&lt;typeof defaultConfig>
})

export const useConfig = () => _config
</file>
<file name="loader/src/lib/startup.ts">
import { invoke } from '@tauri-apps/api'

export const Startup = new class {

  async isEnabled() {
    return await invoke&lt;boolean>('plugin:startup|is_enabled')
  }

  async setEnable(enable: boolean) {
    await invoke&lt;boolean>('plugin:startup|set_enable', {
      enable: enable
    })
  }

}
</file>
<file name="loader/src/lib/i18n.ts">
import { createRoot } from 'solid-js'
import { createStore } from 'solid-js/store'
import translations from '../../translations.json'
import { useConfig } from './config'

const EN = translations.languages[0]
type TranslationKey = keyof typeof EN.translations
type TranslationMap = Record&lt;TranslationKey, string>

const _i18n = createRoot(() => {
  const [current, set] = createStore&lt;TranslationMap>({ ...EN.translations })

  const languages = translations.languages.map((x) => ({
    id: x.id,
    name: x.name,
  }))

  const switchTo = (id: string) => {
    for (const lang of translations.languages) {
      if (lang.id === id) {
        set({ ...lang.translations })
      }
    }
  }

  const text = (key: TranslationKey): string => {
    if (key in current) {
      return current[key]
    }
    return `{{${key}}}`
  }

  return {
    languages,
    switchTo,
    t: text,
  }
})

export const useI18n = () => {
  _i18n.switchTo(useConfig().app.language())
  return _i18n
}
</file>
<file name="loader/src/lib/league-client.ts">
import { exists, readTextFile } from '@tauri-apps/api/fs'
import { join } from '@tauri-apps/api/path'

interface RiotClientInstalls {
  associated_client: Record&lt;string, string>
  rc_default: string
  rc_live: string
}

export const LeagueClient = new class {

  /**
   * Validate League folder, it must contain LCUX exe.
   */
  async validateDir(dir: string): Promise&lt;boolean> {
    if (dir &amp;&amp; typeof dir === 'string') {
      const uxPath = await join(dir, 'LeagueClientUx.exe')
      return await exists(uxPath)
    }
    return false
  }

  async correctDir() {

  }

  /**
   * Find League from the RiotClient manifest.
   */
  async findLeaguePath(): Promise&lt;string | null> {
    const jsonPath = 'C:\\ProgramData\\Riot Games\\RiotClientInstalls.json'

    try {
      if (await exists(jsonPath)) {
        const json = await readTextFile(jsonPath)
        const data = &lt;RiotClientInstalls>JSON.parse(json)

        let rcPath = ''
        if (data.rc_live)
          rcPath = await join(data.rc_live, '..')
        else if (!data.rc_default)
          rcPath = await join(data.rc_default, '..')

        let lcDir = await join(rcPath, '..', 'League of Legends')
        if (await this.validateDir(lcDir))    // found
          return await join(lcDir)

        let lcPbeDir = await join(rcPath, '..', 'League of Legends (PBE)')
        if (await this.validateDir(lcPbeDir)) // found PBE
          return await join(lcPbeDir)

        if (typeof data.associated_client.Count === 'object') {
          for (let k in data.associated_client) {
            if (/\(pbe\)/i.test(k))
              lcPbeDir = k.replace(/[\\\/]$/, '')
            else
              lcDir = k.replace(/[\\\/]$/, '')
          }

          if (await this.validateDir(lcDir))    // found
            return lcDir
          else if (await this.validateDir(lcPbeDir)) // found PBE
            return lcPbeDir
        }
      }
    }
    catch {
    }

    return null
  }

}
</file>
<file name="loader/src/lib/core-module.ts">
import { invoke } from '@tauri-apps/api'
import { Config } from './config'
import { LeagueClient } from './league-client'

export enum ActivationMode {
  Universal = 0,
  Targeted,
  OnDemand,
}

export const CoreModule = new class {

  private useSymlink(): boolean {
    return Config.get('app', 'activation_mode')
      === ActivationMode.Targeted
  }

  /**
   * Check League dir is required or not.
   * Symlink mode must have it to activate.
   */
  async checkLeagueDir(): Promise&lt;boolean> {
    if (this.useSymlink()) {
      const leagueDir = Config.get('app', 'league_dir')
      if (!await LeagueClient.validateDir(leagueDir)) {
        return false
      }
    }
    return true
  }

  /**
   * Check if the core module exists or not.
   */
  async exists(): Promise&lt;boolean> {
    return await invoke&lt;boolean>('plugin:config|core_exists')
  }

  /**
   * Check if the core module is activated or not.
   */
  async isActivated(): Promise&lt;boolean> {
    if (window.isMac) {
      return await invoke&lt;boolean>('plugin:macos|cmd_is_active')
    }
    return await invoke&lt;boolean>('plugin:windows|core_is_activated', {
      symlink: this.useSymlink()
    })
  }

  /**
   * Perform activation.
   * @returns A boolean that indicates the new active state,
   *    the action is successful when error message is empty.
   */
  async doActivate(active: boolean): Promise&lt;{ error: string, activated: boolean }> {
    let error = ''

    if (window.isMac) {
      await invoke('plugin:macos|cmd_set_active', {
        active: active,
      })
    } else {
      error = await invoke&lt;string>('plugin:windows|core_do_activate', {
        active: active,
        symlink: this.useSymlink(),
      })
    }

    return {
      error: error,
      activated: await this.isActivated(),
    }
  }
}
</file>
<file name="loader/src/lib/plugins.ts">
import { join } from '@tauri-apps/api/path'
import { exists, readTextFile, readDir, createDir } from '@tauri-apps/api/fs'
import { Shell } from './shell'
import { Config } from './config'
import { getHash } from './utils'

export interface PluginInfo {
  name: string
  description?: string
  author?: string
  link?: string

  path: string
  entryPath: string
  hash: number
}

export const PluginManager = new class {

  private disabledSet = new Set&lt;number>()

  private getDir() {
    let path = Config.get('app', 'plugins_dir', '')
    if (!path || path.startsWith('.')) {
      path = Config.basePath('plugins')
    }
    return path
  }

  async openFolder() {
    const dir = this.getDir()
    if (!await exists(dir)) {
      await createDir(dir, {
        recursive: true
      })
    }
    await Shell.expandFolder(dir)
  }

  /**
   * Get all plugins.
   */
  async getPlugins() {
    const dir = this.getDir()
    const plugins = Array&lt;PluginInfo>()

    this.disabledSet = this.fetchDisabledSet()

    function push(name: string, _path: string, entry: string) {
      const dir2 = dir.replace(/\\/g, '/')
      const url = entry.replace(/\\/g, '/')

      const shortPath = url.replace(dir2, '').substring(1)
      const hash = getHash(shortPath.toLowerCase())

      plugins.push({
        name: name,
        path: shortPath,
        entryPath: entry,
        hash: hash,
      })
    }

    if (await exists(dir)) {
      const ref = { entry: '' }
      for (const file of await readDir(dir)) {
        if (file.children) {
          // scan @author folder
          if (file.name!.startsWith('@')) {
            for (let subdir of await readDir(file.path)) {
              // subfolder plugin that contains index.js
              if (subdir.children
                &amp;&amp; this.allowedName(subdir.name)
                &amp;&amp; await this.hasIndex(subdir.path, ref)) {
                const name = `${file.name}/${subdir.name}`
                push(name, subdir.path, ref.entry)
              }
            }
          }
          // subfolder plugin that contains index.js
          else if (this.allowedName(file.name) &amp;&amp; await this.hasIndex(file.path, ref)) {
            push(file.name!, file.path, ref.entry)
          }
        }
        // top-level file plugin
        else if (this.allowedName(file.name) &amp;&amp; await this.isIndex(file.path)) {
          const name = file.name!.substring(0, file.name!.lastIndexOf('.'))
          push(name, file.path, file.path)
        }
      }

      // parse metadata
      for (const plugin of plugins) {
        await this.parsePluginEntry(plugin)
      }
    }

    return plugins
  }

  isEnabled(hash: number) {
    return !this.disabledSet.has(hash)
  }

  async toggleState(hash: number) {
    if (this.disabledSet.has(hash)) {
      this.disabledSet.delete(hash)
    } else {
      this.disabledSet.add(hash)
    }

    const value = [...this.disabledSet].map(x => x.toString(16)).join()
    Config.set('app', 'disabled_plugins', value)
    await Config.save()

    return this.isEnabled(hash)
  }

  private allowedName(name?: string) {
    return typeof name === 'string'
      &amp;&amp; !name.startsWith('_')
      &amp;&amp; !name.startsWith('.')
  }

  private async isIndex(path: string, ref?: { entry: string }) {
    if (path.endsWith('.js') &amp;&amp; await exists(path) || await exists(path += '_')) {
      if (typeof ref === 'object') {
        ref.entry = path
      }
      return true
    }
    return false
  }

  private async hasIndex(dir: string, ref: { entry: string }) {
    const path = await join(dir, 'index.js')
    return await this.isIndex(path, ref)
  }

  private async parsePluginEntry(plugin: PluginInfo) {
    if (await exists(plugin.entryPath)) {
      const content = await readTextFile(plugin.entryPath)
      const description = this.getTagValue(content, 'description')
      const author = this.getTagValue(content, 'author')
      const link = this.getTagValue(content, 'link')

      if (description)
        plugin.description = description

      if (author)
        plugin.author = author.includes('#') ? author : '@' + author

      if (link.startsWith('https://'))
        plugin.link = link
    }
  }

  // Parse @tag in jsdoc
  private getTagValue(jsdoc: string, tag: string) {
    const regex = new RegExp(`@${tag}\\s+(.+)`)
    const match = regex.exec(jsdoc)
    if (match) {
      return match[1].trim()
    }
    return ''
  }

  private fetchDisabledSet() {
    const set = new Set&lt;number>()
    const rawSet = &lt;string>Config.get('app', 'disabled_plugins', '')
    const hashes = rawSet.split(',')

    for (const hash of hashes) {
      const num = parseInt(hash.trim(), 16)
      if (num) set.add(num)
    }

    return set
  }
}
</file>
<file name="loader/src/lib/shell.ts">
import { invoke, shell } from '@tauri-apps/api'

export const Shell = {
    /**
     * Expand a folder in file explorer.
     * @param path Absolute path to folder.
     */
    async expandFolder(path: string) {
        await invoke('plugin:shell|expand_folder', {
            path: path
        })
    },

    /**
     * Reveal a file in file explorer.
     * @param path Absolute path to file.
     */
    async revealFile(path: string) {
        await invoke('plugin:shell|reveal_file', {
            path: path
        })
    },

    /**
     * Open an external link.
     * @param url URL.
     */
    async openLink(url: string) {
        if (typeof url === 'string' &amp;&amp; url.startsWith('https://')) {
            await shell.open(url)
        }
    },
}
</file>
<file name="loader/src/lib/root.ts">
import { createRoot, createSignal } from 'solid-js'

function useSettings() {
  const [visible, setVisible] = createSignal(false)
  const show = () => setVisible(true)
  const hide = () => setVisible(false)

  return {
    visible,
    show, hide,
  }
}

const _root = createRoot(() => {
  const [ready, setReady] = createSignal(false)
  const [isStore, setStore] = createSignal(false)
  const settings = useSettings()

  return {
    ready, setReady,
    isStore, setStore,
    settings,
  }
})

export const useRoot = () => _root
</file>
<file name="loader/src-tauri/Cargo.toml">
[package]
name = "pengu-loader"
version = "1.2.0"
description = "Pengu Loader app"
edition = "2021"
license = "MIT"
repository = "https://github.com/PenguLoader/PenguLoader"
homepage = "https://pengu.lol"
categories = ["application"]
keywords = ["pengu", "pengu-loader", "league-client", "league-of-legends"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
tauri-build = { version = "1", features = [] }

[dependencies]
libc = "0.2"
tauri = { version = "1", features = [
  "window-hide",
  "system-tray",
  "dialog-all",
  "window-close",
  "window-minimize",
  "window-set-title",
  "window-set-focus",
  "window-unminimize",
  "window-show",
  "window-start-dragging",
  "fs-write-file",
  "fs-rename-file",
  "fs-exists",
  "fs-read-file",
  "fs-create-dir",
  "fs-read-dir",
  "path-all",
  "shell-open",
] }
serde = { version = "1", features = ["derive"] }
serde_json = "1"
named-lock = "0.4"

[target."cfg(target_os = \"windows\")".dependencies]
winreg = "0.52"
is_elevated = "0.1"
runas = "1.2"

[target."cfg(target_os = \"macos\")".dependencies]
objc = "0.2"
base64 = "0.22"
native-tls = "0.2"
tungstenite = { version = "0.23", features = ["default", "native-tls"] }
auto-launch = "0.5"

[dependencies.sysinfo]
version = "0.31"
default-features = false
features = ["system"]

[features]
# This feature is used for production builds or when a dev server is not specified, DO NOT REMOVE!!
custom-protocol = ["tauri/custom-protocol"]

</file>
<file name="loader/src-tauri/tauri.conf.json">
{
  "build": {
    "beforeDevCommand": "pnpm dev",
    "beforeBuildCommand": "pnpm build",
    "devPath": "http://localhost:1420",
    "distDir": "../dist"
  },
  "package": {
    "productName": "Pengu Loader",
    "version": "1.2.0"
  },
  "tauri": {
    "allowlist": {
      "all": false,
      "dialog": {
        "all": true
      },
      "fs": {
        "all": false,
        "copyFile": false,
        "createDir": true,
        "exists": true,
        "readDir": true,
        "readFile": true,
        "removeDir": false,
        "removeFile": false,
        "renameFile": true,
        "writeFile": true,
        "scope": [
          "**"
        ]
      },
      "path": {
        "all": true
      },
      "shell": {
        "all": false,
        "open": true
      },
      "window": {
        "all": false,
        "center": false,
        "close": true,
        "create": false,
        "hide": true,
        "maximize": false,
        "minimize": true,
        "print": false,
        "requestUserAttention": false,
        "setAlwaysOnTop": false,
        "setClosable": false,
        "setContentProtected": false,
        "setCursorGrab": false,
        "setCursorIcon": false,
        "setCursorPosition": false,
        "setCursorVisible": false,
        "setDecorations": false,
        "setFocus": true,
        "setFullscreen": false,
        "setIcon": false,
        "setIgnoreCursorEvents": false,
        "setMaxSize": false,
        "setMaximizable": false,
        "setMinSize": false,
        "setMinimizable": false,
        "setPosition": false,
        "setResizable": false,
        "setSize": false,
        "setSkipTaskbar": false,
        "setTitle": true,
        "show": true,
        "startDragging": true,
        "unmaximize": false,
        "unminimize": true
      }
    },
    "systemTray": {
      "title": "Pengu Loader",
      "iconPath": "icons/icon.png",
      "iconAsTemplate": false
    },
    "security": {
      "csp": null
    },
    "bundle": {
      "active": true,
      "targets": "all",
      "identifier": "com.pengu.lol",
      "icon": [
        "icons/32x32.png",
        "icons/128x128.png",
        "icons/128x128@2x.png",
        "icons/icon.icns",
        "icons/icon.ico"
      ],
      "windows": {
        "allowDowngrades": true,
        "certificateThumbprint": null,
        "digestAlgorithm": null,
        "nsis": null,
        "timestampUrl": null,
        "tsp": false,
        "webviewFixedRuntimePath": null,
        "webviewInstallMode": {
          "type": "embedBootstrapper"
        },
        "wix": null
      }
    }
  }
}
</file>
<file name="loader/src-tauri/build.rs">
fn main() {
    tauri_build::build()
}

</file>
<file name="loader/src-tauri/Cargo.lock">
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 3

[[package]]
name = "addr2line"
version = "0.21.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb"
dependencies = [
 "gimli",
]

[[package]]
name = "adler"
version = "1.0.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe"

[[package]]
name = "aho-corasick"
version = "1.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
dependencies = [
 "memchr",
]

[[package]]
name = "alloc-no-stdlib"
version = "2.0.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cc7bb162ec39d46ab1ca8c77bf72e890535becd1751bb45f64c597edb4c8c6b3"

[[package]]
name = "alloc-stdlib"
version = "0.2.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94fb8275041c72129eb51b7d0322c29b8387a0386127718b096429201a5d6ece"
dependencies = [
 "alloc-no-stdlib",
]

[[package]]
name = "android-tzdata"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "anyhow"
version = "1.0.82"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f538837af36e6f6a9be0faa67f9a314f8119e4e4b5867c6ab40ed60360142519"

[[package]]
name = "atk"
version = "0.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2c3d816ce6f0e2909a96830d6911c2aff044370b1ef92d7f267b43bae5addedd"
dependencies = [
 "atk-sys",
 "bitflags 1.3.2",
 "glib",
 "libc",
]

[[package]]
name = "atk-sys"
version = "0.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "58aeb089fb698e06db8089971c7ee317ab9644bade33383f63631437b03aafb6"
dependencies = [
 "glib-sys",
 "gobject-sys",
 "libc",
 "system-deps 6.2.2",
]

[[package]]
name = "auto-launch"
version = "0.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1f012b8cc0c850f34117ec8252a44418f2e34a2cf501de89e29b241ae5f79471"
dependencies = [
 "dirs",
 "thiserror",
 "winreg 0.10.1",
]

[[package]]
name = "autocfg"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f1fdabc7756949593fe60f30ec81974b613357de856987752631dea1e3394c80"

[[package]]
name = "backtrace"
version = "0.3.71"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "26b05800d2e817c8b3b4b54abd461726265fa9789ae34330622f2db9ee696f9d"
dependencies = [
 "addr2line",
 "cc",
 "cfg-if",
 "libc",
 "miniz_oxide",
 "object",
 "rustc-demangle",
]

[[package]]
name = "base64"
version = "0.13.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8"

[[package]]
name = "base64"
version = "0.21.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567"

[[package]]
name = "base64"
version = "0.22.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9475866fec1451be56a3c2400fd081ff546538961565ccb5b7142cbd22bc7a51"

[[package]]
name = "bitflags"
version = "1.3.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"

[[package]]
name = "bitflags"
version = "2.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1"

[[package]]
name = "block"
version = "0.1.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a"

[[package]]
name = "block-buffer"
version = "0.10.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"
dependencies = [
 "generic-array",
]

[[package]]
name = "brotli"
version = "3.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d640d25bc63c50fb1f0b545ffd80207d2e10a4c965530809b40ba3386825c391"
dependencies = [
 "alloc-no-stdlib",
 "alloc-stdlib",
 "brotli-decompressor",
]

[[package]]
name = "brotli-decompressor"
version = "2.5.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4e2e4afe60d7dd600fdd3de8d0f08c2b7ec039712e3b6137ff98b7004e82de4f"
dependencies = [
 "alloc-no-stdlib",
 "alloc-stdlib",
]

[[package]]
name = "bstr"
version = "1.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "05efc5cfd9110c8416e471df0e96702d58690178e206e61b7173706673c93706"
dependencies = [
 "memchr",
 "serde",
]

[[package]]
name = "bumpalo"
version = "3.16.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c"

[[package]]
name = "bytemuck"
version = "1.15.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5d6d68c57235a3a081186990eca2867354726650f42f7516ca50c28d6281fd15"

[[package]]
name = "byteorder"
version = "1.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"

[[package]]
name = "bytes"
version = "1.6.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9"

[[package]]
name = "cairo-rs"
version = "0.15.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c76ee391b03d35510d9fa917357c7f1855bd9a6659c95a1b392e33f49b3369bc"
dependencies = [
 "bitflags 1.3.2",
 "cairo-sys-rs",
 "glib",
 "libc",
 "thiserror",
]

[[package]]
name = "cairo-sys-rs"
version = "0.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3c55d429bef56ac9172d25fecb85dc8068307d17acd74b377866b7a1ef25d3c8"
dependencies = [
 "glib-sys",
 "libc",
 "system-deps 6.2.2",
]

[[package]]
name = "cargo_toml"
version = "0.15.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "599aa35200ffff8f04c1925aa1acc92fa2e08874379ef42e210a80e527e60838"
dependencies = [
 "serde",
 "toml 0.7.8",
]

[[package]]
name = "cc"
version = "1.0.95"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d32a725bc159af97c3e629873bb9f88fb8cf8a4867175f76dc987815ea07c83b"

[[package]]
name = "cesu8"
version = "1.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c"

[[package]]
name = "cfb"
version = "0.7.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d38f2da7a0a2c4ccf0065be06397cc26a81f4e528be095826eee9d4adbb8c60f"
dependencies = [
 "byteorder",
 "fnv",
 "uuid",
]

[[package]]
name = "cfg-expr"
version = "0.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3431df59f28accaf4cb4eed4a9acc66bea3f3c3753aa6cdc2f024174ef232af7"
dependencies = [
 "smallvec",
]

[[package]]
name = "cfg-expr"
version = "0.15.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d067ad48b8650848b989a59a86c6c36a995d02d2bf778d45c3c5d57bc2718f02"
dependencies = [
 "smallvec",
 "target-lexicon",
]

[[package]]
name = "cfg-if"
version = "1.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"

[[package]]
name = "chrono"
version = "0.4.38"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401"
dependencies = [
 "android-tzdata",
 "iana-time-zone",
 "num-traits",
 "serde",
 "windows-targets 0.52.5",
]

[[package]]
name = "cocoa"
version = "0.24.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f425db7937052c684daec3bd6375c8abe2d146dca4b8b143d6db777c39138f3a"
dependencies = [
 "bitflags 1.3.2",
 "block",
 "cocoa-foundation",
 "core-foundation",
 "core-graphics",
 "foreign-types",
 "libc",
 "objc",
]

[[package]]
name = "cocoa-foundation"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8c6234cbb2e4c785b456c0644748b1ac416dd045799740356f8363dfe00c93f7"
dependencies = [
 "bitflags 1.3.2",
 "block",
 "core-foundation",
 "core-graphics-types",
 "libc",
 "objc",
]

[[package]]
name = "color_quant"
version = "1.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b"

[[package]]
name = "combine"
version = "4.6.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba5a308b75df32fe02788e748662718f03fde005016435c444eea572398219fd"
dependencies = [
 "bytes",
 "memchr",
]

[[package]]
name = "convert_case"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e"

[[package]]
name = "core-foundation"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f"
dependencies = [
 "core-foundation-sys",
 "libc",
]

[[package]]
name = "core-foundation-sys"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"

[[package]]
name = "core-graphics"
version = "0.22.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2581bbab3b8ffc6fcbd550bf46c355135d16e9ff2a6ea032ad6b9bf1d7efe4fb"
dependencies = [
 "bitflags 1.3.2",
 "core-foundation",
 "core-graphics-types",
 "foreign-types",
 "libc",
]

[[package]]
name = "core-graphics-types"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "45390e6114f68f718cc7a830514a96f903cccd70d02a8f6d9f643ac4ba45afaf"
dependencies = [
 "bitflags 1.3.2",
 "core-foundation",
 "libc",
]

[[package]]
name = "cpufeatures"
version = "0.2.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504"
dependencies = [
 "libc",
]

[[package]]
name = "crc32fast"
version = "1.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b3855a8a784b474f333699ef2bbca9db2c4a1f6d9088a90a2d25b1eb53111eaa"
dependencies = [
 "cfg-if",
]

[[package]]
name = "crossbeam-channel"
version = "0.5.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ab3db02a9c5b5121e1e42fbdb1aeb65f5e02624cc58c43f2884c6ccac0b82f95"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-deque"
version = "0.8.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d"
dependencies = [
 "crossbeam-epoch",
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-epoch"
version = "0.9.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e"
dependencies = [
 "crossbeam-utils",
]

[[package]]
name = "crossbeam-utils"
version = "0.8.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "248e3bacc7dc6baa3b21e405ee045c3047101a49145e7e9eca583ab4c2ca5345"

[[package]]
name = "crypto-common"
version = "0.1.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3"
dependencies = [
 "generic-array",
 "typenum",
]

[[package]]
name = "cssparser"
version = "0.27.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "754b69d351cdc2d8ee09ae203db831e005560fc6030da058f86ad60c92a9cb0a"
dependencies = [
 "cssparser-macros",
 "dtoa-short",
 "itoa 0.4.8",
 "matches",
 "phf 0.8.0",
 "proc-macro2",
 "quote",
 "smallvec",
 "syn 1.0.109",
]

[[package]]
name = "cssparser-macros"
version = "0.6.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "13b588ba4ac1a99f7f2964d24b3d896ddc6bf847ee3855dbd4366f058cfcd331"
dependencies = [
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "ctor"
version = "0.2.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "edb49164822f3ee45b17acd4a208cfc1251410cf0cad9a833234c9890774dd9f"
dependencies = [
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "darling"
version = "0.20.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "54e36fcd13ed84ffdfda6f5be89b31287cbb80c439841fe69e04841435464391"
dependencies = [
 "darling_core",
 "darling_macro",
]

[[package]]
name = "darling_core"
version = "0.20.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9c2cf1c23a687a1feeb728783b993c4e1ad83d99f351801977dd809b48d0a70f"
dependencies = [
 "fnv",
 "ident_case",
 "proc-macro2",
 "quote",
 "strsim",
 "syn 2.0.60",
]

[[package]]
name = "darling_macro"
version = "0.20.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a668eda54683121533a393014d8692171709ff57a7d61f187b6e782719f8933f"
dependencies = [
 "darling_core",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "data-encoding"
version = "2.6.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8566979429cf69b49a5c740c60791108e86440e8be149bbea4fe54d2c32d6e2"

[[package]]
name = "deranged"
version = "0.3.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4"
dependencies = [
 "powerfmt",
 "serde",
]

[[package]]
name = "derive_more"
version = "0.99.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321"
dependencies = [
 "convert_case",
 "proc-macro2",
 "quote",
 "rustc_version",
 "syn 1.0.109",
]

[[package]]
name = "digest"
version = "0.10.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292"
dependencies = [
 "block-buffer",
 "crypto-common",
]

[[package]]
name = "dirs"
version = "4.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059"
dependencies = [
 "dirs-sys",
]

[[package]]
name = "dirs-next"
version = "2.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1"
dependencies = [
 "cfg-if",
 "dirs-sys-next",
]

[[package]]
name = "dirs-sys"
version = "0.3.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6"
dependencies = [
 "libc",
 "redox_users",
 "winapi",
]

[[package]]
name = "dirs-sys-next"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d"
dependencies = [
 "libc",
 "redox_users",
 "winapi",
]

[[package]]
name = "dispatch"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b"

[[package]]
name = "dtoa"
version = "1.0.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dcbb2bf8e87535c23f7a8a321e364ce21462d0ff10cb6407820e8e96dfff6653"

[[package]]
name = "dtoa-short"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dbaceec3c6e4211c79e7b1800fb9680527106beb2f9c51904a3210c03a448c74"
dependencies = [
 "dtoa",
]

[[package]]
name = "dunce"
version = "1.0.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "56ce8c6da7551ec6c462cbaf3bfbc75131ebbfa1c944aeaa9dab51ca1c5f0c3b"

[[package]]
name = "either"
version = "1.11.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a47c1c47d2f5964e29c61246e81db715514cd532db6b5116a25ea3c03d6780a2"

[[package]]
name = "embed-resource"
version = "2.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c6985554d0688b687c5cb73898a34fbe3ad6c24c58c238a4d91d5e840670ee9d"
dependencies = [
 "cc",
 "memchr",
 "rustc_version",
 "toml 0.8.12",
 "vswhom",
 "winreg 0.52.0",
]

[[package]]
name = "embed_plist"
version = "1.2.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4ef6b89e5b37196644d8796de5268852ff179b44e96276cf4290264843743bb7"

[[package]]
name = "encoding_rs"
version = "0.8.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b45de904aa0b010bce2ab45264d0631681847fa7b6f2eaa7dab7619943bc4f59"
dependencies = [
 "cfg-if",
]

[[package]]
name = "equivalent"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5"

[[package]]
name = "errno"
version = "0.3.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245"
dependencies = [
 "libc",
 "windows-sys 0.52.0",
]

[[package]]
name = "fastrand"
version = "2.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a"

[[package]]
name = "fdeflate"
version = "0.3.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4f9bfee30e4dedf0ab8b422f03af778d9612b63f502710fc500a334ebe2de645"
dependencies = [
 "simd-adler32",
]

[[package]]
name = "field-offset"
version = "0.3.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "38e2275cc4e4fc009b0669731a1e5ab7ebf11f469eaede2bab9309a5b4d6057f"
dependencies = [
 "memoffset",
 "rustc_version",
]

[[package]]
name = "filetime"
version = "0.2.23"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1ee447700ac8aa0b2f2bd7bc4462ad686ba06baa6727ac149a2d6277f0d240fd"
dependencies = [
 "cfg-if",
 "libc",
 "redox_syscall 0.4.1",
 "windows-sys 0.52.0",
]

[[package]]
name = "flate2"
version = "1.0.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5f54427cfd1c7829e2a139fcefea601bf088ebca651d2bf53ebc600eac295dae"
dependencies = [
 "crc32fast",
 "miniz_oxide",
]

[[package]]
name = "fnv"
version = "1.0.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"

[[package]]
name = "foreign-types"
version = "0.3.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"
dependencies = [
 "foreign-types-shared",
]

[[package]]
name = "foreign-types-shared"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"

[[package]]
name = "form_urlencoded"
version = "1.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456"
dependencies = [
 "percent-encoding",
]

[[package]]
name = "futf"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "df420e2e84819663797d1ec6544b13c5be84629e7bb00dc960d6917db2987843"
dependencies = [
 "mac",
 "new_debug_unreachable",
]

[[package]]
name = "futures-channel"
version = "0.3.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78"
dependencies = [
 "futures-core",
]

[[package]]
name = "futures-core"
version = "0.3.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d"

[[package]]
name = "futures-executor"
version = "0.3.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a576fc72ae164fca6b9db127eaa9a9dda0d61316034f33a0a0d4eda41f02b01d"
dependencies = [
 "futures-core",
 "futures-task",
 "futures-util",
]

[[package]]
name = "futures-io"
version = "0.3.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1"

[[package]]
name = "futures-macro"
version = "0.3.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "87750cf4b7a4c0625b1529e4c543c2182106e4dedc60a2a6455e00d212c489ac"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "futures-task"
version = "0.3.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004"

[[package]]
name = "futures-util"
version = "0.3.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48"
dependencies = [
 "futures-core",
 "futures-macro",
 "futures-task",
 "pin-project-lite",
 "pin-utils",
 "slab",
]

[[package]]
name = "fxhash"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"
dependencies = [
 "byteorder",
]

[[package]]
name = "gdk"
version = "0.15.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a6e05c1f572ab0e1f15be94217f0dc29088c248b14f792a5ff0af0d84bcda9e8"
dependencies = [
 "bitflags 1.3.2",
 "cairo-rs",
 "gdk-pixbuf",
 "gdk-sys",
 "gio",
 "glib",
 "libc",
 "pango",
]

[[package]]
name = "gdk-pixbuf"
version = "0.15.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ad38dd9cc8b099cceecdf41375bb6d481b1b5a7cd5cd603e10a69a9383f8619a"
dependencies = [
 "bitflags 1.3.2",
 "gdk-pixbuf-sys",
 "gio",
 "glib",
 "libc",
]

[[package]]
name = "gdk-pixbuf-sys"
version = "0.15.10"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "140b2f5378256527150350a8346dbdb08fadc13453a7a2d73aecd5fab3c402a7"
dependencies = [
 "gio-sys",
 "glib-sys",
 "gobject-sys",
 "libc",
 "system-deps 6.2.2",
]

[[package]]
name = "gdk-sys"
version = "0.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32e7a08c1e8f06f4177fb7e51a777b8c1689f743a7bc11ea91d44d2226073a88"
dependencies = [
 "cairo-sys-rs",
 "gdk-pixbuf-sys",
 "gio-sys",
 "glib-sys",
 "gobject-sys",
 "libc",
 "pango-sys",
 "pkg-config",
 "system-deps 6.2.2",
]

[[package]]
name = "gdkwayland-sys"
version = "0.15.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cca49a59ad8cfdf36ef7330fe7bdfbe1d34323220cc16a0de2679ee773aee2c2"
dependencies = [
 "gdk-sys",
 "glib-sys",
 "gobject-sys",
 "libc",
 "pkg-config",
 "system-deps 6.2.2",
]

[[package]]
name = "gdkx11-sys"
version = "0.15.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b4b7f8c7a84b407aa9b143877e267e848ff34106578b64d1e0a24bf550716178"
dependencies = [
 "gdk-sys",
 "glib-sys",
 "libc",
 "system-deps 6.2.2",
 "x11",
]

[[package]]
name = "generator"
version = "0.7.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5cc16584ff22b460a382b7feec54b23d2908d858152e5739a120b949293bd74e"
dependencies = [
 "cc",
 "libc",
 "log",
 "rustversion",
 "windows 0.48.0",
]

[[package]]
name = "generic-array"
version = "0.14.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a"
dependencies = [
 "typenum",
 "version_check",
]

[[package]]
name = "getrandom"
version = "0.1.16"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce"
dependencies = [
 "cfg-if",
 "libc",
 "wasi 0.9.0+wasi-snapshot-preview1",
]

[[package]]
name = "getrandom"
version = "0.2.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94b22e06ecb0110981051723910cbf0b5f5e09a2062dd7663334ee79a9d1286c"
dependencies = [
 "cfg-if",
 "libc",
 "wasi 0.11.0+wasi-snapshot-preview1",
]

[[package]]
name = "gimli"
version = "0.28.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253"

[[package]]
name = "gio"
version = "0.15.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "68fdbc90312d462781a395f7a16d96a2b379bb6ef8cd6310a2df272771c4283b"
dependencies = [
 "bitflags 1.3.2",
 "futures-channel",
 "futures-core",
 "futures-io",
 "gio-sys",
 "glib",
 "libc",
 "once_cell",
 "thiserror",
]

[[package]]
name = "gio-sys"
version = "0.15.10"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "32157a475271e2c4a023382e9cab31c4584ee30a97da41d3c4e9fdd605abcf8d"
dependencies = [
 "glib-sys",
 "gobject-sys",
 "libc",
 "system-deps 6.2.2",
 "winapi",
]

[[package]]
name = "glib"
version = "0.15.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "edb0306fbad0ab5428b0ca674a23893db909a98582969c9b537be4ced78c505d"
dependencies = [
 "bitflags 1.3.2",
 "futures-channel",
 "futures-core",
 "futures-executor",
 "futures-task",
 "glib-macros",
 "glib-sys",
 "gobject-sys",
 "libc",
 "once_cell",
 "smallvec",
 "thiserror",
]

[[package]]
name = "glib-macros"
version = "0.15.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "10c6ae9f6fa26f4fb2ac16b528d138d971ead56141de489f8111e259b9df3c4a"
dependencies = [
 "anyhow",
 "heck 0.4.1",
 "proc-macro-crate",
 "proc-macro-error",
 "proc-macro2",
 "quote",
 "syn 1.0.109",
]

[[package]]
name = "glib-sys"
version = "0.15.10"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ef4b192f8e65e9cf76cbf4ea71fa8e3be4a0e18ffe3d68b8da6836974cc5bad4"
dependencies = [
 "libc",
 "system-deps 6.2.2",
]

[[package]]
name = "glob"
version = "0.3.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b"

[[package]]
name = "globset"
version = "0.4.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "57da3b9b5b85bd66f31093f8c408b90a74431672542466497dcbdfdc02034be1"
dependencies = [
 "aho-corasick",
 "bstr",
 "log",
 "regex-automata 0.4.6",
 "regex-syntax 0.8.3",
]

[[package]]
name = "gobject-sys"
version = "0.15.10"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0d57ce44246becd17153bd035ab4d32cfee096a657fc01f2231c9278378d1e0a"
dependencies = [
 "glib-sys",
 "libc",
 "system-deps 6.2.2",
]

[[package]]
name = "gtk"
version = "0.15.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "92e3004a2d5d6d8b5057d2b57b3712c9529b62e82c77f25c1fecde1fd5c23bd0"
dependencies = [
 "atk",
 "bitflags 1.3.2",
 "cairo-rs",
 "field-offset",
 "futures-channel",
 "gdk",
 "gdk-pixbuf",
 "gio",
 "glib",
 "gtk-sys",
 "gtk3-macros",
 "libc",
 "once_cell",
 "pango",
 "pkg-config",
]

[[package]]
name = "gtk-sys"
version = "0.15.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d5bc2f0587cba247f60246a0ca11fe25fb733eabc3de12d1965fc07efab87c84"
dependencies = [
 "atk-sys",
 "cairo-sys-rs",
 "gdk-pixbuf-sys",
 "gdk-sys",
 "gio-sys",
 "glib-sys",
 "gobject-sys",
 "libc",
 "pango-sys",
 "system-deps 6.2.2",
]

[[package]]
name = "gtk3-macros"
version = "0.15.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "684c0456c086e8e7e9af73ec5b84e35938df394712054550e81558d21c44ab0d"
dependencies = [
 "anyhow",
 "proc-macro-crate",
 "proc-macro-error",
 "proc-macro2",
 "quote",
 "syn 1.0.109",
]

[[package]]
name = "hashbrown"
version = "0.12.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888"

[[package]]
name = "hashbrown"
version = "0.14.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1"

[[package]]
name = "heck"
version = "0.3.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c"
dependencies = [
 "unicode-segmentation",
]

[[package]]
name = "heck"
version = "0.4.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8"

[[package]]
name = "heck"
version = "0.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea"

[[package]]
name = "hermit-abi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024"

[[package]]
name = "hex"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"

[[package]]
name = "home"
version = "0.5.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5"
dependencies = [
 "windows-sys 0.52.0",
]

[[package]]
name = "html5ever"
version = "0.26.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bea68cab48b8459f17cf1c944c67ddc572d272d9f2b274140f223ecb1da4a3b7"
dependencies = [
 "log",
 "mac",
 "markup5ever",
 "proc-macro2",
 "quote",
 "syn 1.0.109",
]

[[package]]
name = "http"
version = "0.2.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1"
dependencies = [
 "bytes",
 "fnv",
 "itoa 1.0.11",
]

[[package]]
name = "http"
version = "1.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "21b9ddb458710bc376481b842f5da65cdf31522de232c1ca8146abce2a358258"
dependencies = [
 "bytes",
 "fnv",
 "itoa 1.0.11",
]

[[package]]
name = "http-range"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "21dec9db110f5f872ed9699c3ecf50cf16f423502706ba5c72462e28d3157573"

[[package]]
name = "httparse"
version = "1.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fcc0b4a115bf80b728eb8ea024ad5bd707b615bfed49e0665b6e0f86fd082d9"

[[package]]
name = "iana-time-zone"
version = "0.1.60"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141"
dependencies = [
 "android_system_properties",
 "core-foundation-sys",
 "iana-time-zone-haiku",
 "js-sys",
 "wasm-bindgen",
 "windows-core 0.52.0",
]

[[package]]
name = "iana-time-zone-haiku"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
dependencies = [
 "cc",
]

[[package]]
name = "ico"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e3804960be0bb5e4edb1e1ad67afd321a9ecfd875c3e65c099468fd2717d7cae"
dependencies = [
 "byteorder",
 "png",
]

[[package]]
name = "ident_case"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"

[[package]]
name = "idna"
version = "0.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6"
dependencies = [
 "unicode-bidi",
 "unicode-normalization",
]

[[package]]
name = "ignore"
version = "0.4.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b46810df39e66e925525d6e38ce1e7f6e1d208f72dc39757880fcb66e2c58af1"
dependencies = [
 "crossbeam-deque",
 "globset",
 "log",
 "memchr",
 "regex-automata 0.4.6",
 "same-file",
 "walkdir",
 "winapi-util",
]

[[package]]
name = "image"
version = "0.24.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5690139d2f55868e080017335e4b94cb7414274c74f1669c84fb5feba2c9f69d"
dependencies = [
 "bytemuck",
 "byteorder",
 "color_quant",
 "num-traits",
]

[[package]]
name = "indexmap"
version = "1.9.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99"
dependencies = [
 "autocfg",
 "hashbrown 0.12.3",
 "serde",
]

[[package]]
name = "indexmap"
version = "2.2.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26"
dependencies = [
 "equivalent",
 "hashbrown 0.14.5",
 "serde",
]

[[package]]
name = "infer"
version = "0.13.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f551f8c3a39f68f986517db0d1759de85881894fdc7db798bd2a9df9cb04b7fc"
dependencies = [
 "cfb",
]

[[package]]
name = "instant"
version = "0.1.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c"
dependencies = [
 "cfg-if",
]

[[package]]
name = "is_elevated"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5299060ff5db63e788015dcb9525ad9b84f4fd9717ed2cbdeba5018cbf42f9b5"
dependencies = [
 "winapi",
]

[[package]]
name = "itoa"
version = "0.4.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b71991ff56294aa922b450139ee08b3bfc70982c6b2c7562771375cf73542dd4"

[[package]]
name = "itoa"
version = "1.0.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b"

[[package]]
name = "javascriptcore-rs"
version = "0.16.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bf053e7843f2812ff03ef5afe34bb9c06ffee120385caad4f6b9967fcd37d41c"
dependencies = [
 "bitflags 1.3.2",
 "glib",
 "javascriptcore-rs-sys",
]

[[package]]
name = "javascriptcore-rs-sys"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "905fbb87419c5cde6e3269537e4ea7d46431f3008c5d057e915ef3f115e7793c"
dependencies = [
 "glib-sys",
 "gobject-sys",
 "libc",
 "system-deps 5.0.0",
]

[[package]]
name = "jni"
version = "0.20.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "039022cdf4d7b1cf548d31f60ae783138e5fd42013f6271049d7df7afadef96c"
dependencies = [
 "cesu8",
 "combine",
 "jni-sys",
 "log",
 "thiserror",
 "walkdir",
]

[[package]]
name = "jni-sys"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130"

[[package]]
name = "js-sys"
version = "0.3.69"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d"
dependencies = [
 "wasm-bindgen",
]

[[package]]
name = "json-patch"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "55ff1e1486799e3f64129f8ccad108b38290df9cd7015cd31bed17239f0789d6"
dependencies = [
 "serde",
 "serde_json",
 "thiserror",
 "treediff",
]

[[package]]
name = "kuchikiki"
version = "0.8.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f29e4755b7b995046f510a7520c42b2fed58b77bd94d5a87a8eb43d2fd126da8"
dependencies = [
 "cssparser",
 "html5ever",
 "indexmap 1.9.3",
 "matches",
 "selectors",
]

[[package]]
name = "lazy_static"
version = "1.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"

[[package]]
name = "libappindicator"
version = "0.7.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "db2d3cb96d092b4824cb306c9e544c856a4cb6210c1081945187f7f1924b47e8"
dependencies = [
 "glib",
 "gtk",
 "gtk-sys",
 "libappindicator-sys",
 "log",
]

[[package]]
name = "libappindicator-sys"
version = "0.7.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f1b3b6681973cea8cc3bce7391e6d7d5502720b80a581c9a95c9cbaf592826aa"
dependencies = [
 "gtk-sys",
 "libloading",
 "once_cell",
]

[[package]]
name = "libc"
version = "0.2.154"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ae743338b92ff9146ce83992f766a31066a91a8c84a45e0e9f21e7cf6de6d346"

[[package]]
name = "libloading"
version = "0.7.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f"
dependencies = [
 "cfg-if",
 "winapi",
]

[[package]]
name = "libredox"
version = "0.1.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d"
dependencies = [
 "bitflags 2.5.0",
 "libc",
]

[[package]]
name = "line-wrap"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dd1bc4d24ad230d21fb898d1116b1801d7adfc449d42026475862ab48b11e70e"

[[package]]
name = "linux-raw-sys"
version = "0.4.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "01cda141df6706de531b6c46c3a33ecca755538219bd484262fa09410c13539c"

[[package]]
name = "lock_api"
version = "0.4.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17"
dependencies = [
 "autocfg",
 "scopeguard",
]

[[package]]
name = "log"
version = "0.4.21"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c"

[[package]]
name = "loom"
version = "0.5.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ff50ecb28bb86013e935fb6683ab1f6d3a20016f123c76fd4c27470076ac30f5"
dependencies = [
 "cfg-if",
 "generator",
 "scoped-tls",
 "serde",
 "serde_json",
 "tracing",
 "tracing-subscriber",
]

[[package]]
name = "mac"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4"

[[package]]
name = "malloc_buf"
version = "0.0.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb"
dependencies = [
 "libc",
]

[[package]]
name = "markup5ever"
version = "0.11.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7a2629bb1404f3d34c2e921f21fd34ba00b206124c81f65c50b43b6aaefeb016"
dependencies = [
 "log",
 "phf 0.10.1",
 "phf_codegen 0.10.0",
 "string_cache",
 "string_cache_codegen",
 "tendril",
]

[[package]]
name = "matchers"
version = "0.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558"
dependencies = [
 "regex-automata 0.1.10",
]

[[package]]
name = "matches"
version = "0.1.10"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2532096657941c2fea9c289d370a250971c689d4f143798ff67113ec042024a5"

[[package]]
name = "memchr"
version = "2.7.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6c8640c5d730cb13ebd907d8d04b52f55ac9a2eec55b440c8892f40d56c76c1d"

[[package]]
name = "memoffset"
version = "0.9.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "488016bfae457b036d996092f6cb448677611ce4449e970ceaf42695203f218a"
dependencies = [
 "autocfg",
]

[[package]]
name = "miniz_oxide"
version = "0.7.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9d811f3e15f28568be3407c8e7fdb6514c1cda3cb30683f15b6a1a1dc4ea14a7"
dependencies = [
 "adler",
 "simd-adler32",
]

[[package]]
name = "named-lock"
version = "0.4.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "988ce9f7411c058a1d6788e60897a949dcdf5aa66202d789da045a03b4e4f406"
dependencies = [
 "libc",
 "once_cell",
 "parking_lot",
 "thiserror",
 "windows 0.53.0",
]

[[package]]
name = "native-tls"
version = "0.2.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a8614eb2c83d59d1c8cc974dd3f920198647674a0a035e1af1fa58707e317466"
dependencies = [
 "libc",
 "log",
 "openssl",
 "openssl-probe",
 "openssl-sys",
 "schannel",
 "security-framework",
 "security-framework-sys",
 "tempfile",
]

[[package]]
name = "ndk"
version = "0.6.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2032c77e030ddee34a6787a64166008da93f6a352b629261d0fee232b8742dd4"
dependencies = [
 "bitflags 1.3.2",
 "jni-sys",
 "ndk-sys",
 "num_enum",
 "thiserror",
]

[[package]]
name = "ndk-context"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "27b02d87554356db9e9a873add8782d4ea6e3e58ea071a9adb9a2e8ddb884a8b"

[[package]]
name = "ndk-sys"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6e5a6ae77c8ee183dcbbba6150e2e6b9f3f4196a7666c02a715a95692ec1fa97"
dependencies = [
 "jni-sys",
]

[[package]]
name = "new_debug_unreachable"
version = "1.0.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "650eef8c711430f1a879fdd01d4745a7deea475becfb90269c06775983bbf086"

[[package]]
name = "nodrop"
version = "0.1.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb"

[[package]]
name = "ntapi"
version = "0.4.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e8a3895c6391c39d7fe7ebc444a87eb2991b2a0bc718fdabd071eec617fc68e4"
dependencies = [
 "winapi",
]

[[package]]
name = "nu-ansi-term"
version = "0.46.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
dependencies = [
 "overload",
 "winapi",
]

[[package]]
name = "num-conv"
version = "0.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9"

[[package]]
name = "num-traits"
version = "0.2.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "da0df0e5185db44f69b44f26786fe401b6c293d1907744beaa7fa62b2e5a517a"
dependencies = [
 "autocfg",
]

[[package]]
name = "num_cpus"
version = "1.16.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43"
dependencies = [
 "hermit-abi",
 "libc",
]

[[package]]
name = "num_enum"
version = "0.5.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1f646caf906c20226733ed5b1374287eb97e3c2a5c227ce668c1f2ce20ae57c9"
dependencies = [
 "num_enum_derive",
]

[[package]]
name = "num_enum_derive"
version = "0.5.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dcbff9bc912032c62bf65ef1d5aea88983b420f4f839db1e9b0c281a25c9c799"
dependencies = [
 "proc-macro-crate",
 "proc-macro2",
 "quote",
 "syn 1.0.109",
]

[[package]]
name = "objc"
version = "0.2.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1"
dependencies = [
 "malloc_buf",
 "objc_exception",
]

[[package]]
name = "objc-foundation"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1add1b659e36c9607c7aab864a76c7a4c2760cd0cd2e120f3fb8b952c7e22bf9"
dependencies = [
 "block",
 "objc",
 "objc_id",
]

[[package]]
name = "objc_exception"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4"
dependencies = [
 "cc",
]

[[package]]
name = "objc_id"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c92d4ddb4bd7b50d730c215ff871754d0da6b2178849f8a2a2ab69712d0c073b"
dependencies = [
 "objc",
]

[[package]]
name = "object"
version = "0.32.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441"
dependencies = [
 "memchr",
]

[[package]]
name = "once_cell"
version = "1.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92"

[[package]]
name = "open"
version = "3.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2078c0039e6a54a0c42c28faa984e115fb4c2d5bf2208f77d1961002df8576f8"
dependencies = [
 "pathdiff",
 "windows-sys 0.42.0",
]

[[package]]
name = "openssl"
version = "0.10.66"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9529f4786b70a3e8c61e11179af17ab6188ad8d0ded78c5529441ed39d4bd9c1"
dependencies = [
 "bitflags 2.5.0",
 "cfg-if",
 "foreign-types",
 "libc",
 "once_cell",
 "openssl-macros",
 "openssl-sys",
]

[[package]]
name = "openssl-macros"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "openssl-probe"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf"

[[package]]
name = "openssl-sys"
version = "0.9.103"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7f9e8deee91df40a943c71b917e5874b951d32a802526c85721ce3b776c929d6"
dependencies = [
 "cc",
 "libc",
 "pkg-config",
 "vcpkg",
]

[[package]]
name = "overload"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"

[[package]]
name = "pango"
version = "0.15.10"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "22e4045548659aee5313bde6c582b0d83a627b7904dd20dc2d9ef0895d414e4f"
dependencies = [
 "bitflags 1.3.2",
 "glib",
 "libc",
 "once_cell",
 "pango-sys",
]

[[package]]
name = "pango-sys"
version = "0.15.10"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d2a00081cde4661982ed91d80ef437c20eacaf6aa1a5962c0279ae194662c3aa"
dependencies = [
 "glib-sys",
 "gobject-sys",
 "libc",
 "system-deps 6.2.2",
]

[[package]]
name = "parking_lot"
version = "0.12.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7e4af0ca4f6caed20e900d564c242b8e5d4903fdacf31d3daf527b66fe6f42fb"
dependencies = [
 "lock_api",
 "parking_lot_core",
]

[[package]]
name = "parking_lot_core"
version = "0.9.10"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8"
dependencies = [
 "cfg-if",
 "libc",
 "redox_syscall 0.5.1",
 "smallvec",
 "windows-targets 0.52.5",
]

[[package]]
name = "pathdiff"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8835116a5c179084a830efb3adc117ab007512b535bc1a21c991d3b32a6b44dd"

[[package]]
name = "pengu-loader"
version = "1.2.0"
dependencies = [
 "auto-launch",
 "base64 0.22.0",
 "is_elevated",
 "libc",
 "named-lock",
 "native-tls",
 "objc",
 "runas",
 "serde",
 "serde_json",
 "sysinfo",
 "tauri",
 "tauri-build",
 "tungstenite",
 "winreg 0.52.0",
]

[[package]]
name = "percent-encoding"
version = "2.3.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e"

[[package]]
name = "phf"
version = "0.8.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3dfb61232e34fcb633f43d12c58f83c1df82962dcdfa565a4e866ffc17dafe12"
dependencies = [
 "phf_macros 0.8.0",
 "phf_shared 0.8.0",
 "proc-macro-hack",
]

[[package]]
name = "phf"
version = "0.10.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fabbf1ead8a5bcbc20f5f8b939ee3f5b0f6f281b6ad3468b84656b658b455259"
dependencies = [
 "phf_shared 0.10.0",
]

[[package]]
name = "phf"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ade2d8b8f33c7333b51bcf0428d37e217e9f32192ae4772156f65063b8ce03dc"
dependencies = [
 "phf_macros 0.11.2",
 "phf_shared 0.11.2",
]

[[package]]
name = "phf_codegen"
version = "0.8.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cbffee61585b0411840d3ece935cce9cb6321f01c45477d30066498cd5e1a815"
dependencies = [
 "phf_generator 0.8.0",
 "phf_shared 0.8.0",
]

[[package]]
name = "phf_codegen"
version = "0.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4fb1c3a8bc4dd4e5cfce29b44ffc14bedd2ee294559a294e2a4d4c9e9a6a13cd"
dependencies = [
 "phf_generator 0.10.0",
 "phf_shared 0.10.0",
]

[[package]]
name = "phf_generator"
version = "0.8.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "17367f0cc86f2d25802b2c26ee58a7b23faeccf78a396094c13dced0d0182526"
dependencies = [
 "phf_shared 0.8.0",
 "rand 0.7.3",
]

[[package]]
name = "phf_generator"
version = "0.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5d5285893bb5eb82e6aaf5d59ee909a06a16737a8970984dd7746ba9283498d6"
dependencies = [
 "phf_shared 0.10.0",
 "rand 0.8.5",
]

[[package]]
name = "phf_generator"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "48e4cc64c2ad9ebe670cb8fd69dd50ae301650392e81c05f9bfcb2d5bdbc24b0"
dependencies = [
 "phf_shared 0.11.2",
 "rand 0.8.5",
]

[[package]]
name = "phf_macros"
version = "0.8.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7f6fde18ff429ffc8fe78e2bf7f8b7a5a5a6e2a8b58bc5a9ac69198bbda9189c"
dependencies = [
 "phf_generator 0.8.0",
 "phf_shared 0.8.0",
 "proc-macro-hack",
 "proc-macro2",
 "quote",
 "syn 1.0.109",
]

[[package]]
name = "phf_macros"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3444646e286606587e49f3bcf1679b8cef1dc2c5ecc29ddacaffc305180d464b"
dependencies = [
 "phf_generator 0.11.2",
 "phf_shared 0.11.2",
 "proc-macro2",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "phf_shared"
version = "0.8.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c00cf8b9eafe68dde5e9eaa2cef8ee84a9336a47d566ec55ca16589633b65af7"
dependencies = [
 "siphasher",
]

[[package]]
name = "phf_shared"
version = "0.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b6796ad771acdc0123d2a88dc428b5e38ef24456743ddb1744ed628f9815c096"
dependencies = [
 "siphasher",
]

[[package]]
name = "phf_shared"
version = "0.11.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "90fcb95eef784c2ac79119d1dd819e162b5da872ce6f3c3abe1e8ca1c082f72b"
dependencies = [
 "siphasher",
]

[[package]]
name = "pin-project-lite"
version = "0.2.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02"

[[package]]
name = "pin-utils"
version = "0.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"

[[package]]
name = "pkg-config"
version = "0.3.30"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec"

[[package]]
name = "plist"
version = "1.6.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d9d34169e64b3c7a80c8621a48adaf44e0cf62c78a9b25dd9dd35f1881a17cf9"
dependencies = [
 "base64 0.21.7",
 "indexmap 2.2.6",
 "line-wrap",
 "quick-xml",
 "serde",
 "time",
]

[[package]]
name = "png"
version = "0.17.13"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "06e4b0d3d1312775e782c86c91a111aa1f910cbb65e1337f9975b5f9a554b5e1"
dependencies = [
 "bitflags 1.3.2",
 "crc32fast",
 "fdeflate",
 "flate2",
 "miniz_oxide",
]

[[package]]
name = "powerfmt"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391"

[[package]]
name = "ppv-lite86"
version = "0.2.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"

[[package]]
name = "precomputed-hash"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c"

[[package]]
name = "proc-macro-crate"
version = "1.3.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919"
dependencies = [
 "once_cell",
 "toml_edit 0.19.15",
]

[[package]]
name = "proc-macro-error"
version = "1.0.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c"
dependencies = [
 "proc-macro-error-attr",
 "proc-macro2",
 "quote",
 "syn 1.0.109",
 "version_check",
]

[[package]]
name = "proc-macro-error-attr"
version = "1.0.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869"
dependencies = [
 "proc-macro2",
 "quote",
 "version_check",
]

[[package]]
name = "proc-macro-hack"
version = "0.5.20+deprecated"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc375e1527247fe1a97d8b7156678dfe7c1af2fc075c9a4db3690ecd2a148068"

[[package]]
name = "proc-macro2"
version = "1.0.81"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3d1597b0c024618f09a9c3b8655b7e430397a36d23fdafec26d6965e9eec3eba"
dependencies = [
 "unicode-ident",
]

[[package]]
name = "quick-xml"
version = "0.31.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1004a344b30a54e2ee58d66a71b32d2db2feb0a31f9a2d302bf0536f15de2a33"
dependencies = [
 "memchr",
]

[[package]]
name = "quote"
version = "1.0.36"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7"
dependencies = [
 "proc-macro2",
]

[[package]]
name = "rand"
version = "0.7.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03"
dependencies = [
 "getrandom 0.1.16",
 "libc",
 "rand_chacha 0.2.2",
 "rand_core 0.5.1",
 "rand_hc",
 "rand_pcg",
]

[[package]]
name = "rand"
version = "0.8.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"
dependencies = [
 "libc",
 "rand_chacha 0.3.1",
 "rand_core 0.6.4",
]

[[package]]
name = "rand_chacha"
version = "0.2.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402"
dependencies = [
 "ppv-lite86",
 "rand_core 0.5.1",
]

[[package]]
name = "rand_chacha"
version = "0.3.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"
dependencies = [
 "ppv-lite86",
 "rand_core 0.6.4",
]

[[package]]
name = "rand_core"
version = "0.5.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19"
dependencies = [
 "getrandom 0.1.16",
]

[[package]]
name = "rand_core"
version = "0.6.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"
dependencies = [
 "getrandom 0.2.14",
]

[[package]]
name = "rand_hc"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c"
dependencies = [
 "rand_core 0.5.1",
]

[[package]]
name = "rand_pcg"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "16abd0c1b639e9eb4d7c50c0b8100b0d0f849be2349829c740fe8e6eb4816429"
dependencies = [
 "rand_core 0.5.1",
]

[[package]]
name = "raw-window-handle"
version = "0.5.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f2ff9a1f06a88b01621b7ae906ef0211290d1c8a168a15542486a8f61c0833b9"

[[package]]
name = "redox_syscall"
version = "0.4.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa"
dependencies = [
 "bitflags 1.3.2",
]

[[package]]
name = "redox_syscall"
version = "0.5.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "469052894dcb553421e483e4209ee581a45100d31b4018de03e5a7ad86374a7e"
dependencies = [
 "bitflags 2.5.0",
]

[[package]]
name = "redox_users"
version = "0.4.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bd283d9651eeda4b2a83a43c1c91b266c40fd76ecd39a50a8c630ae69dc72891"
dependencies = [
 "getrandom 0.2.14",
 "libredox",
 "thiserror",
]

[[package]]
name = "regex"
version = "1.10.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-automata 0.4.6",
 "regex-syntax 0.8.3",
]

[[package]]
name = "regex-automata"
version = "0.1.10"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132"
dependencies = [
 "regex-syntax 0.6.29",
]

[[package]]
name = "regex-automata"
version = "0.4.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea"
dependencies = [
 "aho-corasick",
 "memchr",
 "regex-syntax 0.8.3",
]

[[package]]
name = "regex-syntax"
version = "0.6.29"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1"

[[package]]
name = "regex-syntax"
version = "0.8.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56"

[[package]]
name = "rfd"
version = "0.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0149778bd99b6959285b0933288206090c50e2327f47a9c463bfdbf45c8823ea"
dependencies = [
 "block",
 "dispatch",
 "glib-sys",
 "gobject-sys",
 "gtk-sys",
 "js-sys",
 "lazy_static",
 "log",
 "objc",
 "objc-foundation",
 "objc_id",
 "raw-window-handle",
 "wasm-bindgen",
 "wasm-bindgen-futures",
 "web-sys",
 "windows 0.37.0",
]

[[package]]
name = "runas"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b96d6b6c505282b007a9b009f2aa38b2fd0359b81a0430ceacc60f69ade4c6a0"
dependencies = [
 "libc",
 "security-framework-sys",
 "which",
 "windows-sys 0.48.0",
]

[[package]]
name = "rustc-demangle"
version = "0.1.23"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76"

[[package]]
name = "rustc_version"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366"
dependencies = [
 "semver",
]

[[package]]
name = "rustix"
version = "0.38.34"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f"
dependencies = [
 "bitflags 2.5.0",
 "errno",
 "libc",
 "linux-raw-sys",
 "windows-sys 0.52.0",
]

[[package]]
name = "rustversion"
version = "1.0.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "80af6f9131f277a45a3fba6ce8e2258037bb0477a67e610d3c1fe046ab31de47"

[[package]]
name = "ryu"
version = "1.0.17"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e86697c916019a8588c99b5fac3cead74ec0b4b819707a682fd4d23fa0ce1ba1"

[[package]]
name = "same-file"
version = "1.0.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"
dependencies = [
 "winapi-util",
]

[[package]]
name = "schannel"
version = "0.1.23"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "fbc91545643bcf3a0bbb6569265615222618bdf33ce4ffbbd13c4bbd4c093534"
dependencies = [
 "windows-sys 0.52.0",
]

[[package]]
name = "scoped-tls"
version = "1.0.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294"

[[package]]
name = "scopeguard"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"

[[package]]
name = "security-framework"
version = "2.11.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c627723fd09706bacdb5cf41499e95098555af3c3c29d014dc3c458ef6be11c0"
dependencies = [
 "bitflags 2.5.0",
 "core-foundation",
 "core-foundation-sys",
 "libc",
 "security-framework-sys",
]

[[package]]
name = "security-framework-sys"
version = "2.11.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "317936bbbd05227752583946b9e66d7ce3b489f84e11a94a510b4437fef407d7"
dependencies = [
 "core-foundation-sys",
 "libc",
]

[[package]]
name = "selectors"
version = "0.22.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "df320f1889ac4ba6bc0cdc9c9af7af4bd64bb927bccdf32d81140dc1f9be12fe"
dependencies = [
 "bitflags 1.3.2",
 "cssparser",
 "derive_more",
 "fxhash",
 "log",
 "matches",
 "phf 0.8.0",
 "phf_codegen 0.8.0",
 "precomputed-hash",
 "servo_arc",
 "smallvec",
 "thin-slice",
]

[[package]]
name = "semver"
version = "1.0.22"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "92d43fe69e652f3df9bdc2b85b2854a0825b86e4fb76bc44d945137d053639ca"
dependencies = [
 "serde",
]

[[package]]
name = "serde"
version = "1.0.199"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0c9f6e76df036c77cd94996771fb40db98187f096dd0b9af39c6c6e452ba966a"
dependencies = [
 "serde_derive",
]

[[package]]
name = "serde_derive"
version = "1.0.199"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "11bd257a6541e141e42ca6d24ae26f7714887b47e89aa739099104c7e4d3b7fc"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "serde_json"
version = "1.0.116"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3e17db7126d17feb94eb3fad46bf1a96b034e8aacbc2e775fe81505f8b0b2813"
dependencies = [
 "indexmap 2.2.6",
 "itoa 1.0.11",
 "ryu",
 "serde",
]

[[package]]
name = "serde_repr"
version = "0.1.19"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6c64451ba24fc7a6a2d60fc75dd9c83c90903b19028d4eff35e88fc1e86564e9"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "serde_spanned"
version = "0.6.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "eb3622f419d1296904700073ea6cc23ad690adbd66f13ea683df73298736f0c1"
dependencies = [
 "serde",
]

[[package]]
name = "serde_with"
version = "3.8.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0ad483d2ab0149d5a5ebcd9972a3852711e0153d863bf5a5d0391d28883c4a20"
dependencies = [
 "base64 0.22.0",
 "chrono",
 "hex",
 "indexmap 1.9.3",
 "indexmap 2.2.6",
 "serde",
 "serde_derive",
 "serde_json",
 "serde_with_macros",
 "time",
]

[[package]]
name = "serde_with_macros"
version = "3.8.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "65569b702f41443e8bc8bbb1c5779bd0450bbe723b56198980e80ec45780bce2"
dependencies = [
 "darling",
 "proc-macro2",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "serialize-to-javascript"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c9823f2d3b6a81d98228151fdeaf848206a7855a7a042bbf9bf870449a66cafb"
dependencies = [
 "serde",
 "serde_json",
 "serialize-to-javascript-impl",
]

[[package]]
name = "serialize-to-javascript-impl"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "74064874e9f6a15f04c1f3cb627902d0e6b410abbf36668afa873c61889f1763"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 1.0.109",
]

[[package]]
name = "servo_arc"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d98238b800e0d1576d8b6e3de32827c2d74bee68bb97748dcf5071fb53965432"
dependencies = [
 "nodrop",
 "stable_deref_trait",
]

[[package]]
name = "sha1"
version = "0.10.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba"
dependencies = [
 "cfg-if",
 "cpufeatures",
 "digest",
]

[[package]]
name = "sha2"
version = "0.10.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8"
dependencies = [
 "cfg-if",
 "cpufeatures",
 "digest",
]

[[package]]
name = "sharded-slab"
version = "0.1.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
dependencies = [
 "lazy_static",
]

[[package]]
name = "simd-adler32"
version = "0.3.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe"

[[package]]
name = "siphasher"
version = "0.3.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d"

[[package]]
name = "slab"
version = "0.4.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67"
dependencies = [
 "autocfg",
]

[[package]]
name = "smallvec"
version = "1.13.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67"

[[package]]
name = "soup2"
version = "0.2.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b2b4d76501d8ba387cf0fefbe055c3e0a59891d09f0f995ae4e4b16f6b60f3c0"
dependencies = [
 "bitflags 1.3.2",
 "gio",
 "glib",
 "libc",
 "once_cell",
 "soup2-sys",
]

[[package]]
name = "soup2-sys"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "009ef427103fcb17f802871647a7fa6c60cbb654b4c4e4c0ac60a31c5f6dc9cf"
dependencies = [
 "bitflags 1.3.2",
 "gio-sys",
 "glib-sys",
 "gobject-sys",
 "libc",
 "system-deps 5.0.0",
]

[[package]]
name = "stable_deref_trait"
version = "1.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3"

[[package]]
name = "state"
version = "0.5.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dbe866e1e51e8260c9eed836a042a5e7f6726bb2b411dffeaa712e19c388f23b"
dependencies = [
 "loom",
]

[[package]]
name = "string_cache"
version = "0.8.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f91138e76242f575eb1d3b38b4f1362f10d3a43f47d182a5b359af488a02293b"
dependencies = [
 "new_debug_unreachable",
 "once_cell",
 "parking_lot",
 "phf_shared 0.10.0",
 "precomputed-hash",
 "serde",
]

[[package]]
name = "string_cache_codegen"
version = "0.5.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6bb30289b722be4ff74a408c3cc27edeaad656e06cb1fe8fa9231fa59c728988"
dependencies = [
 "phf_generator 0.10.0",
 "phf_shared 0.10.0",
 "proc-macro2",
 "quote",
]

[[package]]
name = "strsim"
version = "0.10.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"

[[package]]
name = "syn"
version = "1.0.109"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "syn"
version = "2.0.60"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "909518bc7b1c9b779f1bbf07f2929d35af9f0f37e47c6e9ef7f9dddc1e1821f3"
dependencies = [
 "proc-macro2",
 "quote",
 "unicode-ident",
]

[[package]]
name = "sysinfo"
version = "0.31.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d4115055da5f572fff541dd0c4e61b0262977f453cc9fe04be83aba25a89bdab"
dependencies = [
 "core-foundation-sys",
 "libc",
 "memchr",
 "ntapi",
 "windows 0.57.0",
]

[[package]]
name = "system-deps"
version = "5.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "18db855554db7bd0e73e06cf7ba3df39f97812cb11d3f75e71c39bf45171797e"
dependencies = [
 "cfg-expr 0.9.1",
 "heck 0.3.3",
 "pkg-config",
 "toml 0.5.11",
 "version-compare 0.0.11",
]

[[package]]
name = "system-deps"
version = "6.2.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a3e535eb8dded36d55ec13eddacd30dec501792ff23a0b1682c38601b8cf2349"
dependencies = [
 "cfg-expr 0.15.8",
 "heck 0.5.0",
 "pkg-config",
 "toml 0.8.12",
 "version-compare 0.2.0",
]

[[package]]
name = "tao"
version = "0.16.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "575c856fc21e551074869dcfaad8f706412bd5b803dfa0fbf6881c4ff4bfafab"
dependencies = [
 "bitflags 1.3.2",
 "cairo-rs",
 "cc",
 "cocoa",
 "core-foundation",
 "core-graphics",
 "crossbeam-channel",
 "dirs-next",
 "dispatch",
 "gdk",
 "gdk-pixbuf",
 "gdk-sys",
 "gdkwayland-sys",
 "gdkx11-sys",
 "gio",
 "glib",
 "glib-sys",
 "gtk",
 "image",
 "instant",
 "jni",
 "lazy_static",
 "libappindicator",
 "libc",
 "log",
 "ndk",
 "ndk-context",
 "ndk-sys",
 "objc",
 "once_cell",
 "parking_lot",
 "png",
 "raw-window-handle",
 "scopeguard",
 "serde",
 "tao-macros",
 "unicode-segmentation",
 "uuid",
 "windows 0.39.0",
 "windows-implement 0.39.0",
 "x11-dl",
]

[[package]]
name = "tao-macros"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ec114582505d158b669b136e6851f85840c109819d77c42bb7c0709f727d18c2"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 1.0.109",
]

[[package]]
name = "tar"
version = "0.4.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b16afcea1f22891c49a00c751c7b63b2233284064f11a200fc624137c51e2ddb"
dependencies = [
 "filetime",
 "libc",
 "xattr",
]

[[package]]
name = "target-lexicon"
version = "0.12.14"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e1fc403891a21bcfb7c37834ba66a547a8f402146eba7265b5a6d88059c9ff2f"

[[package]]
name = "tauri"
version = "1.6.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "047aefcc7721bfb8024a9bc39d4719112262610502de7a224fa62c4570cd78d4"
dependencies = [
 "anyhow",
 "cocoa",
 "dirs-next",
 "dunce",
 "embed_plist",
 "encoding_rs",
 "flate2",
 "futures-util",
 "glib",
 "glob",
 "gtk",
 "heck 0.5.0",
 "http 0.2.12",
 "ignore",
 "objc",
 "once_cell",
 "open",
 "percent-encoding",
 "rand 0.8.5",
 "raw-window-handle",
 "regex",
 "rfd",
 "semver",
 "serde",
 "serde_json",
 "serde_repr",
 "serialize-to-javascript",
 "state",
 "tar",
 "tauri-macros",
 "tauri-runtime",
 "tauri-runtime-wry",
 "tauri-utils",
 "tempfile",
 "thiserror",
 "tokio",
 "url",
 "uuid",
 "webkit2gtk",
 "webview2-com",
 "windows 0.39.0",
]

[[package]]
name = "tauri-build"
version = "1.5.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e9914a4715e0b75d9f387a285c7e26b5bbfeb1249ad9f842675a82481565c532"
dependencies = [
 "anyhow",
 "cargo_toml",
 "dirs-next",
 "heck 0.4.1",
 "json-patch",
 "semver",
 "serde",
 "serde_json",
 "tauri-utils",
 "tauri-winres",
 "walkdir",
]

[[package]]
name = "tauri-codegen"
version = "1.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a1554c5857f65dbc377cefb6b97c8ac77b1cb2a90d30d3448114d5d6b48a77fc"
dependencies = [
 "base64 0.21.7",
 "brotli",
 "ico",
 "json-patch",
 "plist",
 "png",
 "proc-macro2",
 "quote",
 "regex",
 "semver",
 "serde",
 "serde_json",
 "sha2",
 "tauri-utils",
 "thiserror",
 "time",
 "uuid",
 "walkdir",
]

[[package]]
name = "tauri-macros"
version = "1.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "277abf361a3a6993ec16bcbb179de0d6518009b851090a01adfea12ac89fa875"
dependencies = [
 "heck 0.4.1",
 "proc-macro2",
 "quote",
 "syn 1.0.109",
 "tauri-codegen",
 "tauri-utils",
]

[[package]]
name = "tauri-runtime"
version = "0.14.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cf2d0652aa2891ff3e9caa2401405257ea29ab8372cce01f186a5825f1bd0e76"
dependencies = [
 "gtk",
 "http 0.2.12",
 "http-range",
 "rand 0.8.5",
 "raw-window-handle",
 "serde",
 "serde_json",
 "tauri-utils",
 "thiserror",
 "url",
 "uuid",
 "webview2-com",
 "windows 0.39.0",
]

[[package]]
name = "tauri-runtime-wry"
version = "0.14.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "067c56fc153b3caf406d7cd6de4486c80d1d66c0f414f39e94cb2f5543f6445f"
dependencies = [
 "cocoa",
 "gtk",
 "percent-encoding",
 "rand 0.8.5",
 "raw-window-handle",
 "tauri-runtime",
 "tauri-utils",
 "uuid",
 "webkit2gtk",
 "webview2-com",
 "windows 0.39.0",
 "wry",
]

[[package]]
name = "tauri-utils"
version = "1.5.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "75ad0bbb31fccd1f4c56275d0a5c3abdf1f59999f72cb4ef8b79b4ed42082a21"
dependencies = [
 "brotli",
 "ctor",
 "dunce",
 "glob",
 "heck 0.4.1",
 "html5ever",
 "infer",
 "json-patch",
 "kuchikiki",
 "log",
 "memchr",
 "phf 0.11.2",
 "proc-macro2",
 "quote",
 "semver",
 "serde",
 "serde_json",
 "serde_with",
 "thiserror",
 "url",
 "walkdir",
 "windows-version",
]

[[package]]
name = "tauri-winres"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5993dc129e544393574288923d1ec447c857f3f644187f4fbf7d9a875fbfc4fb"
dependencies = [
 "embed-resource",
 "toml 0.7.8",
]

[[package]]
name = "tempfile"
version = "3.10.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1"
dependencies = [
 "cfg-if",
 "fastrand",
 "rustix",
 "windows-sys 0.52.0",
]

[[package]]
name = "tendril"
version = "0.4.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d24a120c5fc464a3458240ee02c299ebcb9d67b5249c8848b09d639dca8d7bb0"
dependencies = [
 "futf",
 "mac",
 "utf-8",
]

[[package]]
name = "thin-slice"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8eaa81235c7058867fa8c0e7314f33dcce9c215f535d1913822a2b3f5e289f3c"

[[package]]
name = "thiserror"
version = "1.0.59"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f0126ad08bff79f29fc3ae6a55cc72352056dfff61e3ff8bb7129476d44b23aa"
dependencies = [
 "thiserror-impl",
]

[[package]]
name = "thiserror-impl"
version = "1.0.59"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d1cd413b5d558b4c5bf3680e324a6fa5014e7b7c067a51e69dbdf47eb7148b66"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "thread_local"
version = "1.1.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c"
dependencies = [
 "cfg-if",
 "once_cell",
]

[[package]]
name = "time"
version = "0.3.36"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5dfd88e563464686c916c7e46e623e520ddc6d79fa6641390f2e3fa86e83e885"
dependencies = [
 "deranged",
 "itoa 1.0.11",
 "num-conv",
 "powerfmt",
 "serde",
 "time-core",
 "time-macros",
]

[[package]]
name = "time-core"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3"

[[package]]
name = "time-macros"
version = "0.2.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3f252a68540fde3a3877aeea552b832b40ab9a69e318efd078774a01ddee1ccf"
dependencies = [
 "num-conv",
 "time-core",
]

[[package]]
name = "tinyvec"
version = "1.6.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50"
dependencies = [
 "tinyvec_macros",
]

[[package]]
name = "tinyvec_macros"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"

[[package]]
name = "tokio"
version = "1.37.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1adbebffeca75fcfd058afa480fb6c0b81e165a0323f9c9d39c9697e37c46787"
dependencies = [
 "backtrace",
 "bytes",
 "num_cpus",
 "pin-project-lite",
]

[[package]]
name = "toml"
version = "0.5.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234"
dependencies = [
 "serde",
]

[[package]]
name = "toml"
version = "0.7.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dd79e69d3b627db300ff956027cc6c3798cef26d22526befdfcd12feeb6d2257"
dependencies = [
 "serde",
 "serde_spanned",
 "toml_datetime",
 "toml_edit 0.19.15",
]

[[package]]
name = "toml"
version = "0.8.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e9dd1545e8208b4a5af1aa9bbd0b4cf7e9ea08fabc5d0a5c67fcaafa17433aa3"
dependencies = [
 "serde",
 "serde_spanned",
 "toml_datetime",
 "toml_edit 0.22.12",
]

[[package]]
name = "toml_datetime"
version = "0.6.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1"
dependencies = [
 "serde",
]

[[package]]
name = "toml_edit"
version = "0.19.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421"
dependencies = [
 "indexmap 2.2.6",
 "serde",
 "serde_spanned",
 "toml_datetime",
 "winnow 0.5.40",
]

[[package]]
name = "toml_edit"
version = "0.22.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d3328d4f68a705b2a4498da1d580585d39a6510f98318a2cec3018a7ec61ddef"
dependencies = [
 "indexmap 2.2.6",
 "serde",
 "serde_spanned",
 "toml_datetime",
 "winnow 0.6.7",
]

[[package]]
name = "tracing"
version = "0.1.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef"
dependencies = [
 "pin-project-lite",
 "tracing-attributes",
 "tracing-core",
]

[[package]]
name = "tracing-attributes"
version = "0.1.27"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "tracing-core"
version = "0.1.32"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54"
dependencies = [
 "once_cell",
 "valuable",
]

[[package]]
name = "tracing-log"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
dependencies = [
 "log",
 "once_cell",
 "tracing-core",
]

[[package]]
name = "tracing-subscriber"
version = "0.3.18"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ad0f048c97dbd9faa9b7df56362b8ebcaa52adb06b498c050d2f4e32f90a7a8b"
dependencies = [
 "matchers",
 "nu-ansi-term",
 "once_cell",
 "regex",
 "sharded-slab",
 "smallvec",
 "thread_local",
 "tracing",
 "tracing-core",
 "tracing-log",
]

[[package]]
name = "treediff"
version = "4.0.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4d127780145176e2b5d16611cc25a900150e86e9fd79d3bde6ff3a37359c9cb5"
dependencies = [
 "serde_json",
]

[[package]]
name = "tungstenite"
version = "0.23.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6e2e2ce1e47ed2994fd43b04c8f618008d4cabdd5ee34027cf14f9d918edd9c8"
dependencies = [
 "byteorder",
 "bytes",
 "data-encoding",
 "http 1.1.0",
 "httparse",
 "log",
 "native-tls",
 "rand 0.8.5",
 "sha1",
 "thiserror",
 "utf-8",
]

[[package]]
name = "typenum"
version = "1.17.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825"

[[package]]
name = "unicode-bidi"
version = "0.3.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75"

[[package]]
name = "unicode-ident"
version = "1.0.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b"

[[package]]
name = "unicode-normalization"
version = "0.1.23"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a56d1686db2308d901306f92a263857ef59ea39678a5458e7cb17f01415101f5"
dependencies = [
 "tinyvec",
]

[[package]]
name = "unicode-segmentation"
version = "1.11.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202"

[[package]]
name = "url"
version = "2.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "31e6302e3bb753d46e83516cae55ae196fc0c309407cf11ab35cc51a4c2a4633"
dependencies = [
 "form_urlencoded",
 "idna",
 "percent-encoding",
 "serde",
]

[[package]]
name = "utf-8"
version = "0.7.6"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "09cc8ee72d2a9becf2f2febe0205bbed8fc6615b7cb429ad062dc7b7ddd036a9"

[[package]]
name = "uuid"
version = "1.8.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a183cf7feeba97b4dd1c0d46788634f6221d87fa961b305bed08c851829efcc0"
dependencies = [
 "getrandom 0.2.14",
]

[[package]]
name = "valuable"
version = "0.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d"

[[package]]
name = "vcpkg"
version = "0.2.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426"

[[package]]
name = "version-compare"
version = "0.0.11"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "1c18c859eead79d8b95d09e4678566e8d70105c4e7b251f707a03df32442661b"

[[package]]
name = "version-compare"
version = "0.2.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "852e951cb7832cb45cb1169900d19760cfa39b82bc0ea9c0e5a14ae88411c98b"

[[package]]
name = "version_check"
version = "0.9.4"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"

[[package]]
name = "vswhom"
version = "0.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "be979b7f07507105799e854203b470ff7c78a1639e330a58f183b5fea574608b"
dependencies = [
 "libc",
 "vswhom-sys",
]

[[package]]
name = "vswhom-sys"
version = "0.1.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d3b17ae1f6c8a2b28506cd96d412eebf83b4a0ff2cbefeeb952f2f9dfa44ba18"
dependencies = [
 "cc",
 "libc",
]

[[package]]
name = "walkdir"
version = "2.5.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b"
dependencies = [
 "same-file",
 "winapi-util",
]

[[package]]
name = "wasi"
version = "0.9.0+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"

[[package]]
name = "wasi"
version = "0.11.0+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"

[[package]]
name = "wasm-bindgen"
version = "0.2.92"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8"
dependencies = [
 "cfg-if",
 "wasm-bindgen-macro",
]

[[package]]
name = "wasm-bindgen-backend"
version = "0.2.92"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da"
dependencies = [
 "bumpalo",
 "log",
 "once_cell",
 "proc-macro2",
 "quote",
 "syn 2.0.60",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-futures"
version = "0.4.42"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "76bc14366121efc8dbb487ab05bcc9d346b3b5ec0eaa76e46594cabbe51762c0"
dependencies = [
 "cfg-if",
 "js-sys",
 "wasm-bindgen",
 "web-sys",
]

[[package]]
name = "wasm-bindgen-macro"
version = "0.2.92"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726"
dependencies = [
 "quote",
 "wasm-bindgen-macro-support",
]

[[package]]
name = "wasm-bindgen-macro-support"
version = "0.2.92"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 2.0.60",
 "wasm-bindgen-backend",
 "wasm-bindgen-shared",
]

[[package]]
name = "wasm-bindgen-shared"
version = "0.2.92"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96"

[[package]]
name = "web-sys"
version = "0.3.69"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "77afa9a11836342370f4817622a2f0f418b134426d91a82dfb48f532d2ec13ef"
dependencies = [
 "js-sys",
 "wasm-bindgen",
]

[[package]]
name = "webkit2gtk"
version = "0.18.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b8f859735e4a452aeb28c6c56a852967a8a76c8eb1cc32dbf931ad28a13d6370"
dependencies = [
 "bitflags 1.3.2",
 "cairo-rs",
 "gdk",
 "gdk-sys",
 "gio",
 "gio-sys",
 "glib",
 "glib-sys",
 "gobject-sys",
 "gtk",
 "gtk-sys",
 "javascriptcore-rs",
 "libc",
 "once_cell",
 "soup2",
 "webkit2gtk-sys",
]

[[package]]
name = "webkit2gtk-sys"
version = "0.18.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4d76ca6ecc47aeba01ec61e480139dda143796abcae6f83bcddf50d6b5b1dcf3"
dependencies = [
 "atk-sys",
 "bitflags 1.3.2",
 "cairo-sys-rs",
 "gdk-pixbuf-sys",
 "gdk-sys",
 "gio-sys",
 "glib-sys",
 "gobject-sys",
 "gtk-sys",
 "javascriptcore-rs-sys",
 "libc",
 "pango-sys",
 "pkg-config",
 "soup2-sys",
 "system-deps 6.2.2",
]

[[package]]
name = "webview2-com"
version = "0.19.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "b4a769c9f1a64a8734bde70caafac2b96cada12cd4aefa49196b3a386b8b4178"
dependencies = [
 "webview2-com-macros",
 "webview2-com-sys",
 "windows 0.39.0",
 "windows-implement 0.39.0",
]

[[package]]
name = "webview2-com-macros"
version = "0.6.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "eaebe196c01691db62e9e4ca52c5ef1e4fd837dcae27dae3ada599b5a8fd05ac"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 1.0.109",
]

[[package]]
name = "webview2-com-sys"
version = "0.19.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "aac48ef20ddf657755fdcda8dfed2a7b4fc7e4581acce6fe9b88c3d64f29dee7"
dependencies = [
 "regex",
 "serde",
 "serde_json",
 "thiserror",
 "windows 0.39.0",
 "windows-bindgen",
 "windows-metadata",
]

[[package]]
name = "which"
version = "4.4.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7"
dependencies = [
 "either",
 "home",
 "once_cell",
 "rustix",
]

[[package]]
name = "winapi"
version = "0.3.9"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
dependencies = [
 "winapi-i686-pc-windows-gnu",
 "winapi-x86_64-pc-windows-gnu",
]

[[package]]
name = "winapi-i686-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"

[[package]]
name = "winapi-util"
version = "0.1.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b"
dependencies = [
 "windows-sys 0.52.0",
]

[[package]]
name = "winapi-x86_64-pc-windows-gnu"
version = "0.4.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"

[[package]]
name = "windows"
version = "0.37.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "57b543186b344cc61c85b5aab0d2e3adf4e0f99bc076eff9aa5927bcc0b8a647"
dependencies = [
 "windows_aarch64_msvc 0.37.0",
 "windows_i686_gnu 0.37.0",
 "windows_i686_msvc 0.37.0",
 "windows_x86_64_gnu 0.37.0",
 "windows_x86_64_msvc 0.37.0",
]

[[package]]
name = "windows"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f1c4bd0a50ac6020f65184721f758dba47bb9fbc2133df715ec74a237b26794a"
dependencies = [
 "windows-implement 0.39.0",
 "windows_aarch64_msvc 0.39.0",
 "windows_i686_gnu 0.39.0",
 "windows_i686_msvc 0.39.0",
 "windows_x86_64_gnu 0.39.0",
 "windows_x86_64_msvc 0.39.0",
]

[[package]]
name = "windows"
version = "0.48.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e686886bc078bc1b0b600cac0147aadb815089b6e4da64016cbd754b6342700f"
dependencies = [
 "windows-targets 0.48.5",
]

[[package]]
name = "windows"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "efc5cf48f83140dcaab716eeaea345f9e93d0018fb81162753a3f76c3397b538"
dependencies = [
 "windows-core 0.53.0",
 "windows-targets 0.52.5",
]

[[package]]
name = "windows"
version = "0.57.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "12342cb4d8e3b046f3d80effd474a7a02447231330ef77d71daa6fbc40681143"
dependencies = [
 "windows-core 0.57.0",
 "windows-targets 0.52.5",
]

[[package]]
name = "windows-bindgen"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "68003dbd0e38abc0fb85b939240f4bce37c43a5981d3df37ccbaaa981b47cb41"
dependencies = [
 "windows-metadata",
 "windows-tokens",
]

[[package]]
name = "windows-core"
version = "0.52.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9"
dependencies = [
 "windows-targets 0.52.5",
]

[[package]]
name = "windows-core"
version = "0.53.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9dcc5b895a6377f1ab9fa55acedab1fd5ac0db66ad1e6c7f47e28a22e446a5dd"
dependencies = [
 "windows-result",
 "windows-targets 0.52.5",
]

[[package]]
name = "windows-core"
version = "0.57.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d2ed2439a290666cd67ecce2b0ffaad89c2a56b976b736e6ece670297897832d"
dependencies = [
 "windows-implement 0.57.0",
 "windows-interface",
 "windows-result",
 "windows-targets 0.52.5",
]

[[package]]
name = "windows-implement"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ba01f98f509cb5dc05f4e5fc95e535f78260f15fea8fe1a8abdd08f774f1cee7"
dependencies = [
 "syn 1.0.109",
 "windows-tokens",
]

[[package]]
name = "windows-implement"
version = "0.57.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9107ddc059d5b6fbfbffdfa7a7fe3e22a226def0b2608f72e9d552763d3e1ad7"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "windows-interface"
version = "0.57.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "29bee4b38ea3cde66011baa44dba677c432a78593e202392d1e9070cf2a7fca7"
dependencies = [
 "proc-macro2",
 "quote",
 "syn 2.0.60",
]

[[package]]
name = "windows-metadata"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9ee5e275231f07c6e240d14f34e1b635bf1faa1c76c57cfd59a5cdb9848e4278"

[[package]]
name = "windows-result"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "749f0da9cc72d82e600d8d2e44cadd0b9eedb9038f71a1c58556ac1c5791813b"
dependencies = [
 "windows-targets 0.52.5",
]

[[package]]
name = "windows-sys"
version = "0.42.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7"
dependencies = [
 "windows_aarch64_gnullvm 0.42.2",
 "windows_aarch64_msvc 0.42.2",
 "windows_i686_gnu 0.42.2",
 "windows_i686_msvc 0.42.2",
 "windows_x86_64_gnu 0.42.2",
 "windows_x86_64_gnullvm 0.42.2",
 "windows_x86_64_msvc 0.42.2",
]

[[package]]
name = "windows-sys"
version = "0.48.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
dependencies = [
 "windows-targets 0.48.5",
]

[[package]]
name = "windows-sys"
version = "0.52.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d"
dependencies = [
 "windows-targets 0.52.5",
]

[[package]]
name = "windows-targets"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
dependencies = [
 "windows_aarch64_gnullvm 0.48.5",
 "windows_aarch64_msvc 0.48.5",
 "windows_i686_gnu 0.48.5",
 "windows_i686_msvc 0.48.5",
 "windows_x86_64_gnu 0.48.5",
 "windows_x86_64_gnullvm 0.48.5",
 "windows_x86_64_msvc 0.48.5",
]

[[package]]
name = "windows-targets"
version = "0.52.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb"
dependencies = [
 "windows_aarch64_gnullvm 0.52.5",
 "windows_aarch64_msvc 0.52.5",
 "windows_i686_gnu 0.52.5",
 "windows_i686_gnullvm",
 "windows_i686_msvc 0.52.5",
 "windows_x86_64_gnu 0.52.5",
 "windows_x86_64_gnullvm 0.52.5",
 "windows_x86_64_msvc 0.52.5",
]

[[package]]
name = "windows-tokens"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f838de2fe15fe6bac988e74b798f26499a8b21a9d97edec321e79b28d1d7f597"

[[package]]
name = "windows-version"
version = "0.1.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6998aa457c9ba8ff2fb9f13e9d2a930dabcea28f1d0ab94d687d8b3654844515"
dependencies = [
 "windows-targets 0.52.5",
]

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.42.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"

[[package]]
name = "windows_aarch64_gnullvm"
version = "0.52.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263"

[[package]]
name = "windows_aarch64_msvc"
version = "0.37.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2623277cb2d1c216ba3b578c0f3cf9cdebeddb6e66b1b218bb33596ea7769c3a"

[[package]]
name = "windows_aarch64_msvc"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ec7711666096bd4096ffa835238905bb33fb87267910e154b18b44eaabb340f2"

[[package]]
name = "windows_aarch64_msvc"
version = "0.42.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43"

[[package]]
name = "windows_aarch64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"

[[package]]
name = "windows_aarch64_msvc"
version = "0.52.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6"

[[package]]
name = "windows_i686_gnu"
version = "0.37.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d3925fd0b0b804730d44d4b6278c50f9699703ec49bcd628020f46f4ba07d9e1"

[[package]]
name = "windows_i686_gnu"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "763fc57100a5f7042e3057e7e8d9bdd7860d330070251a73d003563a3bb49e1b"

[[package]]
name = "windows_i686_gnu"
version = "0.42.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f"

[[package]]
name = "windows_i686_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"

[[package]]
name = "windows_i686_gnu"
version = "0.52.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670"

[[package]]
name = "windows_i686_gnullvm"
version = "0.52.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9"

[[package]]
name = "windows_i686_msvc"
version = "0.37.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ce907ac74fe331b524c1298683efbf598bb031bc84d5e274db2083696d07c57c"

[[package]]
name = "windows_i686_msvc"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7bc7cbfe58828921e10a9f446fcaaf649204dcfe6c1ddd712c5eebae6bda1106"

[[package]]
name = "windows_i686_msvc"
version = "0.42.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060"

[[package]]
name = "windows_i686_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"

[[package]]
name = "windows_i686_msvc"
version = "0.52.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf"

[[package]]
name = "windows_x86_64_gnu"
version = "0.37.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "2babfba0828f2e6b32457d5341427dcbb577ceef556273229959ac23a10af33d"

[[package]]
name = "windows_x86_64_gnu"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6868c165637d653ae1e8dc4d82c25d4f97dd6605eaa8d784b5c6e0ab2a252b65"

[[package]]
name = "windows_x86_64_gnu"
version = "0.42.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36"

[[package]]
name = "windows_x86_64_gnu"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"

[[package]]
name = "windows_x86_64_gnu"
version = "0.52.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.42.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"

[[package]]
name = "windows_x86_64_gnullvm"
version = "0.52.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596"

[[package]]
name = "windows_x86_64_msvc"
version = "0.37.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f4dd6dc7df2d84cf7b33822ed5b86318fb1781948e9663bacd047fc9dd52259d"

[[package]]
name = "windows_x86_64_msvc"
version = "0.39.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "5e4d40883ae9cae962787ca76ba76390ffa29214667a111db9e0a1ad8377e809"

[[package]]
name = "windows_x86_64_msvc"
version = "0.42.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0"

[[package]]
name = "windows_x86_64_msvc"
version = "0.48.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"

[[package]]
name = "windows_x86_64_msvc"
version = "0.52.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0"

[[package]]
name = "winnow"
version = "0.5.40"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876"
dependencies = [
 "memchr",
]

[[package]]
name = "winnow"
version = "0.6.7"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "14b9415ee827af173ebb3f15f9083df5a122eb93572ec28741fb153356ea2578"
dependencies = [
 "memchr",
]

[[package]]
name = "winreg"
version = "0.10.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "80d0f4e272c85def139476380b12f9ac60926689dd2e01d4923222f40580869d"
dependencies = [
 "winapi",
]

[[package]]
name = "winreg"
version = "0.52.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a277a57398d4bfa075df44f501a17cfdf8542d224f0d36095a2adc7aee4ef0a5"
dependencies = [
 "cfg-if",
 "windows-sys 0.48.0",
]

[[package]]
name = "wry"
version = "0.24.8"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "a04e72739ee84a218e3dbf8625888eadc874285637003ed21ab96a1bbbb538ec"
dependencies = [
 "base64 0.13.1",
 "block",
 "cocoa",
 "core-graphics",
 "crossbeam-channel",
 "dunce",
 "gdk",
 "gio",
 "glib",
 "gtk",
 "html5ever",
 "http 0.2.12",
 "kuchikiki",
 "libc",
 "log",
 "objc",
 "objc_id",
 "once_cell",
 "serde",
 "serde_json",
 "sha2",
 "soup2",
 "tao",
 "thiserror",
 "url",
 "webkit2gtk",
 "webkit2gtk-sys",
 "webview2-com",
 "windows 0.39.0",
 "windows-implement 0.39.0",
]

[[package]]
name = "x11"
version = "2.21.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "502da5464ccd04011667b11c435cb992822c2c0dbde1770c988480d312a0db2e"
dependencies = [
 "libc",
 "pkg-config",
]

[[package]]
name = "x11-dl"
version = "2.21.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "38735924fedd5314a6e548792904ed8c6de6636285cb9fec04d5b1db85c1516f"
dependencies = [
 "libc",
 "once_cell",
 "pkg-config",
]

[[package]]
name = "xattr"
version = "1.3.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "8da84f1a25939b27f6820d92aed108f83ff920fdf11a7b19366c27c4cda81d4f"
dependencies = [
 "libc",
 "linux-raw-sys",
 "rustix",
]

</file>
<file name="loader/src-tauri/src/main.rs">
// Prevents additional console window on Windows in release, DO NOT REMOVE!!
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

use named_lock::{Error, NamedLock};
use std::env;

mod config;
mod shell;

#[cfg(windows)]
mod windows;

#[cfg(target_os = "macos")]
mod macos;

#[macro_export]
macro_rules! dprintln {
    ($($arg:tt)*) => (#[cfg(debug_assertions)] println!("[D] {}", format!($($arg)*)));
}

pub trait CustomBuild {
    fn setup_platform(self) -> Self;
}

pub fn build_window&lt;R: tauri::Runtime>(app: &amp;tauri::App&lt;R>) -> tauri::Window&lt;R> {
    match tauri::WindowBuilder::new(app, "main", tauri::WindowUrl::default())
        .title("Pengu Loader")
        .inner_size(940.0, 560.0)
        .disable_file_drop_handler()
        .resizable(false)
        .maximizable(false)
        .center()
        .focused(true)
    {
        builder => {
            #[cfg(windows)]
            {
                builder.decorations(false)
            }
            #[cfg(target_os = "macos")]
            {
                builder.title_bar_style(tauri::TitleBarStyle::Overlay)
            }
        }
    }
    .build()
    .expect("error while building main window")
}

fn main() -> Result&lt;(), Error> {
    #[cfg(windows)]
    windows::do_entry();

    let lock = NamedLock::create("989d2110-46da-4c8d-84c1-c4a42e43c424")?;
    let _guard = lock.try_lock()?;

    tauri::Builder::default()
        .setup_platform()
        .plugin(config::init())
        .plugin(shell::init())
        .run(tauri::generate_context!())
        .expect("error while running tauri application");

    Ok(())
}

</file>
<file name="loader/src-tauri/src/config.rs">
use std::{
    fs::File,
    io::{BufRead, BufReader},
    path::PathBuf,
};
use tauri::{
    plugin::{Builder, TauriPlugin},
    Runtime,
};

/// Base dir is the exe dir.
/// In dev, it should be the bin folder in root project.
pub fn base_dir() -> PathBuf {
    let path = std::env::current_exe().unwrap();
    let dir = path.parent().unwrap();

    if cfg!(debug_assertions) {
        return dir
            .parent()
            .unwrap()
            .parent()
            .unwrap()
            .parent()
            .unwrap()
            .parent()
            .unwrap()
            .join("bin");
    }

    dir.into()
}

/// Get core module path.
pub fn core_path() -> PathBuf {
    let mut path = base_dir().join("core");
    #[cfg(windows)]
    path.set_extension("dll");
    #[cfg(target_os = "macos")]
    path.set_extension("dylib");
    path
}

/// Get config path.
pub fn config_path() -> PathBuf {
    let dir = base_dir();
    dir.join("config")
}

/// Get League dir from the config.
#[allow(dead_code)]
pub fn league_dir() -> Option&lt;PathBuf> {
    if let Ok(file) = File::open(config_path()) {
        let reader = BufReader::new(file);
        let mut league_path = String::new();
        for line in reader.lines() {
            if let Ok(line) = line {
                if line.trim_start().starts_with("league_dir") {
                    if let Some(index) = line.find('=') {
                        if index > 0 {
                            league_path = line[(index + 1)..].trim().to_string();
                            break;
                        }
                    }
                    break;
                }
            }
        }
        if !league_path.is_empty() {
            Some(PathBuf::from(league_path))
        } else {
            None
        }
    } else {
        None
    }
}

pub fn init&lt;R: Runtime>() -> TauriPlugin&lt;R> {
    #[tauri::command]
    fn get_base_dir() -> String {
        base_dir().display().to_string()
    }

    #[tauri::command]
    fn get_config_path() -> String {
        config_path().display().to_string()
    }

    #[tauri::command]
    fn core_exists() -> bool {
        core_path().exists()
    }

    Builder::new("config")
        .invoke_handler(tauri::generate_handler![
            get_base_dir,
            get_config_path,
            core_exists
        ])
        .build()
}

</file>
<file name="loader/src-tauri/src/shell.rs">
use std::process::Command;
use tauri::{
    plugin::{Builder, TauriPlugin},
    Runtime,
};

#[tauri::command]
fn expand_folder(path: &amp;str) {
    #[cfg(windows)]
    {
        let path = path.replace("/", "\\");
        Command::new("explorer")
            .args(["/expand,", &amp;path])
            .spawn()
            .unwrap();
    }

    #[cfg(target_os = "macos")]
    Command::new("open").arg(path).spawn().unwrap();
}

#[tauri::command]
fn reveal_file(path: &amp;str) {
    #[cfg(windows)]
    {
        let path = path.replace("/", "\\");
        Command::new("explorer")
            .args(["/select,", &amp;path])
            .spawn()
            .unwrap();
    }

    #[cfg(target_os = "macos")]
    Command::new("open").args(["-R", path]).spawn().unwrap();
}

pub fn init&lt;R: Runtime>() -> TauriPlugin&lt;R> {
    Builder::new("shell")
        .invoke_handler(tauri::generate_handler![expand_folder, reveal_file,])
        .build()
}

</file>
<file name="loader/src-tauri/src/macos/tray.rs">
use tauri::{
    AppHandle, CustomMenuItem, Manager, Runtime, SystemTray, SystemTrayEvent, SystemTrayMenu,
    SystemTrayMenuItem,
};

pub fn create() -> SystemTray {
    let menu = SystemTrayMenu::new()
        .add_item(CustomMenuItem::new("".to_string(), "Pengu Loader").disabled())
        .add_item(CustomMenuItem::new("active".to_string(), "Active"))
        .add_native_item(SystemTrayMenuItem::Separator)
        .add_item(CustomMenuItem::new("hide".to_string(), "Show app"))
        .add_item(CustomMenuItem::new("quit".to_string(), "Quit"));

    SystemTray::new().with_menu(menu)
}

pub fn handle_event&lt;R: tauri::Runtime>(app: &amp;AppHandle&lt;R>, evt: SystemTrayEvent) {
    if let SystemTrayEvent::MenuItemClick { id, .. } = evt {
        match id.as_str() {
            "active" => {
                super::cmd_set_active(app.app_handle(), !super::cmd_is_active());
            }
            "hide" => {
                let window = app.get_window("main").unwrap();
                window.show().unwrap();
            }
            "quit" => {
                app.exit(0);
            }
            _ => (),
        }
    }
}

pub fn set_active_check&lt;R: Runtime>(app: AppHandle&lt;R>, active: bool) {
    let menu_item = app.tray_handle().get_item("active");
    _ = menu_item.set_selected(active);
}

</file>
<file name="loader/src-tauri/src/macos/dylib.rs">
#![allow(deprecated)]
#![allow(non_camel_case_types)]
#![allow(arithmetic_overflow)]

use crate::dprintln;
use libc::*;
use std::mem::{transmute, zeroed};

static CODESIG_FLAG: i32 = 0;

const FAT_MAGIC: u32 = 0xcafebabe;
const FAT_CIGAM: u32 = 0xbebafeca; /* NXSwapLong(FAT_MAGIC) */

const LC_SYMTAB: u32 = 0x2;
const LC_REQ_DYLD: u32 = 0x80000000;
const LC_CODE_SIGNATURE: u32 = 0x1d;
const LC_LOAD_DYLIB: u32 = 0xc;
const LC_LOAD_WEAK_DYLIB: u32 = 0x18 | LC_REQ_DYLD;

const MH_MAGIC: u32 = 0xfeedface; /* the mach magic number */
const MH_CIGAM: u32 = 0xcefaedfe; /* NXSwapInt(MH_MAGIC) */
const MH_MAGIC_64: u32 = 0xfeedfacf; /* the 64-bit mach magic number */
const MH_CIGAM_64: u32 = 0xcffaedfe; /* NXSwapInt(MH_MAGIC_64) */

#[repr(C)]
#[derive(Clone)]
struct fat_header {
    pub magic: u32,     /* FAT_MAGIC or FAT_MAGIC_64 */
    pub nfat_arch: u32, /* number of structs that follow */
}

#[repr(C)]
#[derive(Clone)]
struct fat_arch {
    pub cputype: i32,    /* cpu specifier (int) */
    pub cpusubtype: i32, /* machine specifier (int) */
    pub offset: u32,     /* file offset to this object file */
    pub size: u32,       /* size of this object file */
    pub align: u32,      /* alignment as a power of 2 */
}

#[repr(C)]
#[derive(Clone)]
struct dylib_ {
    pub offset: u32,                /* library's path name */
    pub timestamp: u32,             /* library's build time stamp */
    pub current_version: u32,       /* library's current version number */
    pub compatibility_version: u32, /* library's compatibility vers number*/
}

#[repr(C)]
#[derive(Clone)]
struct dylib_command {
    pub cmd: u32,      /* LC_ID_DYLIB, LC_LOAD_{,WEAK_}DYLIB, LC_REEXPORT_DYLIB */
    pub cmd_size: u32, /* includes pathname string */
    pub dylib: dylib_, /* the library identification */
}

#[repr(C)]
#[derive(Clone)]
struct linkedit_data_command {
    pub cmd: u32,      /* LC_CODE_SIGNATURE, LC_SEGMENT_SPLIT_INFO,
                       LC_FUNCTION_STARTS, LC_DATA_IN_CODE,
                       LC_DYLIB_CODE_SIGN_DRS, LC_ATOM_INFO,
                       LC_LINKER_OPTIMIZATION_HINT,
                       LC_DYLD_EXPORTS_TRIE, or
                       LC_DYLD_CHAINED_FIXUPS. */
    pub cmdsize: u32,  /* sizeof(struct linkedit_data_command) */
    pub dataoff: u32,  /* file offset of data in __LINKEDIT segment */
    pub datasize: u32, /* file size of data in __LINKEDIT segment  */
}

#[repr(C)]
#[derive(Clone)]
struct symtab_command {
    pub cmd: u32,     /* LC_SYMTAB */
    pub cmdsize: u32, /* sizeof(struct symtab_command) */
    pub symoff: u32,  /* symbol table offset */
    pub nsyms: u32,   /* number of symbol table entries */
    pub stroff: u32,  /* string table offset */
    pub strsize: u32, /* string table size in bytes */
}

fn is_little_endian(magic: u32) -> bool {
    magic == FAT_CIGAM || magic == MH_CIGAM_64 || magic == MH_CIGAM
}

fn swap32(x: u32, magic: u32) -> u32 {
    if is_little_endian(magic) {
        x.to_be()
    } else {
        x
    }
}

fn swap64(x: u64, magic: u32) -> u64 {
    if is_little_endian(magic) {
        x.to_be()
    } else {
        x
    }
}

fn round_up(x: u64, y: u32) -> u64 {
    (x + (y as u64) - 1) &amp; (-i64::from(y) as u64)
}

fn absdiff(x: off_t, y: off_t) -> usize {
    if x > y {
        x as usize - y as usize
    } else {
        y as usize - x as usize
    }
}

type off_t = i64;
const BUFSIZE: size_t = 512;

unsafe fn fbzero(f: *mut FILE, offset: off_t, mut len: size_t) {
    const ZEROES: [u8; BUFSIZE] = [0; BUFSIZE];
    fseeko(f, offset, SEEK_SET);
    while len != 0 {
        let size = std::cmp::min(len, BUFSIZE);
        fwrite(ZEROES.as_ptr() as *const c_void, size, 1, f);
        len -= size;
    }
}

unsafe fn fmemmove(f: *mut FILE, mut dst: off_t, mut src: off_t, mut len: size_t) {
    static BUF: [u8; BUFSIZE] = [0; BUFSIZE];
    while len != 0 {
        let size = std::cmp::min(len, BUFSIZE);
        fseeko(f, src, SEEK_SET);
        fread(transmute(BUF.as_ptr()), size, 1, f);
        fseeko(f, dst, SEEK_SET);
        fwrite(BUF.as_ptr() as *const c_void, size, 1, f);

        len -= size;
        src += size as off_t;
        dst += size as off_t;
    }
}

unsafe fn fpeek(ptr: *mut c_void, size: size_t, nitems: size_t, stream: *mut FILE) -> size_t {
    let pos = ftello(stream);
    let result = fread(ptr, size, nitems, stream);
    fseeko(stream, pos, SEEK_SET);
    return result;
}

unsafe fn read_load_command(f: *mut FILE, cmdsize: u32) -> *mut c_void {
    let lc = malloc(cmdsize as size_t);
    fpeek(lc, cmdsize as size_t, 1, f);
    return lc;
}

unsafe fn check_load_commands(
    f: *mut FILE,
    mh: &amp;mut mach_header,
    header_offset: off_t,
    commands_offset: off_t,
    dylib_path: *const c_char,
    slice_size: &amp;mut off_t,
    cont_anyway: bool,
) -> bool {
    fseeko(f, commands_offset, SEEK_SET);

    let ncmds = swap32(mh.ncmds, mh.magic);

    let mut linkedit_32_pos: off_t = -1;
    let mut linkedit_64_pos: off_t = -1;
    let mut linkedit_32: segment_command = zeroed();
    let mut linkedit_64: segment_command_64 = zeroed();

    let mut symtab_pos: off_t = -1;
    let mut symtab_size: size_t = 0;

    for i in 0..ncmds - 1 {
        let lc: load_command = zeroed();
        fpeek(transmute(&amp;lc), size_of::&lt;load_command>(), 1, f);

        let cmdsize = swap32(lc.cmdsize, mh.magic);
        let cmd = swap32(lc.cmd, mh.magic);

        match cmd {
            LC_CODE_SIGNATURE => {
                let mut fix_header = false;

                if i == ncmds - 1 {
                    if CODESIG_FLAG == 2 {
                        return true;
                    }

                    if CODESIG_FLAG == 0 {
                        dprintln!("LC_CODE_SIGNATURE load command found. Remove it?");
                        if !cont_anyway {
                            return true;
                        }
                    }

                    let cmd: &amp;mut linkedit_data_command = transmute(read_load_command(f, cmdsize));

                    fbzero(f, ftello(f), cmdsize as size_t);

                    let dataoff = swap32(cmd.dataoff, mh.magic);
                    let datasize = swap32(cmd.datasize, mh.magic);

                    free(transmute(cmd));

                    let mut linkedit_fileoff: u64 = 0;
                    let mut linkedit_filesize: u64 = 0;

                    if linkedit_32_pos != -1 {
                        linkedit_fileoff = swap32(linkedit_32.fileoff, mh.magic) as u64;
                        linkedit_filesize = swap32(linkedit_32.filesize, mh.magic) as u64;
                    } else if linkedit_64_pos != -1 {
                        linkedit_fileoff = swap64(linkedit_64.fileoff, mh.magic);
                        linkedit_filesize = swap64(linkedit_64.filesize, mh.magic);
                    } else {
                        dprintln!("Warning: __LINKEDIT segment not found.");
                    }

                    if linkedit_32_pos != -1 || linkedit_64_pos != -1 {
                        if linkedit_fileoff + linkedit_filesize != *slice_size as u64 {
                            dprintln!("Warning: __LINKEDIT segment is not at the end of the file, so codesign will not work on the patched binary.");
                        } else {
                            if dataoff + datasize != *slice_size as u32 {
                                dprintln!("Warning: Codesignature is not at the end of __LINKEDIT segment, so codesign will not work on the patched binary.");
                            } else {
                                *slice_size -= datasize as i64;
                                //int64_t diff_size = 0;
                                if symtab_pos == -1 {
                                    dprintln!("Warning: LC_SYMTAB load command not found. codesign might not work on the patched binary.");
                                } else {
                                    fseeko(f, symtab_pos, SEEK_SET);
                                    let symtab: *mut symtab_command =
                                        transmute(read_load_command(f, symtab_size as u32));

                                    let strsize = swap32((*symtab).strsize, mh.magic);
                                    let diff_size: i64 = swap32((*symtab).stroff as u32, mh.magic)
                                        as i64
                                        + strsize as i64
                                        - *slice_size;

                                    if -0x10 &lt;= diff_size &amp;&amp; diff_size &lt;= 0 {
                                        (*symtab).strsize =
                                            swap32(strsize - diff_size as u32, mh.magic);
                                        fwrite(transmute(symtab), symtab_size, 1, f);
                                    } else {
                                        dprintln!("Warning: String table doesn't appear right before code signature. codesign might not work on the patched binary. {:#}", diff_size);
                                    }

                                    free(transmute(symtab));
                                }

                                linkedit_filesize -= datasize as u64;
                                let linkedit_vmsize: u64 = round_up(linkedit_filesize, 0x1000);

                                if linkedit_32_pos != -1 {
                                    linkedit_32.filesize =
                                        swap32(linkedit_filesize as u32, mh.magic);
                                    linkedit_32.vmsize = swap32(linkedit_vmsize as u32, mh.magic);

                                    fseeko(f, linkedit_32_pos, SEEK_SET);
                                    fwrite(
                                        transmute(&amp;linkedit_32),
                                        size_of_val(&amp;linkedit_32),
                                        1,
                                        f,
                                    );
                                } else {
                                    linkedit_64.filesize = swap64(linkedit_filesize, mh.magic);
                                    linkedit_64.vmsize = swap64(linkedit_vmsize, mh.magic);

                                    fseeko(f, linkedit_64_pos, SEEK_SET);
                                    fwrite(
                                        transmute(&amp;linkedit_64),
                                        size_of_val(&amp;linkedit_64),
                                        1,
                                        f,
                                    );
                                }

                                fix_header = true;
                            }
                        }
                    }

                    if !fix_header {
                        // If we haven't truncated the file, zero out the code signature
                        fbzero(f, header_offset + dataoff as i64, datasize as size_t);
                    }

                    mh.ncmds = swap32(ncmds - 1, mh.magic);
                    mh.sizeofcmds = swap32(swap32(mh.sizeofcmds, mh.magic) - cmdsize, mh.magic);

                    return true;
                } else {
                    dprintln!(
                        "LC_CODE_SIGNATURE is not the last load command, so couldn't remove."
                    );
                }
            }

            LC_LOAD_DYLIB | LC_LOAD_WEAK_DYLIB => {
                let dylib_command: *mut dylib_command = transmute(read_load_command(f, cmdsize));

                let offset: u32 = (*dylib_command).dylib.offset;
                let name: *const c_char = transmute(
                    transmute::&lt;_, isize>(dylib_command) + swap32(offset, mh.magic) as isize,
                );

                let cmp = strcmp(name, dylib_path);

                free(transmute(dylib_command));

                if cmp == 0 {
                    dprintln!(
                        "Binary already contains a load command for that dylib. Continue anyway?"
                    );
                    if !cont_anyway {
                        return false;
                    }
                }
            }

            LC_SEGMENT => {
                let cmd: &amp;mut segment_command = transmute(read_load_command(f, cmdsize));
                if strcmp(cmd.segname.as_ptr(), "__LINKEDIT\0".as_ptr() as *const i8) == 0 {
                    linkedit_32_pos = ftello(f);
                    linkedit_32 = *cmd;
                }
                free(transmute(cmd));
            }

            LC_SEGMENT_64 => {
                let cmd: &amp;mut segment_command_64 = transmute(read_load_command(f, cmdsize));
                if strcmp(cmd.segname.as_ptr(), "__LINKEDIT\0".as_ptr() as *const i8) == 0 {
                    linkedit_64_pos = ftello(f);
                    linkedit_64 = *cmd;
                }
                free(transmute(cmd));
            }

            LC_SYMTAB => {
                symtab_pos = ftello(f);
                symtab_size = cmdsize as usize;
            }

            _ => (),
        }

        fseeko(f, swap32(lc.cmdsize, mh.magic) as i64, SEEK_CUR);
    }

    return true;
}

unsafe fn insert_dylib(
    f: *mut FILE,
    header_offset: off_t,
    dylib_path: *const c_char,
    slice_size: &amp;mut off_t,
    weak: bool,
    cont_anyway: bool,
) -> bool {
    fseeko(f, header_offset, SEEK_SET);

    let mut mh: mach_header = std::mem::zeroed();
    fread(transmute(&amp;mh), size_of::&lt;mach_header>(), 1, f);

    if mh.magic != MH_MAGIC_64
        &amp;&amp; mh.magic != MH_CIGAM_64
        &amp;&amp; mh.magic != MH_MAGIC
        &amp;&amp; mh.magic != MH_CIGAM
    {
        dprintln!("Unknown magic: {:#x}\n", mh.magic);
        return false;
    }

    let commands_offset = header_offset + size_of::&lt;mach_header_64>() as off_t;

    let cont = check_load_commands(
        f,
        &amp;mut mh,
        header_offset,
        commands_offset,
        dylib_path,
        slice_size,
        cont_anyway,
    );
    if !cont {
        return true;
    }

    // Even though a padding of 4 works for x86_64, codesign doesn't like it
    let path_padding: usize = 8;

    let dylib_path_len = strlen(dylib_path);
    let dylib_path_size = (dylib_path_len &amp; !(path_padding - 1)) + path_padding;
    let cmdsize: u32 = (size_of::&lt;dylib_command>() + dylib_path_size) as u32;

    let dylib_command = dylib_command {
        cmd: swap32(
            if weak {
                LC_LOAD_WEAK_DYLIB
            } else {
                LC_LOAD_DYLIB
            },
            mh.magic,
        ),
        cmd_size: swap32(cmdsize, mh.magic),
        dylib: dylib_ {
            offset: swap32(size_of::&lt;dylib_command>() as u32, mh.magic),
            timestamp: 0,
            current_version: 0,
            compatibility_version: 0,
        },
    };

    let mut sizeofcmds = swap32(mh.sizeofcmds, mh.magic);

    fseeko(f, commands_offset + sizeofcmds as i64, SEEK_SET);
    let space: Vec&lt;u8> = vec![0; cmdsize as usize];

    fread(transmute(space.as_ptr()), cmdsize as size_t, 1, f);

    let mut empty = true;
    for x in &amp;space {
        if *x != 0 {
            empty = false;
            break;
        }
    }

    if !empty {
        dprintln!("It doesn't seem like there is enough empty space. Continue anyway?");
        if !cont_anyway {
            return false;
        }
    }

    fseeko(f, -(cmdsize as off_t), SEEK_CUR);

    let dylib_path_padded = calloc(dylib_path_size, 1);
    memcpy(dylib_path_padded, transmute(dylib_path), dylib_path_len);

    fwrite(transmute(&amp;dylib_command), size_of_val(&amp;dylib_command), 1, f);
    fwrite(transmute(dylib_path_padded), dylib_path_size, 1, f);

    free(transmute(dylib_path_padded));

    mh.ncmds = swap32(swap32(mh.ncmds, mh.magic) + 1, mh.magic);
    sizeofcmds += cmdsize;
    mh.sizeofcmds = swap32(sizeofcmds, mh.magic);

    fseeko(f, header_offset, SEEK_SET);
    fwrite(transmute(&amp;mh), size_of::&lt;mach_header>(), 1, f);

    return true;
}

///
/// Insert `LC_LOAD_DYLIB` to `binary_path` to load `dylib_path`,
/// the action will break signature of `binary_path`. To use `LC_LOAD_WEAK_DYLIB`,
/// set `weak` to true.
///
pub unsafe fn insert(dylib_path: &amp;str, binary_path: &amp;str, weak: bool, cont_anyway: bool) -> bool {
    let dylib_path = [dylib_path, "\0"].join("");
    let binary_path = [binary_path, "\0"].join("");

    let lc_name = if weak {
        "LC_LOAD_WEAK_DYLIB"
    } else {
        "LC_LOAD_DYLIB"
    };

    let f = fopen(
        binary_path.as_ptr() as *const i8,
        "r+\0".as_ptr() as *const i8,
    );

    if f.is_null() {
        dprintln!("Couldn't open file {}", binary_path);
        return false;
    }

    let mut success = true;

    fseeko(f, 0, SEEK_END);
    let mut file_size = ftello(f);
    rewind(f);

    let magic: u32 = 0;
    fread(transmute(&amp;magic), size_of::&lt;u32>(), 1, f);

    match magic {
        FAT_MAGIC | FAT_CIGAM => {
            fseeko(f, 0, SEEK_SET);

            let fh: fat_header = zeroed();
            fread(transmute(&amp;fh), size_of::&lt;fat_header>(), 1, f);

            let nfat_arch: u32 = swap32(fh.nfat_arch, magic);
            dprintln!("Binary is a fat binary with {} archs.", nfat_arch);

            let mut archs: Vec&lt;fat_arch> = vec![zeroed(); nfat_arch as usize];
            fread(
                transmute(archs.as_ptr()),
                size_of::&lt;fat_arch>(),
                archs.len(),
                f,
            );

            let mut fails = 0;

            let mut offset: off_t = 0;
            if nfat_arch > 0 {
                offset = swap32(archs[0].offset, magic) as off_t;
            }

            for i in 0..archs.len() {
                let orig_offset = swap32(archs[i].offset, magic) as off_t;
                let orig_slice_size = swap32(archs[i].size, magic) as off_t;
                offset = round_up(offset as u64, 1 &lt;&lt; swap32(archs[i].align, magic)) as off_t;

                if orig_offset != offset {
                    fmemmove(f, offset, orig_offset, orig_slice_size as usize);
                    fbzero(
                        f,
                        std::cmp::min(offset as i64, orig_offset) as i64 + orig_slice_size,
                        absdiff(offset, orig_offset),
                    );

                    archs[i].offset = swap32(offset as u32, magic);
                }

                let mut slice_size = orig_slice_size;
                let r = insert_dylib(
                    f,
                    offset,
                    dylib_path.as_ptr() as *const i8,
                    &amp;mut slice_size,
                    weak,
                    cont_anyway,
                );
                if !r {
                    dprintln!("Failed to add {} to arch #{}!", lc_name, i + 1);
                    fails += 1;
                }

                if (slice_size &lt; orig_slice_size) &amp;&amp; (i &lt; nfat_arch as usize - 1) {
                    fbzero(
                        f,
                        offset + slice_size,
                        (orig_slice_size - slice_size) as usize,
                    );
                }

                file_size = offset as i64 + slice_size;
                offset += slice_size;
                archs[i].size = swap32(slice_size as u32, magic);
            }

            rewind(f);
            fwrite(transmute(&amp;fh), size_of::&lt;fat_header>(), 1, f);
            fwrite(
                transmute(archs.as_ptr()),
                size_of::&lt;fat_arch>(),
                archs.len(),
                f,
            );

            // We need to flush before truncating
            fflush(f);
            ftruncate(fileno(f), file_size);

            if fails == 0 {
                dprintln!("Added {} to all archs in {}", lc_name, binary_path);
            } else if fails == nfat_arch {
                dprintln!("Failed to add {} to any archs.", lc_name);
                success = false;
            } else {
                dprintln!(
                    "Added {} to {}/{} archs in {}",
                    lc_name,
                    nfat_arch - fails,
                    nfat_arch,
                    binary_path
                );
            }
        }

        MH_MAGIC_64 | MH_CIGAM_64 | MH_MAGIC | MH_CIGAM => {
            if insert_dylib(
                f,
                0,
                dylib_path.as_ptr() as *const i8,
                &amp;mut file_size,
                weak,
                cont_anyway,
            ) {
                ftruncate(fileno(f), file_size);
                dprintln!("Added {} to {}", lc_name, binary_path);
            } else {
                dprintln!("Failed to add {}!", lc_name);
                success = false;
            }
        }

        _ => {
            dprintln!("Unknown magic: {:#}", magic);
            success = false;
        }
    }

    fclose(f);

    if !success {
        unlink(binary_path.as_ptr() as *const i8);
        return false;
    }

    true
}

</file>
<file name="loader/src-tauri/src/macos/utils.rs">
use base64::{prelude::BASE64_STANDARD, Engine};
use objc::{
    class,
    declare::ClassDecl,
    msg_send,
    runtime::{Object, Sel},
    sel, sel_impl,
};
use std::net::{IpAddr, Ipv4Addr, SocketAddr};
use sysinfo::{ProcessRefreshKind, RefreshKind, System, UpdateKind};

/// Get the running RiotClient's address &amp; authorization from command line.
pub fn get_riotclient_info() -> Option&lt;(SocketAddr, String)> {
    let refresh_kind = ProcessRefreshKind::new()
        .with_exe(UpdateKind::OnlyIfNotSet)
        .with_cmd(UpdateKind::OnlyIfNotSet);

    let system = System::new_with_specifics(RefreshKind::new().with_processes(refresh_kind));

    if let Some(process) = system
        .processes()
        .values()
        .find(|process| process.name() == "Riot Client")
    {
        let cmd = process.cmd().iter().filter_map(|os_str| os_str.to_str());

        let mut auth = None;
        let mut port = None;

        for s in cmd {
            if auth.is_none() {
                auth = s.strip_prefix("--remoting-auth-token=");
            }

            if port.is_none() {
                port = s.strip_prefix("--app-port=");
            }

            if auth.is_some() &amp;&amp; port.is_some() {
                let addr = SocketAddr::new(
                    IpAddr::V4(Ipv4Addr::LOCALHOST),
                    port.unwrap().parse::&lt;u16>().unwrap(),
                );
                let token = BASE64_STANDARD.encode(format!("riot:{}", auth.unwrap()));

                return Some((addr, token));
            }
        }
    }

    None
}

/// Hide the traffic light controls from window.
pub fn hide_traffic_lights(window: *mut std::ffi::c_void) {
    unsafe {
        let window: *mut Object = std::mem::transmute(window);

        let min_button: *mut Object = msg_send![window, standardWindowButton:0];
        let close_button: *mut Object = msg_send![window, standardWindowButton:1];
        let max_button: *mut Object = msg_send![window, standardWindowButton:2];

        let _: () = msg_send![min_button, setHidden: true];
        let _: () = msg_send![close_button, setHidden: true];
        let _: () = msg_send![max_button, setHidden: true];
    }
}

/// Hide window's title bar.
pub fn hide_title_bar(window: *mut std::ffi::c_void) {
    unsafe {
        let window: *mut Object = std::mem::transmute(window);

        let _: () = msg_send![window, setTitlebarAppearsTransparent: true];
        let _: () = msg_send![window, setTitleVisibility: 1];
    }
}

/// Add event to existing NSApplication.
/// * `handle_reopen`: called when user clicked on the dock icon.
pub fn set_app_delegate_hook&lt;F>(handle_reopen: F)
where
    F: Fn() + Send + 'static,
{
    static mut CALLBACK: Option&lt;Box&lt;dyn Fn() + Send + 'static>> = None;

    extern "C" fn callback_reopen(_: &amp;Object, _: Sel, _: *mut Object, visible: bool) -> bool {
        if !visible {
            unsafe {
                if let Some(ref callback) = CALLBACK {
                    callback();
                }
            }
        }
        true
    }

    unsafe {
        let app: *mut Object = msg_send![class!(NSApplication), sharedApplication];
        let old_delegate: *mut Object = msg_send![app, delegate];

        // extend the default TAO NSApplicationDelegate
        if let Some(mut decl) = ClassDecl::new("AppDelegate", (*old_delegate).class()) {
            CALLBACK = Some(Box::new(handle_reopen));

            decl.add_method(
                sel!(applicationShouldHandleReopen:hasVisibleWindows:),
                callback_reopen as extern "C" fn(&amp;Object, Sel, *mut Object, bool) -> bool,
            );

            // override it
            let new_delegate: *mut Object = msg_send![decl.register(), new];
            let _: () = msg_send![app, setDelegate: new_delegate];
        }
    }
}

</file>
<file name="loader/src-tauri/src/macos/core.rs">
use std::os::unix::fs::PermissionsExt;
use std::{path::PathBuf, process::Command};

use crate::dprintln;

fn get_insert_dylib() -> PathBuf {
    crate::config::base_dir().join("insert_dylib")
}

fn ensure_exec_perm(path: &amp;PathBuf) {
    if path.exists() {
        let metadata = std::fs::metadata(path).unwrap();
        let permissions = metadata.permissions();
        let current_mode = permissions.mode();

        if current_mode &amp; 0o111 == 0 {
            let mut new_permissions = permissions;
            new_permissions.set_mode(current_mode | 0o111);
            std::fs::set_permissions(path, new_permissions).unwrap();

            dprintln!("added exec perm for {:?}", path);
        }
    }
}

fn get_target_dylib_path(lol_dir: &amp;PathBuf) -> PathBuf {
    lol_dir
        .join("League of Legends.app")
        .join("Contents")
        .join("Frameworks")
        .join("Chromium Embedded Framework.framework")
        .join("Libraries")
        .join("libEGL.dylib")
}

fn get_backup_dylib_path(lol_dir: &amp;PathBuf) -> PathBuf {
    let mut p = get_target_dylib_path(lol_dir);
    p.set_extension("dylib.bak");
    p.into()
}

fn backup_module(lol_dir: &amp;PathBuf) {
    let from = get_target_dylib_path(lol_dir);
    let to = get_backup_dylib_path(lol_dir);
    if from.exists() {
        _ = std::fs::copy(from, to);
    }
}

fn restore_module(lol_dir: &amp;PathBuf) {
    let from = get_backup_dylib_path(lol_dir);
    let to = get_target_dylib_path(lol_dir);
    if from.exists() {
        _ = std::fs::copy(from.clone(), to);
        _ = std::fs::remove_file(from.clone());
    }
}

pub fn install_module(lol_dir: &amp;PathBuf) -> bool {
    backup_module(lol_dir);

    let insert_dylib_path = get_insert_dylib();

    if insert_dylib_path.exists() {
        dprintln!("use external insert_dylib");
        ensure_exec_perm(&amp;insert_dylib_path);

        if let Ok(status) = Command::new(insert_dylib_path)
            .arg("--all-yes")
            .arg("--inplace")
            .arg(crate::config::core_path().to_str().unwrap())
            .arg(get_target_dylib_path(lol_dir).to_str().unwrap())
            .status()
        {
            status.success()
        } else {
            false
        }
    } else {
        dprintln!("use built-in insert_dylib");

        let core_path = crate::config::core_path();
        let target_path = get_target_dylib_path(lol_dir);

        unsafe {
            super::dylib::insert(
                core_path.to_str().unwrap(),
                target_path.to_str().unwrap(),
                false,
                true,
            )
        }
    }
}

pub fn uninstall_module(lol_dir: &amp;PathBuf) {
    restore_module(lol_dir);
}

</file>
<file name="loader/src-tauri/src/macos/socket.rs">
use std::net::SocketAddr;
use std::net::TcpStream;
use std::path::PathBuf;
use std::time::Duration;

use native_tls::TlsConnector;
use serde::{Deserialize, Serialize};
use serde_json::Value;
use tungstenite::client_tls_with_config;
use tungstenite::{client::IntoClientRequest, http::HeaderValue, Connector, Message};

use super::utils;
use crate::dprintln;

///
/// The method is quite simple.
/// 1. Get RiotClient command line.
/// 2. Subscribe to the RCS WebSocket (wamp).
/// 3. Listen to the League Client, track it starts and gets closing.
///
/// Install the core module on Client opening and uninstall it after closed.
/// Put them together in the daemon thread and follow active state from the app.
/// 
/// todo: track more events like client update
///

const TIMEOUT: Duration = Duration::from_millis(200);

#[derive(Serialize, Deserialize, Debug)]
struct Payload(i32, String, EventData);

#[derive(Serialize, Deserialize, Debug)]
#[allow(non_snake_case)]
struct EventData {
    pub data: Value,
    pub eventType: String,
    pub uri: String,
}

fn get_lol_dir(conf: &amp;Value) -> Option&lt;PathBuf> {
    if let Some(configuration) = conf.as_object() {
        if let Some(executable) = configuration.get("executable") {
            let path = executable
                .as_str()
                .unwrap()
                .replace("/LeagueClient.app/Contents/MacOS/LeagueClient", "")
                .replace("\"", "");
            return Some(PathBuf::from(path));
        }
    }
    None
}

/// Handle websocket json message.
fn process_message(json: &amp;str) {
    let payload: Payload = match serde_json::from_str(json) {
        Ok(v) => v,
        _ => {
            return;
        }
    };

    // the OnJsonApiEvent doesn't like trailing slash or underscore
    // should re-check the endpoint to make sure 'sessions/' has a slash
    // the last part is launch session ID but unused
    if payload.0 == 8 &amp;&amp; payload.2.uri.starts_with("/product-session/v1/sessions/") {
        if let Some(data) = payload.2.data.as_object() {
            if let (Some(product_id), Some(conf)) =
                (data.get("productId"), data.get("launchConfiguration"))
            {
                if product_id == "league_of_legends" {
                    if let Some(lol_dir) = get_lol_dir(conf) {
                        match payload.2.eventType.as_ref() {
                            "Create" => on_open_client(&amp;lol_dir),
                            "Delete" => on_close_client(&amp;lol_dir),
                            _ => (),
                        }
                    }
                }
            }
        }
    }
}

/// Connect to RSC websocket and process events synchronously.
fn connect(addr: &amp;SocketAddr, auth: &amp;String) -> Result&lt;(), std::io::Error> {
    // build request
    let url = format!("wss://{}", addr);
    let mut request = url.clone().into_client_request().unwrap();
    // add auth header
    request.headers_mut().insert(
        "Authorization",
        HeaderValue::from_str(&amp;format!("Basic {}", auth)).unwrap(),
    );

    // ignore certificate errors
    let tls = TlsConnector::from(
        native_tls::TlsConnector::builder()
            .danger_accept_invalid_certs(true)
            .build()
            .unwrap(),
    );

    // websocket stream
    let tcp_stream = TcpStream::connect_timeout(addr, TIMEOUT)?;
    let (mut stream, _) = client_tls_with_config(
        request.clone(),
        tcp_stream,
        None,
        Some(Connector::NativeTls(tls.clone())),
    )
    .expect("The TLS handshake should never fail");

    dprintln!("socket connected to {}", url);

    _ = stream.send(Message::text(
        // a perfect endpoint
        "[5, \"OnJsonApiEvent_product-session_v1_sessions\"]",
    ));

    loop {
        match stream.read() {
            Ok(Message::Text(json)) => {
                if json.is_empty() {
                    // the first empty string means success
                    dprintln!("socket event subscribed");
                } else {
                    process_message(json.as_str());
                }
            }
            Ok(Message::Close(_close)) => {
                dprintln!("socket closed: {:?}", _close);
                break;
            }
            Err(_e) => {
                dprintln!("socket error: {:?}", _e);
                break;
            }
            _ => {}
        }
    }

    Ok(())
}

pub fn run_daemon() {
    dprintln!("run socket daemon");
    std::thread::spawn(|| loop {
        if let Some((addr, auth)) = utils::get_riotclient_info() {
            if let Err(_e) = connect(&amp;addr, &amp;auth) {
                dprintln!("socket failed to connect: {:?}", _e);
            }
        }
        std::thread::sleep(TIMEOUT);
    });
}

fn on_open_client(lol_dir: &amp;PathBuf) {
    dprintln!("on_open_client@lol_dir: {}", lol_dir.display());
    if super::cmd_is_active() {
        super::core::install_module(lol_dir);
    }
}

fn on_close_client(lol_dir: &amp;PathBuf) {
    dprintln!("on_close_client@lol_dir: {}", lol_dir.display());
    super::core::uninstall_module(lol_dir);
}

</file>
<file name="loader/src-tauri/src/macos/startup.rs">
use auto_launch::{AutoLaunch, AutoLaunchBuilder};
use tauri::{
    plugin::{Builder, TauriPlugin},
    Manager, Runtime, State,
};

struct AutoLaunchManager(AutoLaunch);

impl AutoLaunchManager {
    pub fn set_enable(&amp;self, enable: bool) -> Result&lt;(), String> {
        if enable {
            self.0.enable()
        } else {
            self.0.disable()
        }
        .map_err(|e| e.to_string())
    }

    pub fn is_enabled(&amp;self) -> Result&lt;bool, String> {
        self.0.is_enabled().map_err(|e| e.to_string())
    }
}

#[tauri::command]
async fn is_enabled(manager: State&lt;'_, AutoLaunchManager>) -> Result&lt;bool, String> {
    manager.is_enabled()
}

#[tauri::command]
async fn set_enable(manager: State&lt;'_, AutoLaunchManager>, enable: bool) -> Result&lt;(), String> {
    manager.set_enable(enable)
}

pub fn init&lt;R: Runtime>() -> TauriPlugin&lt;R> {
    Builder::new("startup")
        .invoke_handler(tauri::generate_handler![is_enabled, set_enable])
        .setup(|app| {
            let mut builder = AutoLaunchBuilder::new();
            builder.set_app_name(&amp;app.package_info().name);
            builder.set_args(&amp;["--silent"]);
            builder.set_use_launch_agent(false);

            let exe_path = std::env::current_exe().unwrap();
            builder.set_app_path(&amp;exe_path.canonicalize()?.display().to_string());

            app.manage(AutoLaunchManager(
                builder.build().map_err(|e| e.to_string())?,
            ));

            Ok(())
        })
        .build()
}

</file>
<file name="loader/src-tauri/src/macos/webview.rs">
use std::os::raw::c_void;

use cocoa::{
    appkit::NSWindow,
    base::{id, nil},
};
use objc::declare::ClassDecl;
use objc::runtime::{Object, Sel};
use objc::{class, msg_send};
use objc::{sel, sel_impl};

/// Patch WKWebview to ignore certificate errors.

pub fn setup&lt;R: tauri::Runtime>(window: tauri::Window&lt;R>) {
    unsafe {
        let ns_window = window.ns_window().unwrap() as id;
        let content_view: id = ns_window.contentView(); // WryParentWebView
    
        let subviews: id = msg_send![content_view, subviews];
        let webview: id = msg_send![subviews, objectAtIndex: 0]; // WryWebView
    
        let cls = match ClassDecl::new("WKNavigationDelegate2", class!(NSObject)) {
            Some(mut cls) => {
            //   cls.add_ivar::&lt;*mut c_void>("function");
              cls.add_method(
                sel!(webView:didReceiveAuthenticationChallenge:completionHandler:),
                webview_did_receive_authentication_challenge as extern "C" fn(&amp;Object, Sel, id, id, id),
              );
              cls.register()
            }
            None => class!(WKNavigationDelegate),
          };
  
          let handler: id = msg_send![cls, new];
        //   let nav_handler_ptr = Box::into_raw(Box::new(nav_handler));
        //   (*handler).set_ivar("function", nav_handler_ptr as *mut _ as *mut c_void);

        // Set the delegate on the WebView
        //let _: () = msg_send![webview, setNavigationDelegate: handler];

    }
}

extern "C" fn webview_did_receive_authentication_challenge(
    _self: &amp;Object,
    _cmd: Sel,
    _webview: id,
    challenge: id,
    completion_handler: id,
) {
    unsafe {
        let name = (*_webview).class().name();
        println!("klass: {}", name);
    }
}

</file>
<file name="loader/src-tauri/src/macos/mod.rs">
use std::fs;
use std::path::PathBuf;
use std::sync::atomic::{AtomicBool, Ordering};
use tauri::{
    plugin::{Builder, TauriPlugin},
    App, AppHandle, Manager, Runtime,
};

mod core;
mod dylib;
mod socket;
mod startup;
mod tray;
mod utils;

static ACTIVE: AtomicBool = AtomicBool::new(false);

fn active_file_path() -> PathBuf {
    super::config::base_dir().join("active")
}

fn set_active(active: bool) {
    ACTIVE.store(active, Ordering::SeqCst);
    _ = fs::write(active_file_path(), if active { "1" } else { "0" });
}

#[tauri::command]
pub fn cmd_is_active() -> bool {
    ACTIVE.load(Ordering::SeqCst)
}

#[tauri::command]
pub fn cmd_set_active&lt;R: Runtime>(app: AppHandle&lt;R>, active: bool) {
    set_active(active);
    _ = app.emit_all("active-status", active);
    tray::set_active_check(app, active);
}

fn initialize&lt;R: Runtime>(app: &amp;App&lt;R>) {
    let window = super::build_window(app);
    utils::hide_title_bar(window.ns_window().unwrap());
    utils::hide_traffic_lights(window.ns_window().unwrap());

    utils::set_app_delegate_hook(move || {
        window.center().unwrap();
        window.show().unwrap();
    });

    cmd_set_active(
        app.app_handle(),
        match fs::read_to_string(active_file_path()) {
            Ok(value) => value == "1",
            _ => false,
        },
    );

    socket::run_daemon();
}

fn plugin&lt;R: Runtime>() -> TauriPlugin&lt;R> {
    Builder::new("macos")
        .invoke_handler(tauri::generate_handler![cmd_is_active, cmd_set_active,])
        .build()
}

impl&lt;R: Runtime> super::CustomBuild for tauri::Builder&lt;R> {
    fn setup_platform(self) -> Self {
        self.system_tray(tray::create())
            .on_system_tray_event(tray::handle_event)
            .setup(|app| {
                initialize(app);
                Ok(())
            })
            .plugin(plugin())
            .plugin(startup::init())
    }
}

</file>
<file name="loader/src-tauri/src/windows/utils.rs">
use std::{io::Error, path::PathBuf};
use winreg::{
    enums::{HKEY_LOCAL_MACHINE, KEY_READ},
    RegKey,
};

/// Check if Developer Mode is active.
pub fn is_developer() -> bool {
    let hklm = RegKey::predef(HKEY_LOCAL_MACHINE);
    const REG_PATH: &amp;str = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock";

    if let Ok(key) = hklm.open_subkey_with_flags(REG_PATH, KEY_READ) {
        if let Ok(value) = key.get_value("AllowDevelopmentWithoutDevLicense") as Result&lt;u32, Error>
        {
            return value == 1;
        }
    }

    false
}

/// Check if the running process is admin.
pub fn is_admin() -> bool {
    is_elevated::is_elevated()
}

/// Fix borderless window shadow.
/// Don't use windows_sys because dependencies hell.
pub fn enable_shadow(hwnd: isize) {
    use libc::c_void;

    #[repr(C)]
    struct MARGINS {
        left: i32,
        right: i32,
        top: i32,
        bottom: i32,
    }

    #[link(name = "dwmapi")]
    extern "C" {
        fn DwmExtendFrameIntoClientArea(hwnd: isize, pMarInset: *const MARGINS) -> i32;
        fn DwmSetWindowAttribute(
            hwnd: isize,
            dwAttribute: i32,
            pvAttribute: *const c_void,
            cbAttribute: u32,
        );
    }

    unsafe {
        DwmSetWindowAttribute(hwnd, 2, &amp;2 as *const _ as _, 4);
        let margins = MARGINS {
            left: 0,
            right: 0,
            top: 1,
            bottom: 0,
        };
        DwmExtendFrameIntoClientArea(hwnd, &amp;margins);
    }
}

/// Check if webview2 is installed or not.
pub fn is_webview2_installed() -> bool {
    let hklm = RegKey::predef(HKEY_LOCAL_MACHINE);
    const REG_KEY: &amp;str =
        r"SOFTWARE\WOW6432Node\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}";

    if let Ok(key) = hklm.open_subkey_with_flags(REG_KEY, KEY_READ) {
        if let Ok(location) = key.get_value("location") as Result&lt;String, Error> {
            if let Ok(pv) = key.get_value("pv") as Result&lt;String, Error> {
                let exe_path = [&amp;location, &amp;pv, "msedge.exe"].join("\\");
                return PathBuf::from(exe_path).exists();
            }
        }
    }

    false
}

</file>
<file name="loader/src-tauri/src/windows/mod_ifeo.rs">
use std::io::Error;
use winreg::{enums::*, RegKey};

use super::{ActivationResult, ActivationStage};
use crate::config;

const IFEO_PATH: &amp;str =
    "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options";
const TARGET_EXE: &amp;str = "LeagueClientUx.exe";

/// HKLM
/// \ IFEO
///   \ LeagueClientUx.exe
///     + Debugger = rundll32 "path\to\core.dll", entry

fn extract_path(value: &amp;String) -> Option&lt;String> {
    if let Some(start) = value.find('"') {
        if let Some(end) = value[start + 1..].find('"') {
            return Some(value[start + 1..start + 1 + end].to_string());
        }
    }
    None
}

fn normalize_path(path: &amp;String) -> String {
    path.to_lowercase().replace('/', "\\")
}

/// Debugger value for IFEO target subkey.
fn get_debugger_value() -> String {
    const DLL_ENTRY: &amp;str = "#6000";
    let dll_path = config::core_path();
    format!("rundll32 \"{}\", {}", dll_path.display(), DLL_ENTRY)
}

/// Check if the core module is activated.
pub fn is_activated() -> bool {
    let hklm = RegKey::predef(HKEY_LOCAL_MACHINE);
    let path = [IFEO_PATH, TARGET_EXE].join("\\");

    // open lcux target
    if let Ok(key) = hklm.open_subkey_with_flags(path, KEY_READ) {
        // read debugger value
        if let Ok(value) = key.get_value("Debugger") as Result&lt;String, Error> {
            // the debuger value must use rundll32
            if value.to_lowercase().starts_with("rundll32") {
                // extract the path from debugger value
                if let Some(debugger_path) = extract_path(&amp;value) {
                    // compare two paths
                    return normalize_path(&amp;debugger_path)
                        == normalize_path(
                            &amp;config::core_path().into_os_string().into_string().unwrap(),
                        );
                }
            }
        }
    }

    false
}

/// Perform IFEO activation.
/// Requires admin rights.
pub fn do_activate(active: bool) -> ActivationResult {
    let hklm = RegKey::predef(HKEY_LOCAL_MACHINE);
    let ifeo = match hklm.open_subkey_with_flags(IFEO_PATH, KEY_CREATE_SUB_KEY) {
        Ok(sk) => sk,
        Err(err) => return Err((ActivationStage::OpenIFEO, err.kind())),
    };

    let lcux = match ifeo.create_subkey_with_flags(TARGET_EXE, KEY_SET_VALUE) {
        Ok(subkey) => subkey.0,
        Err(err) => return Err((ActivationStage::CreateTarget, err.kind())),
    };

    if active {
        let value = get_debugger_value();
        match lcux.set_value("Debugger", &amp;value) {
            Ok(()) => Ok(()),
            Err(err) => Err((ActivationStage::SetDebugger, err.kind())),
        }
    } else {
        match lcux.delete_value("Debugger") {
            Ok(()) => Ok(()),
            Err(err) => Err((ActivationStage::DeleteDebugger, err.kind())),
        }
    }
}

</file>
<file name="loader/src-tauri/src/windows/mod_symlink.rs">
use std::fs::read_link;
use std::io::ErrorKind;
use std::os::windows::fs::symlink_file;
use std::path::PathBuf;

use super::{ActivationResult, ActivationStage};
use crate::config;

/// The symlink filename in LoL folder.
/// It must not be loaded by LeagueClient due to Vanguard.
/// The supported are d3d9.dll, dwrite.dll, version.dll.
const TARGET_FNAME: &amp;str = "version.dll";

/// Check if a file path is symlink or not.
fn is_symlink(path: &amp;PathBuf) -> bool {
    if let Ok(metadata) = std::fs::symlink_metadata(path) {
        metadata.file_type().is_symlink()
    } else {
        false
    }
}

/// The symlink path to be installed in LoL folder.
fn get_symlink_path() -> Option&lt;PathBuf> {
    match config::league_dir() {
        Some(dir) => Some(dir.join(TARGET_FNAME).to_path_buf()),
        _ => None,
    }
}

/// Check if the symlink is installed or not.
pub fn is_activated() -> bool {
    if let Some(link_path) = get_symlink_path() {
        if link_path.exists() &amp;&amp; is_symlink(&amp;link_path) {
            if let Ok(target_path) = read_link(link_path) {
                // compare target path with core path
                return target_path == config::core_path();
            }
        }
    }
    false
}

/// Perform symlink activation.
/// Requires admin rights or Developer Mode when `active` is true.
pub fn do_activate(active: bool) -> ActivationResult {
    if let Some(link_path) = get_symlink_path() {
        if active {
            let orig_path = crate::config::core_path();
            match symlink_file(orig_path, link_path) {
                Ok(()) => Ok(()),
                Err(err) => Err((ActivationStage::CreateSymlink, err.kind())),
            }
        } else {
            if link_path.exists() {
                match std::fs::remove_file(link_path) {
                    Ok(()) => Ok(()),
                    Err(err) => Err((ActivationStage::DeleteSymlink, err.kind())),
                }
            } else {
                Ok(())
            }
        }
    } else {
        Err((ActivationStage::GetLeaguePath, ErrorKind::NotFound))
    }
}

</file>
<file name="loader/src-tauri/src/windows/mod.rs">
use core::fmt;
use std::io::ErrorKind;
use tauri::{
    plugin::{Builder, TauriPlugin},
    Runtime,
};

mod mod_ifeo;
mod mod_symlink;
mod utils;

/// Enabling activation requires admin rights,
/// so we should encode the result to exitcode
/// when spawning a new process.

#[derive(Debug, Clone, Copy)]
enum ActivationStage {
    OpenIFEO = 1,
    CreateTarget,
    SetDebugger,
    DeleteDebugger,
    GetLeaguePath,
    CreateSymlink,
    DeleteSymlink,
    RunElevated,
}

impl fmt::Display for ActivationStage {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

type ActivationResult = Result&lt;(), (ActivationStage, ErrorKind)>;

fn result_to_string(ret: ActivationResult) -> String {
    match ret {
        Ok(()) => format!(""),
        Err((stage, kind)) => {
            format!(
                "{} ({})",
                stage.to_string(),
                kind.to_string().replace(" ", "_")
            )
        }
    }
}

fn encode_result(ret: ActivationResult) -> i32 {
    match ret {
        Ok(()) => 0,
        Err((stage, kind)) => ((stage as i32) &lt;&lt; 8) | (kind as i32),
    }
}

fn decode_result(code: i32) -> ActivationResult {
    if code == 0 {
        Ok(())
    } else {
        let stage =
            unsafe { std::mem::transmute::&lt;i8, ActivationStage>(((code >> 8) &amp; 0xff) as i8) };
        let kind = unsafe { std::mem::transmute::&lt;i8, ErrorKind>((code &amp; 0xff) as i8) };
        Err((stage, kind))
    }
}

fn do_activate(symlink: bool, active: bool) -> ActivationResult {
    if symlink {
        mod_symlink::do_activate(active)
    } else {
        mod_ifeo::do_activate(active)
    }
}

#[tauri::command]
fn core_is_activated(symlink: bool) -> bool {
    if symlink {
        mod_symlink::is_activated()
    } else {
        mod_ifeo::is_activated()
    }
}

/// Do activate command.
#[tauri::command]
fn core_do_activate(symlink: bool, active: bool) -> String {
    // elevated process
    // or disabling symlink
    // or symlink with devmode
    if utils::is_admin() || (symlink &amp;&amp; !active) || (symlink &amp;&amp; utils::is_developer()) {
        return result_to_string(do_activate(symlink, active));
    }

    // must spawn a thread to avoid UAC freezing
    let result = std::thread::spawn(move || -> ActivationResult {
        match runas::Command::new(std::env::current_exe().unwrap())
            .arg(if active { "--install" } else { "--uninstall" })
            .arg(if symlink { "--symlink" } else { "" })
            .show(false)
            .status()
        {
            Ok(status) => {
                let code = status.code().unwrap_or(-1);
                if code &lt; 0 {
                    Err((ActivationStage::RunElevated, ErrorKind::PermissionDenied))
                } else {
                    decode_result(code)
                }
            }
            Err(err) => Err((ActivationStage::RunElevated, err.kind())),
        }
    })
    .join()
    .unwrap();

    result_to_string(result)
}

fn plugin&lt;R: Runtime>() -> TauriPlugin&lt;R> {
    Builder::new("windows")
        .invoke_handler(tauri::generate_handler![
            core_is_activated,
            core_do_activate,
        ])
        .build()
}

impl&lt;R: Runtime> super::CustomBuild for tauri::Builder&lt;R> {
    fn setup_platform(self) -> Self {
        self.setup(|app| {
            let window = super::build_window(app);
            utils::enable_shadow(window.hwnd().unwrap().0);
            Ok(())
        })
        .plugin(plugin())
    }
}

pub fn do_entry() {
    let args: Vec&lt;String> = std::env::args().collect();
    let mut avtive_value: Option&lt;bool> = None;

    if args.len() > 1 {
        if args[1] == "--install" {
            avtive_value = Some(true);
        } else if args[1] == "--uninstall" {
            avtive_value = Some(false);
        }
    }

    if let Some(active) = avtive_value {
        let symlink = args.len() > 2 &amp;&amp; args[2] == "--symlink";
        let result = do_activate(symlink, active);
        std::process::exit(encode_result(result))
    }

    if !utils::is_webview2_installed() {
        #[link(name = "user32")]
        extern "system" {
            fn MessageBoxA(_: isize, message: *const u8, caption: *const u8, flags: u32) -> i32;
        }
        unsafe {
            MessageBoxA(
                0,
                "WebView2 is not installed on your system.\n\
                Please install WebView2 to run the app.\0"
                    .as_ptr(),
                "Pengu Loader\0".as_ptr(),
                0x30,
            );
        }
        std::process::exit(1)
    }
}

</file>
<file name="loader/.vscode/settings.json">
{
  "files.exclude": {
    "dist/": true,
    "node_modules/": true,
    "src-tauri/target": true,
  },
  "editor.tabSize": 2,
  "typescript.preferences.quoteStyle": "single",
  "typescript.format.semicolons": "remove",
  "javascript.preferences.quoteStyle": "single",
  // "rust-analyzer.checkOnSave": true,
  // "rust-analyzer.diagnostics.enable": true,
  "[rust]": {
    "editor.tabSize": 4,
  },
}
</file>
<file name="loader/.vscode/extensions.json">
{
  "recommendations": [
    "tauri-apps.tauri-vscode",
    "rust-lang.rust-analyzer"
  ]
}
</file>
<file name=".github/FUNDING.yml">
github: [nomi-san]

</file>
<file name=".github/workflows/build.yml">
on:
  push:
    branches:
      - main
      - dev
      - release/*
  workflow_dispatch:

jobs:
  build:
    name: build-${{ matrix.platform }}
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows
            os: windows-2022
            shell: bash
            tauri_args: ""
          - platform: macos
            os: macos-latest
            shell: sh
            tauri_args: --target universal-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: true

      - name: Prepare environment variables
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "APP_VERSION=`node -p "require('./loader/package.json').version"`" >> $GITHUB_ENV

      - name: Setup MSBuild
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-latest' &amp;&amp; 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Setup Rust build cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "loader/src-tauri -> target"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: |
            - recursive: true

      - name: Build preload plugins
        run: |
          cd plugins
          pnpm build

      - name: Build core (windows)
        if: runner.os == 'Windows'
        run: msbuild.exe pengu.sln -t:build -p:Configuration=Release -p:Platform=x64

      - name: Build core (macos)
        if: runner.os == 'macOS'
        run: make release

      - name: Build loader
        uses: tauri-apps/tauri-action@v0
        with:
          projectPath: "loader"
          args: ${{ matrix.tauri_args }}

      - name: Move loader output (windows)
        if: runner.os == 'Windows'
        run: |
          cp "loader/src-tauri/target/release/Pengu Loader.exe" bin/

      - name: Move loader output (macos)
        if: runner.os == 'macOS'
        run: |
          cp -r "loader/src-tauri/target/universal-apple-darwin/release/bundle/macos/Pengu Loader.app" bin/
          cp "loader/src-tauri/target/universal-apple-darwin/release/bundle/dmg/"*.dmg bin/

      - name: Upload build output
        uses: actions/upload-artifact@v4
        with:
          name: pengu-v${{ env.APP_VERSION }}-dev-${{ env.SHORT_SHA }}-${{ matrix.platform }}
          path: |
            bin/
            !bin/obj/

</file>
<file name="plugins/vite.config.ts">
import path from 'node:path';
import fs from 'node:fs/promises';
import { defineConfig } from 'vite';
import { build } from 'esbuild';

// Vite plugins
import mkcert from 'vite-plugin-mkcert';
import solidPlugin from 'vite-plugin-solid';
import bundleCssInJs from 'vite-plugin-css-injected-by-js';
import viteRestart from 'vite-plugin-restart';

const port = 3001;
const root = (...args: string[]) => path.join(__dirname, ...args);

export default defineConfig(({ command, mode }) => {

  const dev = command === 'serve'
    || mode === 'development';

  return {
    publicDir: false,
    server: {
      https: true,
      port: port
    },
    esbuild: {
      legalComments: 'none',
    },
    build: {
      assetsInlineLimit: 1024 * 64,
      minify: !dev,
      modulePreload: false,
      lib: {
        name: 'preload',
        entry: 'src/index.ts',
        formats: ['iife']
      },
      rollupOptions: {
        output: {
          format: 'iife',
          sourcemap: dev ? 'inline' : false,
          entryFileNames: 'preload.js'
        }
      }
    },
    plugins: [
      mkcert(),
      solidPlugin(),
      bundleCssInJs({
        topExecutionPriority: false,
        injectCodeFunction: function (css) {
          document.addEventListener('DOMContentLoaded', function () {
            const style = document.createElement('style');
            style.appendChild(document.createTextNode(css));
            document.head.appendChild(style);
          });
        }
      }),
      viteRestart({
        restart: 'src/preload/**/*.ts'
      }),
      {
        name: 'pengu-serve',
        apply: 'serve',
        enforce: 'post',
        transform(code, id) {
          if (/\.(ts|tsx)$/i.test(id)) return;
          return code.replace(/\/src\//g, `https://localhost:${port}/src/`)
        },
        async configResolved() {
          await build({
            entryPoints: [root('src/preload/index.ts')],
            outfile: root('dist/preload.js'),
            bundle: true,
            format: 'iife',
            sourcemap: 'inline',
            footer: {
              'js': generateDevLoader(port)
            }
          });
        },
      },
      {
        name: 'pengu-build',
        apply: 'build',
        enforce: 'post',
        async closeBundle() {
          const code = await fs.readFile(root('dist/preload.js'), 'utf-8');
          const header = generateHeader(code, 'preload_script');
          await fs.writeFile(root('dist/preload.g.h'), header, 'utf-8');
        }
      }
    ]
  }
});

function generateDevLoader(port: number) {
  const template = function (port) {
    document.addEventListener('DOMContentLoaded', async () => {
      // @ts-ignore
      await import(`https://localhost:${port}/@vite/client`);
      // @ts-ignore
      await import(`https://localhost:${port}/src/views/index.tsx`);
    });
  }
  return `!(${template.toString()})(${port});`;
}

function generateHeader(code: string, name: string, lineLength = 12) {
  const bytes = [...Buffer.from(code, 'utf-8')]
    .map(c => '0x' + c.toString(16).padStart(2, '0'));

  const formatted = Array&lt;string>();
  for (let i = 0; i &lt; bytes.length; i += lineLength) {
    const line = bytes.slice(i, i + lineLength).join(', ');
    formatted.push(line);
  }

  return `#ifndef _${name.toUpperCase()}_H_
#define _${name.toUpperCase()}_H_

static const unsigned int _${name}_size = ${bytes.length};

static const unsigned char _${name}[${bytes.length + 1}] = {
  ${formatted.join(',\n  ')}
};

#endif`
}
</file>
<file name="plugins/README.md">
## What's it?

This folder is the source code of the preload scripts and built-in plugins.

### Tech stacks

![](https://skillicons.dev/icons?i=vite,ts,solidjs,tailwind)

- **Vite** - dev server, build tool and bundler.
- **TypeScript** - typesafe!
- **SolidJS** - high performance JSX embedded views, no vDOM!
- **Tailwind** - no more CSS!

## Developing

We have two folders in `src`

- preload: pofyfill, loader and hook scripts
- views: SolidJS app - a successor of the previous @default plugin

First, you need to build the core module in `Debug` mode.

Second, install dependencies:

```
pnpm install
```

Then run the dev server:

```
pnpm dev
```

Now start your **League Client** to get the result. Additionally, you can open
https://localhost:3001 in a web browser to test the views.

Any changes of views will perform hot-replacement in DOM. With preload script
changes, it will reload entire client.

If you need to modify the `preload` only, run dev build and reload the client
manually.

```
pnpm build-dev
```

> Don't touch vite.config.ts without knowing it.

## Building production

Run build

```
pnpm build
```

To embed the scripts into the core module, you should build it in `Release`
mode.

</file>
<file name="plugins/twind.config.ts">
import { defineConfig } from '@twind/core';
import presetAutoprefix from '@twind/preset-autoprefix';
import presetTailwind from '@twind/preset-tailwind';

export default defineConfig({
  presets: [
    presetAutoprefix(),
    presetTailwind(),
  ],
});
</file>
<file name="plugins/package.json">
{
  "name": "pengujs",
  "private": true,
  "version": "1.2.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build-dev": "tsc &amp;&amp; vite build -m development",
    "build": "tsc &amp;&amp; vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@twind/core": "^1.1.3",
    "@twind/preset-autoprefix": "^1.0.7",
    "@twind/preset-tailwind": "^1.1.4",
    "@twind/with-web-components": "^1.1.3",
    "fuse.js": "^6.6.2",
    "snarkdown": "^2.0.0",
    "solid-js": "^1.7.8",
    "solid-toast": "^0.5.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "esbuild": "^0.18.12",
    "typescript": "^4.9.5",
    "vite": "^5.3.1",
    "vite-plugin-css-injected-by-js": "^3.2.0",
    "vite-plugin-mkcert": "^1.16.0",
    "vite-plugin-restart": "^0.4.1",
    "vite-plugin-solid": "^2.8.0"
  }
}
</file>
<file name="plugins/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "CommonJS",
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "skipLibCheck": true,
    "experimentalDecorators": true,
    /* Bundler mode */
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",
    "jsxImportSource": "solid-js",
    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": false
  },
  "include": [
    "src"
  ]
}
</file>
<file name="plugins/tailwind.config.ts">
// just keep tailwind's intellisense
export default {
  content: [
    './index.html',
    './src/**/*.{ts,tsx,css,html,scss}',
  ],
}
</file>
<file name="plugins/pnpm-lock.yaml">
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@twind/core':
        specifier: ^1.1.3
        version: 1.1.3(typescript@4.9.5)
      '@twind/preset-autoprefix':
        specifier: ^1.0.7
        version: 1.0.7(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5)
      '@twind/preset-tailwind':
        specifier: ^1.1.4
        version: 1.1.4(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5)
      '@twind/with-web-components':
        specifier: ^1.1.3
        version: 1.1.3(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5)
      fuse.js:
        specifier: ^6.6.2
        version: 6.6.2
      snarkdown:
        specifier: ^2.0.0
        version: 2.0.0
      solid-js:
        specifier: ^1.7.8
        version: 1.7.8
      solid-toast:
        specifier: ^0.5.0
        version: 0.5.0(solid-js@1.7.8)
    devDependencies:
      '@types/node':
        specifier: ^20
        version: 20.16.1
      esbuild:
        specifier: ^0.18.12
        version: 0.18.12
      typescript:
        specifier: ^4.9.5
        version: 4.9.5
      vite:
        specifier: ^5.3.1
        version: 5.4.2(@types/node@20.16.1)
      vite-plugin-css-injected-by-js:
        specifier: ^3.2.0
        version: 3.2.0(vite@5.4.2(@types/node@20.16.1))
      vite-plugin-mkcert:
        specifier: ^1.16.0
        version: 1.16.0(vite@5.4.2(@types/node@20.16.1))
      vite-plugin-restart:
        specifier: ^0.4.1
        version: 0.4.1(vite@5.4.2(@types/node@20.16.1))
      vite-plugin-solid:
        specifier: ^2.8.0
        version: 2.10.2(solid-js@1.7.8)(vite@5.4.2(@types/node@20.16.1))

packages:

  '@ampproject/remapping@2.2.1':
    resolution: {integrity: sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==}
    engines: {node: '>=6.0.0'}

  '@babel/code-frame@7.24.7':
    resolution: {integrity: sha512-BcYH1CVJBO9tvyIZ2jVeXgSIMvGZ2FDRvDdOIVQyuklNKSsx+eppDEBq/g47Ayw+RqNFE+URvOShmf+f/qwAlA==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.25.4':
    resolution: {integrity: sha512-+LGRog6RAsCJrrrg/IO6LGmpphNe5DiK30dGjCoxxeGv49B10/3XYGxPsAwrDlMFcFEvdAUavDT8r9k/hSyQqQ==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.25.2':
    resolution: {integrity: sha512-BBt3opiCOxUr9euZ5/ro/Xv8/V7yJ5bjYMqG/C1YAo8MIKAnumZalCN+msbci3Pigy4lIQfPUpfMM27HMGaYEA==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.25.5':
    resolution: {integrity: sha512-abd43wyLfbWoxC6ahM8xTkqLpGB2iWBVyuKC9/srhFunCd1SDNrV1s72bBpK4hLj8KLzHBBcOblvLQZBNw9r3w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.25.2':
    resolution: {integrity: sha512-U2U5LsSaZ7TAt3cfaymQ8WHh0pxvdHoEk6HVpaexxixjyEquMh0L0YNJNM6CTGKMXV1iksi0iZkGw4AcFkPaaw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.18.6':
    resolution: {integrity: sha512-0NFvs3VkuSYbFi1x2Vd6tKrywq+z/cLeYC/RJNFrIX/30Bf5aiGYbtvGXolEktzJH8o5E5KJ3tT+nkxuuZFVlA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.24.7':
    resolution: {integrity: sha512-8AyH3C+74cgCVVXow/myrynrAGv+nTVg5vKu2nZph9x7RcRwzmh0VFallJuFTZ9mx6u4eSdXZfcOzSqTUm0HCA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.25.2':
    resolution: {integrity: sha512-BjyRAbix6j/wv83ftcVJmBt72QtHI56C7JXZoG2xATiLpmoC7dpd8WnkikExHDVPpi/3qCmO6WY1EaXOluiecQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-plugin-utils@7.22.5':
    resolution: {integrity: sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-simple-access@7.24.7':
    resolution: {integrity: sha512-zBAIvbCMh5Ts+b86r/CjU+4XGYIs+R1j951gxI3KmmxBMhCg4oQMsv6ZXQ64XOm/cvzfU1FmoCyt6+owc5QMYg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.22.5':
    resolution: {integrity: sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.24.8':
    resolution: {integrity: sha512-pO9KhhRcuUyGnJWwyEgnRJTSIZHiT+vMD0kPeD+so0l7mxkMT19g3pjY9GTnHySck/hDzq+dtW/4VgnMkippsQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.22.5':
    resolution: {integrity: sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.24.7':
    resolution: {integrity: sha512-rR+PBcQ1SMQDDyF6X0wxtG8QyLCgUB0eRAGguqRLfkCA87l7yAP7ehq8SNj96OOGTO8OBV70KhuFYcIkHXOg0w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.24.8':
    resolution: {integrity: sha512-xb8t9tD1MHLungh/AIoWYN+gVHaB9kwlu8gffXGSt3FFEIT7RjS+xWbc2vUD1UTZdIpKj/ab3rdqJ7ufngyi2Q==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.25.0':
    resolution: {integrity: sha512-MjgLZ42aCm0oGjJj8CtSM3DB8NOOf8h2l7DCTePJs29u+v7yO/RBX9nShlKMgFnRks/Q4tBAe7Hxnov9VkGwLw==}
    engines: {node: '>=6.9.0'}

  '@babel/highlight@7.24.7':
    resolution: {integrity: sha512-EStJpq4OuY8xYfhGVXngigBJRWxftKX9ksiGDnmlY3o7B/V7KIAc9X4oiK87uPJSc/vs5L869bem5fhZa8caZw==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.22.7':
    resolution: {integrity: sha512-7NF8pOkHP5o2vpmGgNGcfAeCvOYhGLyA3Z4eBQkT1RJlWu47n63bCs93QfJ2hIAFCil7L5P2IWhs1oToVgrL0Q==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/parser@7.25.4':
    resolution: {integrity: sha512-nq+eWrOgdtu3jG5Os4TQP3x3cLA8hR8TvJNjD8vnPa20WGycimcparWnLK4jJhElTK6SDyuJo1weMKO/5LpmLA==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-syntax-jsx@7.22.5':
    resolution: {integrity: sha512-gvyP4hZrgrs/wWMaocvxZ44Hw0b3W8Pe+cMxc8V1ULQ07oh8VNbIRaoD1LRZVTvD+0nieDKjfgKg89sD7rrKrg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/template@7.25.0':
    resolution: {integrity: sha512-aOOgh1/5XzKvg1jvVz7AVrx2piJ2XBi227DHmbY6y+bM9H2FlN+IfecYu4Xl0cNiiVejlsCri89LUsbj8vJD9Q==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.25.4':
    resolution: {integrity: sha512-VJ4XsrD+nOvlXyLzmLzUs/0qjFS4sK30te5yEFlvbbUNEgKaVb2BHZUpAL+ttLPQAHNrsI3zZisbfha5Cvr8vg==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.22.5':
    resolution: {integrity: sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.25.4':
    resolution: {integrity: sha512-zQ1ijeeCXVEh+aNL0RlmkPkG8HUiDcU2pzQQFjtbntgAczRASFzj4H+6+bV+dy1ntKR14I/DypeuRG1uma98iQ==}
    engines: {node: '>=6.9.0'}

  '@esbuild/aix-ppc64@0.21.5':
    resolution: {integrity: sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.18.12':
    resolution: {integrity: sha512-BMAlczRqC/LUt2P97E4apTBbkvS9JTJnp2DKFbCwpZ8vBvXVbNdqmvzW/OsdtI/+mGr+apkkpqGM8WecLkPgrA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm64@0.21.5':
    resolution: {integrity: sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.18.12':
    resolution: {integrity: sha512-LIxaNIQfkFZbTLb4+cX7dozHlAbAshhFE5PKdro0l+FnCpx1GDJaQ2WMcqm+ToXKMt8p8Uojk/MFRuGyz3V5Sw==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-arm@0.21.5':
    resolution: {integrity: sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.18.12':
    resolution: {integrity: sha512-zU5MyluNsykf5cOJ0LZZZjgAHbhPJ1cWfdH1ZXVMXxVMhEV0VZiZXQdwBBVvmvbF28EizeK7obG9fs+fpmS0eQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/android-x64@0.21.5':
    resolution: {integrity: sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.18.12':
    resolution: {integrity: sha512-zUZMep7YONnp6954QOOwEBwFX9svlKd3ov6PkxKd53LGTHsp/gy7vHaPGhhjBmEpqXEXShi6dddjIkmd+NgMsA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-arm64@0.21.5':
    resolution: {integrity: sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.18.12':
    resolution: {integrity: sha512-ohqLPc7i67yunArPj1+/FeeJ7AgwAjHqKZ512ADk3WsE3FHU9l+m5aa7NdxXr0HmN1bjDlUslBjWNbFlD9y12Q==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/darwin-x64@0.21.5':
    resolution: {integrity: sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.18.12':
    resolution: {integrity: sha512-GIIHtQXqgeOOqdG16a/A9N28GpkvjJnjYMhOnXVbn3EDJcoItdR58v/pGN31CHjyXDc8uCcRnFWmqaJt24AYJg==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-arm64@0.21.5':
    resolution: {integrity: sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.18.12':
    resolution: {integrity: sha512-zK0b9a1/0wZY+6FdOS3BpZcPc1kcx2G5yxxfEJtEUzVxI6n/FrC2Phsxj/YblPuBchhBZ/1wwn7AyEBUyNSa6g==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.21.5':
    resolution: {integrity: sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.18.12':
    resolution: {integrity: sha512-JKgG8Q/LL/9sw/iHHxQyVMoQYu3rU3+a5Z87DxC+wAu3engz+EmctIrV+FGOgI6gWG1z1+5nDDbXiRMGQZXqiw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm64@0.21.5':
    resolution: {integrity: sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.18.12':
    resolution: {integrity: sha512-y75OijvrBE/1XRrXq1jtrJfG26eHeMoqLJ2dwQNwviwTuTtHGCojsDO6BJNF8gU+3jTn1KzJEMETytwsFSvc+Q==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-arm@0.21.5':
    resolution: {integrity: sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.18.12':
    resolution: {integrity: sha512-yoRIAqc0B4lDIAAEFEIu9ttTRFV84iuAl0KNCN6MhKLxNPfzwCBvEMgwco2f71GxmpBcTtn7KdErueZaM2rEvw==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-ia32@0.21.5':
    resolution: {integrity: sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.18.12':
    resolution: {integrity: sha512-qYgt3dHPVvf/MgbIBpJ4Sup/yb9DAopZ3a2JgMpNKIHUpOdnJ2eHBo/aQdnd8dJ21X/+sS58wxHtA9lEazYtXQ==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-loong64@0.21.5':
    resolution: {integrity: sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.18.12':
    resolution: {integrity: sha512-wHphlMLK4ufNOONqukELfVIbnGQJrHJ/mxZMMrP2jYrPgCRZhOtf0kC4yAXBwnfmULimV1qt5UJJOw4Kh13Yfg==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-mips64el@0.21.5':
    resolution: {integrity: sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.18.12':
    resolution: {integrity: sha512-TeN//1Ft20ZZW41+zDSdOI/Os1bEq5dbvBvYkberB7PHABbRcsteeoNVZFlI0YLpGdlBqohEpjrn06kv8heCJg==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-ppc64@0.21.5':
    resolution: {integrity: sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.18.12':
    resolution: {integrity: sha512-AgUebVS4DoAblBgiB2ACQ/8l4eGE5aWBb8ZXtkXHiET9mbj7GuWt3OnsIW/zX+XHJt2RYJZctbQ2S/mDjbp0UA==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-riscv64@0.21.5':
    resolution: {integrity: sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.18.12':
    resolution: {integrity: sha512-dJ3Rb3Ei2u/ysSXd6pzleGtfDdc2MuzKt8qc6ls8vreP1G3B7HInX3i7gXS4BGeVd24pp0yqyS7bJ5NHaI9ing==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-s390x@0.21.5':
    resolution: {integrity: sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.18.12':
    resolution: {integrity: sha512-OrNJMGQbPaVyHHcDF8ybNSwu7TDOfX8NGpXCbetwOSP6txOJiWlgQnRymfC9ocR1S0Y5PW0Wb1mV6pUddqmvmQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/linux-x64@0.21.5':
    resolution: {integrity: sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-x64@0.18.12':
    resolution: {integrity: sha512-55FzVCAiwE9FK8wWeCRuvjazNRJ1QqLCYGZVB6E8RuQuTeStSwotpSW4xoRGwp3a1wUsaVCdYcj5LGCASVJmMg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.21.5':
    resolution: {integrity: sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-x64@0.18.12':
    resolution: {integrity: sha512-qnluf8rfb6Y5Lw2tirfK2quZOBbVqmwxut7GPCIJsM8lc4AEUj9L8y0YPdLaPK0TECt4IdyBdBD/KRFKorlK3g==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.21.5':
    resolution: {integrity: sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.18.12':
    resolution: {integrity: sha512-+RkKpVQR7bICjTOPUpkTBTaJ4TFqQBX5Ywyd/HSdDkQGn65VPkTsR/pL4AMvuMWy+wnXgIl4EY6q4mVpJal8Kg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/sunos-x64@0.21.5':
    resolution: {integrity: sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.18.12':
    resolution: {integrity: sha512-GNHuciv0mFM7ouzsU0+AwY+7eV4Mgo5WnbhfDCQGtpvOtD1vbOiRjPYG6dhmMoFyBjj+pNqQu2X+7DKn0KQ/Gw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-arm64@0.21.5':
    resolution: {integrity: sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.18.12':
    resolution: {integrity: sha512-kR8cezhYipbbypGkaqCTWIeu4zID17gamC8YTPXYtcN3E5BhhtTnwKBn9I0PJur/T6UVwIEGYzkffNL0lFvxEw==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-ia32@0.21.5':
    resolution: {integrity: sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.18.12':
    resolution: {integrity: sha512-O0UYQVkvfM/jO8a4OwoV0mAKSJw+mjWTAd1MJd/1FCX6uiMdLmMRPK/w6e9OQ0ob2WGxzIm9va/KG0Ja4zIOgg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@esbuild/win32-x64@0.21.5':
    resolution: {integrity: sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@jridgewell/gen-mapping@0.3.3':
    resolution: {integrity: sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/gen-mapping@0.3.5':
    resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.0':
    resolution: {integrity: sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.1.2':
    resolution: {integrity: sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.4.14':
    resolution: {integrity: sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==}

  '@jridgewell/sourcemap-codec@1.4.15':
    resolution: {integrity: sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==}

  '@jridgewell/trace-mapping@0.3.18':
    resolution: {integrity: sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@octokit/auth-token@3.0.4':
    resolution: {integrity: sha512-TWFX7cZF2LXoCvdmJWY7XVPi74aSY0+FfBZNSXEXFkMpjcqsQwDSYVv5FhRFaI0V1ECnwbz4j59T/G+rXNWaIQ==}
    engines: {node: '>= 14'}

  '@octokit/core@4.2.4':
    resolution: {integrity: sha512-rYKilwgzQ7/imScn3M9/pFfUf4I1AZEH3KhyJmtPdE2zfaXAn2mFfUy4FbKewzc2We5y/LlKLj36fWJLKC2SIQ==}
    engines: {node: '>= 14'}

  '@octokit/endpoint@7.0.6':
    resolution: {integrity: sha512-5L4fseVRUsDFGR00tMWD/Trdeeihn999rTMGRMC1G/Ldi1uWlWJzI98H4Iak5DB/RVvQuyMYKqSK/R6mbSOQyg==}
    engines: {node: '>= 14'}

  '@octokit/graphql@5.0.6':
    resolution: {integrity: sha512-Fxyxdy/JH0MnIB5h+UQ3yCoh1FG4kWXfFKkpWqjZHw/p+Kc8Y44Hu/kCgNBT6nU1shNumEchmW/sUO1JuQnPcw==}
    engines: {node: '>= 14'}

  '@octokit/openapi-types@18.0.0':
    resolution: {integrity: sha512-V8GImKs3TeQRxRtXFpG2wl19V7444NIOTDF24AWuIbmNaNYOQMWRbjcGDXV5B+0n887fgDcuMNOmlul+k+oJtw==}

  '@octokit/plugin-paginate-rest@6.1.2':
    resolution: {integrity: sha512-qhrmtQeHU/IivxucOV1bbI/xZyC/iOBhclokv7Sut5vnejAIAEXVcGQeRpQlU39E0WwK9lNvJHphHri/DB6lbQ==}
    engines: {node: '>= 14'}
    peerDependencies:
      '@octokit/core': '>=4'

  '@octokit/plugin-request-log@1.0.4':
    resolution: {integrity: sha512-mLUsMkgP7K/cnFEw07kWqXGF5LKrOkD+lhCrKvPHXWDywAwuDUeDwWBpc69XK3pNX0uKiVt8g5z96PJ6z9xCFA==}
    peerDependencies:
      '@octokit/core': '>=3'

  '@octokit/plugin-rest-endpoint-methods@7.2.3':
    resolution: {integrity: sha512-I5Gml6kTAkzVlN7KCtjOM+Ruwe/rQppp0QU372K1GP7kNOYEKe8Xn5BW4sE62JAHdwpq95OQK/qGNyKQMUzVgA==}
    engines: {node: '>= 14'}
    peerDependencies:
      '@octokit/core': '>=3'

  '@octokit/request-error@3.0.3':
    resolution: {integrity: sha512-crqw3V5Iy2uOU5Np+8M/YexTlT8zxCfI+qu+LxUB7SZpje4Qmx3mub5DfEKSO8Ylyk0aogi6TYdf6kxzh2BguQ==}
    engines: {node: '>= 14'}

  '@octokit/request@6.2.8':
    resolution: {integrity: sha512-ow4+pkVQ+6XVVsekSYBzJC0VTVvh/FCTUUgTsboGq+DTeWdyIFV8WSCdo0RIxk6wSkBTHqIK1mYuY7nOBXOchw==}
    engines: {node: '>= 14'}

  '@octokit/rest@19.0.13':
    resolution: {integrity: sha512-/EzVox5V9gYGdbAI+ovYj3nXQT1TtTHRT+0eZPcuC05UFSWO3mdO9UY1C0i2eLF9Un1ONJkAk+IEtYGAC+TahA==}
    engines: {node: '>= 14'}

  '@octokit/tsconfig@1.0.2':
    resolution: {integrity: sha512-I0vDR0rdtP8p2lGMzvsJzbhdOWy405HcGovrspJ8RRibHnyRgggUSNO5AIox5LmqiwmatHKYsvj6VGFHkqS7lA==}

  '@octokit/types@10.0.0':
    resolution: {integrity: sha512-Vm8IddVmhCgU1fxC1eyinpwqzXPEYu0NrYzD3YZjlGjyftdLBTeqNblRC0jmJmgxbJIsQlyogVeGnrNaaMVzIg==}

  '@octokit/types@9.3.2':
    resolution: {integrity: sha512-D4iHGTdAnEEVsB8fl95m1hiz7D5YiRdQ9b/OEb3BYRVwbLsGHcRVPz+u+BgRLNk0Q0/4iZCBqDN96j2XNxfXrA==}

  '@rollup/rollup-android-arm-eabi@4.21.0':
    resolution: {integrity: sha512-WTWD8PfoSAJ+qL87lE7votj3syLavxunWhzCnx3XFxFiI/BA/r3X7MUM8dVrH8rb2r4AiO8jJsr3ZjdaftmnfA==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.21.0':
    resolution: {integrity: sha512-a1sR2zSK1B4eYkiZu17ZUZhmUQcKjk2/j9Me2IDjk1GHW7LB5Z35LEzj9iJch6gtUfsnvZs1ZNyDW2oZSThrkA==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.21.0':
    resolution: {integrity: sha512-zOnKWLgDld/svhKO5PD9ozmL6roy5OQ5T4ThvdYZLpiOhEGY+dp2NwUmxK0Ld91LrbjrvtNAE0ERBwjqhZTRAA==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.21.0':
    resolution: {integrity: sha512-7doS8br0xAkg48SKE2QNtMSFPFUlRdw9+votl27MvT46vo44ATBmdZdGysOevNELmZlfd+NEa0UYOA8f01WSrg==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-linux-arm-gnueabihf@4.21.0':
    resolution: {integrity: sha512-pWJsfQjNWNGsoCq53KjMtwdJDmh/6NubwQcz52aEwLEuvx08bzcy6tOUuawAOncPnxz/3siRtd8hiQ32G1y8VA==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.21.0':
    resolution: {integrity: sha512-efRIANsz3UHZrnZXuEvxS9LoCOWMGD1rweciD6uJQIx2myN3a8Im1FafZBzh7zk1RJ6oKcR16dU3UPldaKd83w==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.21.0':
    resolution: {integrity: sha512-ZrPhydkTVhyeGTW94WJ8pnl1uroqVHM3j3hjdquwAcWnmivjAwOYjTEAuEDeJvGX7xv3Z9GAvrBkEzCgHq9U1w==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.21.0':
    resolution: {integrity: sha512-cfaupqd+UEFeURmqNP2eEvXqgbSox/LHOyN9/d2pSdV8xTrjdg3NgOFJCtc1vQ/jEke1qD0IejbBfxleBPHnPw==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.21.0':
    resolution: {integrity: sha512-ZKPan1/RvAhrUylwBXC9t7B2hXdpb/ufeu22pG2psV7RN8roOfGurEghw1ySmX/CmDDHNTDDjY3lo9hRlgtaHg==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.21.0':
    resolution: {integrity: sha512-H1eRaCwd5E8eS8leiS+o/NqMdljkcb1d6r2h4fKSsCXQilLKArq6WS7XBLDu80Yz+nMqHVFDquwcVrQmGr28rg==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.21.0':
    resolution: {integrity: sha512-zJ4hA+3b5tu8u7L58CCSI0A9N1vkfwPhWd/puGXwtZlsB5bTkwDNW/+JCU84+3QYmKpLi+XvHdmrlwUwDA6kqw==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.21.0':
    resolution: {integrity: sha512-e2hrvElFIh6kW/UNBQK/kzqMNY5mO+67YtEh9OA65RM5IJXYTWiXjX6fjIiPaqOkBthYF1EqgiZ6OXKcQsM0hg==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.21.0':
    resolution: {integrity: sha512-1vvmgDdUSebVGXWX2lIcgRebqfQSff0hMEkLJyakQ9JQUbLDkEaMsPTLOmyccyC6IJ/l3FZuJbmrBw/u0A0uCQ==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.21.0':
    resolution: {integrity: sha512-s5oFkZ/hFcrlAyBTONFY1TWndfyre1wOMwU+6KCpm/iatybvrRgmZVM+vCFwxmC5ZhdlgfE0N4XorsDpi7/4XQ==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.21.0':
    resolution: {integrity: sha512-G9+TEqRnAA6nbpqyUqgTiopmnfgnMkR3kMukFBDsiyy23LZvUCpiUwjTRx6ezYCjJODXrh52rBR9oXvm+Fp5wg==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.21.0':
    resolution: {integrity: sha512-2jsCDZwtQvRhejHLfZ1JY6w6kEuEtfF9nzYsZxzSlNVKDX+DpsDJ+Rbjkm74nvg2rdx0gwBS+IMdvwJuq3S9pQ==}
    cpu: [x64]
    os: [win32]

  '@twind/core@1.1.3':
    resolution: {integrity: sha512-/B/aNFerMb2IeyjSJy3SJxqVxhrT77gBDknLMiZqXIRr4vNJqiuhx7KqUSRzDCwUmyGuogkamz+aOLzN6MeSLw==}
    engines: {node: '>=14.15.0'}
    peerDependencies:
      typescript: ^4.8.4
    peerDependenciesMeta:
      typescript:
        optional: true

  '@twind/preset-autoprefix@1.0.7':
    resolution: {integrity: sha512-3wmHO0pG/CVxYBNZUV0tWcL7CP0wD5KpyWAQE/KOalWmOVBj+nH6j3v6Y3I3pRuMFaG5DC78qbYbhA1O11uG3w==}
    engines: {node: '>=14.15.0'}
    peerDependencies:
      '@twind/core': ^1.1.0
      typescript: ^4.8.4
    peerDependenciesMeta:
      typescript:
        optional: true

  '@twind/preset-tailwind@1.1.4':
    resolution: {integrity: sha512-zv85wrP/DW4AxgWrLfH7kyGn/KJF3K04FMLVl2AjoxZGYdCaoZDkL8ma3hzaKQ+WGgBFRubuB/Ku2Rtv/wjzVw==}
    engines: {node: '>=14.15.0'}
    peerDependencies:
      '@twind/core': ^1.1.0
      typescript: ^4.8.4
    peerDependenciesMeta:
      typescript:
        optional: true

  '@twind/with-web-components@1.1.3':
    resolution: {integrity: sha512-pM2Ps58pkLQva2HsC/cm2y5kTIwojJ6896w4+kXIMCOhuoOfTeyNOkYvBdr8Cpkvm+vR+ggPITNdvpzAOXa+Dg==}
    engines: {node: '>=14.15.0'}
    peerDependencies:
      '@twind/core': ^1.1.0
      typescript: ^4.8.4
    peerDependenciesMeta:
      typescript:
        optional: true

  '@types/babel__core@7.20.5':
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}

  '@types/babel__generator@7.6.4':
    resolution: {integrity: sha512-tFkciB9j2K755yrTALxD44McOrk+gfpIpvC3sxHjRawj6PfnQxrse4Clq5y/Rq+G3mrBurMax/lG8Qn2t9mSsg==}

  '@types/babel__template@7.4.1':
    resolution: {integrity: sha512-azBFKemX6kMg5Io+/rdGT0dkGreboUVR0Cdm3fz9QJWpaQGJRQXl7C+6hOTCZcMll7KFyEQpgbYI2lHdsS4U7g==}

  '@types/babel__traverse@7.20.1':
    resolution: {integrity: sha512-MitHFXnhtgwsGZWtT68URpOvLN4EREih1u3QtQiN4VdAxWKRVvGCSvw/Qth0M0Qq3pJpnGOu5JaM/ydK7OGbqg==}

  '@types/estree@1.0.5':
    resolution: {integrity: sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==}

  '@types/node@20.16.1':
    resolution: {integrity: sha512-zJDo7wEadFtSyNz5QITDfRcrhqDvQI1xQNQ0VoizPjM/dVAODqqIUWbJPkvsxmTI0MYRGRikcdjMPhOssnPejQ==}

  ansi-styles@3.2.1:
    resolution: {integrity: sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==}
    engines: {node: '>=4'}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  axios@1.4.0:
    resolution: {integrity: sha512-S4XCWMEmzvo64T9GfvQDOXgYRDJ/wsSZc7Jvdgx5u1sd0JwsuPLqb3SYmusag+edF6ziyMensPVqLTSc1PiSEA==}

  babel-plugin-jsx-dom-expressions@0.38.1:
    resolution: {integrity: sha512-4FD4H69Cu4jHx2uLDEvx4YC5T/fC/Dmaafhsm8hXm7SjHYzjr09gBVyHdoFza+91f/g9e6tIzjbLCMkOXwmlew==}
    peerDependencies:
      '@babel/core': ^7.20.12

  babel-preset-solid@1.8.19:
    resolution: {integrity: sha512-F3MoUdx3i4znhStnXUBno+5kGSbvhpbGrPgqfRPrS8W7foVJUOSd1/F9QDyd9dgClHfr+J7V14931eu1PEDDMQ==}
    peerDependencies:
      '@babel/core': ^7.0.0

  before-after-hook@2.2.3:
    resolution: {integrity: sha512-NzUnlZexiaH/46WDhANlyR2bXRopNg4F/zuSA3OpZnllCUgRaOF2znDioDWrmbNVsuZk6l9pMquQB38cfBZwkQ==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.23.3:
    resolution: {integrity: sha512-btwCFJVjI4YWDNfau8RhZ+B1Q/VLoUITrm3RlP6y1tYGWIOa+InuYiRGXUBXo8nA1qKmHMyLB/iVQg5TT4eFoA==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  caniuse-lite@1.0.30001651:
    resolution: {integrity: sha512-9Cf+Xv1jJNe1xPZLGuUXLNkE1BoDkqRqYyFJ9TDYSqhduqA4hu4oR9HluGoWYQC/aj8WHjsGVV+bwkh0+tegRg==}

  chalk@2.4.2:
    resolution: {integrity: sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==}
    engines: {node: '>=4'}

  color-convert@1.9.3:
    resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}

  color-name@1.1.3:
    resolution: {integrity: sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  csstype@3.1.2:
    resolution: {integrity: sha512-I7K1Uu0MBPzaFKg4nI5Q7Vs2t+3gWWW648spaF+Rg7pI9ds18Ugn+lvg4SHczUdKlHI5LWBXyqfS8+DufyBsgQ==}

  debug@4.3.4:
    resolution: {integrity: sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  deprecation@2.3.1:
    resolution: {integrity: sha512-xmHIy4F3scKVwMsQ4WnVaS8bHOx0DmVwRywosKhaILI0ywMDWPtBSku2HNxRvF7jtwDRsoEwYQSfbxj8b7RlJQ==}

  electron-to-chromium@1.5.13:
    resolution: {integrity: sha512-lbBcvtIJ4J6sS4tb5TLp1b4LyfCdMkwStzXPyAgVgTRAsep4bvrAGaBOP7ZJtQMNJpSQ9SqG4brWOroNaQtm7Q==}

  esbuild@0.18.12:
    resolution: {integrity: sha512-XuOVLDdtsDslXStStduT41op21Ytmf4/BDS46aa3xPJ7X5h2eMWBF1oAe3QjUH3bDksocNXgzGUZ7XHIBya6Tg==}
    engines: {node: '>=12'}
    hasBin: true

  esbuild@0.21.5:
    resolution: {integrity: sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==}
    engines: {node: '>=12'}
    hasBin: true

  escalade@3.1.2:
    resolution: {integrity: sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==}
    engines: {node: '>=6'}

  escape-string-regexp@1.0.5:
    resolution: {integrity: sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==}
    engines: {node: '>=0.8.0'}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  follow-redirects@1.15.2:
    resolution: {integrity: sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  form-data@4.0.0:
    resolution: {integrity: sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==}
    engines: {node: '>= 6'}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  fuse.js@6.6.2:
    resolution: {integrity: sha512-cJaJkxCCxC8qIIcPBF9yGxY0W/tVZS3uEISDxhYIdtk8OL93pe+6Zj7LjCqVV4dzbqcriOZ+kQ/NE4RXZHsIGA==}
    engines: {node: '>=10'}

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  has-flag@3.0.0:
    resolution: {integrity: sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==}
    engines: {node: '>=4'}

  html-entities@2.3.3:
    resolution: {integrity: sha512-DV5Ln36z34NNTDgnz0EWGBLZENelNAtkiFA4kyNOG2tDI6Mz1uSWiq1wAKdyjnJwyDiDO7Fa2SO1CTxPXL8VxA==}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-plain-object@5.0.0:
    resolution: {integrity: sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==}
    engines: {node: '>=0.10.0'}

  is-what@4.1.15:
    resolution: {integrity: sha512-uKua1wfy3Yt+YqsD6mTUEa2zSi3G1oPlqTflgaPJ7z63vUGN5pxFpnQfeSLMFnJDEsdvOtkp1rUWkYjB4YfhgA==}
    engines: {node: '>=12.13'}

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  jsesc@2.5.2:
    resolution: {integrity: sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==}
    engines: {node: '>=4'}
    hasBin: true

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  merge-anything@5.1.7:
    resolution: {integrity: sha512-eRtbOb1N5iyH0tkQDAoQ4Ipsp/5qSR79Dzrz8hEPxRX10RWWR/iQXdoKmBSRCThY1Fh5EhISDtpSc93fpxUniQ==}
    engines: {node: '>=12.13'}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  ms@2.1.2:
    resolution: {integrity: sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==}

  nanoid@3.3.7:
    resolution: {integrity: sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  node-fetch@2.6.12:
    resolution: {integrity: sha512-C/fGU2E8ToujUivIO0H+tpQ6HWo4eEmchoPIoXtxCrVghxdKq+QOHqEZW7tuP3KlV3bC8FRMO5nMCC7Zm1VP6g==}
    engines: {node: 4.x || >=6.0.0}
    peerDependencies:
      encoding: ^0.1.0
    peerDependenciesMeta:
      encoding:
        optional: true

  node-releases@2.0.18:
    resolution: {integrity: sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  picocolors@1.0.0:
    resolution: {integrity: sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==}

  picocolors@1.0.1:
    resolution: {integrity: sha512-anP1Z8qwhkbmu7MFP5iTt+wQKXgwzf7zTyGlcdzabySa9vd0Xt392U0rVmz9poOaBj0uHJKyyo9/upk0HrEQew==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  postcss@8.4.41:
    resolution: {integrity: sha512-TesUflQ0WKZqAvg52PWL6kHgLKP6xB6heTOdoYM0Wt2UHyxNa4K25EZZMgKns3BH1RLVbZCREPpLY0rhnNoHVQ==}
    engines: {node: ^10 || ^12 || >=14}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  rollup@4.21.0:
    resolution: {integrity: sha512-vo+S/lfA2lMS7rZ2Qoubi6I5hwZwzXeUIctILZLbHI+laNtvhhOIon2S1JksA5UEDQ7l3vberd0fxK44lTYjbQ==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  seroval@0.5.1:
    resolution: {integrity: sha512-ZfhQVB59hmIauJG5Ydynupy8KHyr5imGNtdDhbZG68Ufh1Ynkv9KOYOAABf71oVbQxJ8VkWnMHAjEHE7fWkH5g==}
    engines: {node: '>=10'}

  snarkdown@2.0.0:
    resolution: {integrity: sha512-MgL/7k/AZdXCTJiNgrO7chgDqaB9FGM/1Tvlcenenb7div6obaDATzs16JhFyHHBGodHT3B7RzRc5qk8pFhg3A==}

  solid-js@1.7.8:
    resolution: {integrity: sha512-XHBWk1FvFd0JMKljko7FfhefJMTSgYEuVKcQ2a8hzRXfiuSJAGsrPPafqEo+f6l+e8Oe3cROSpIL6kbzjC1fjQ==}

  solid-refresh@0.6.3:
    resolution: {integrity: sha512-F3aPsX6hVw9ttm5LYlth8Q15x6MlI/J3Dn+o3EQyRTtTxidepSTwAYdozt01/YA+7ObcciagGEyXIopGZzQtbA==}
    peerDependencies:
      solid-js: ^1.3

  solid-toast@0.5.0:
    resolution: {integrity: sha512-t770JakjyS2P9b8Qa1zMLOD51KYKWXbTAyJePVUoYex5c5FH5S/HtUBUbZAWFcqRCKmAE8KhyIiCvDZA8bOnxQ==}
    peerDependencies:
      solid-js: ^1.5.4

  source-map-js@1.2.0:
    resolution: {integrity: sha512-itJW8lvSA0TXEphiRoawsCksnlf8SyvmFzIhltqAHluXd88pkCd+cXJVHTDwdCr0IzwptSm035IHQktUu1QUMg==}
    engines: {node: '>=0.10.0'}

  style-vendorizer@2.2.3:
    resolution: {integrity: sha512-/VDRsWvQAgspVy9eATN3z6itKTuyg+jW1q6UoTCQCFRqPDw8bi3E1hXIKnGw5LvXS2AQPuJ7Af4auTLYeBOLEg==}

  supports-color@5.5.0:
    resolution: {integrity: sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==}
    engines: {node: '>=4'}

  to-fast-properties@2.0.0:
    resolution: {integrity: sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==}
    engines: {node: '>=4'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  tr46@0.0.3:
    resolution: {integrity: sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==}

  typescript@4.9.5:
    resolution: {integrity: sha512-1FXk9E2Hm+QzZQ7z+McJiHL4NW1F2EzMu9Nq9i3zAaGqibafqYwCVU6WyWAuyQRRzOlxou8xZSyXLEN8oKj24g==}
    engines: {node: '>=4.2.0'}
    hasBin: true

  undici-types@6.19.8:
    resolution: {integrity: sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==}

  universal-user-agent@6.0.0:
    resolution: {integrity: sha512-isyNax3wXoKaulPDZWHQqbmIx1k2tb9fb3GGDBRxCscfYV2Ch7WxPArBsFEG8s/safwXTT7H4QGhaIkTp9447w==}

  update-browserslist-db@1.1.0:
    resolution: {integrity: sha512-EdRAaAyk2cUE1wOf2DkEhzxqOQvFOoRJFNS6NeyJ01Gp2beMRpBAINjM2iDXE3KCuKhwnvHIQCJm6ThL2Z+HzQ==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  validate-html-nesting@1.2.2:
    resolution: {integrity: sha512-hGdgQozCsQJMyfK5urgFcWEqsSSrK63Awe0t/IMR0bZ0QMtnuaiHzThW81guu3qx9abLi99NEuiaN6P9gVYsNg==}

  vite-plugin-css-injected-by-js@3.2.0:
    resolution: {integrity: sha512-a6MtYm/qfswVCtLezzzKJWL2ZpxrXXQd6/1UHy0t/G0IILHl4GG6n4OprbcC93aXIwkeS19JNbuKWD0Xt+pZtg==}
    peerDependencies:
      vite: '>2.0.0-0'

  vite-plugin-mkcert@1.16.0:
    resolution: {integrity: sha512-5r+g8SB9wZzLNUFekGwZo3e0P6QlS6rbxK5p9z/itxNAimsYohgjK/YfVPVxM9EuglP9hjridq0lUejo9v1nVg==}
    engines: {node: '>=v16.7.0'}
    peerDependencies:
      vite: '>=3'

  vite-plugin-restart@0.4.1:
    resolution: {integrity: sha512-MYhDFaa2HMoSavr/2pShj6toKVFso+zqF6FAdWGC8JSIrsNig+4giy9EzoSySgGRJvsnbwZXKdjAvn8ag8rUkA==}
    peerDependencies:
      vite: ^2.9.0 || ^3.0.0 || ^4.0.0 || ^5.0.0

  vite-plugin-solid@2.10.2:
    resolution: {integrity: sha512-AOEtwMe2baBSXMXdo+BUwECC8IFHcKS6WQV/1NEd+Q7vHPap5fmIhLcAzr+DUJ04/KHx/1UBU0l1/GWP+rMAPQ==}
    peerDependencies:
      '@testing-library/jest-dom': ^5.16.6 || ^5.17.0 || ^6.*
      solid-js: ^1.7.2
      vite: ^3.0.0 || ^4.0.0 || ^5.0.0
    peerDependenciesMeta:
      '@testing-library/jest-dom':
        optional: true

  vite@5.4.2:
    resolution: {integrity: sha512-dDrQTRHp5C1fTFzcSaMxjk6vdpKvT+2/mIdE07Gw2ykehT49O0z/VHS3zZ8iV/Gh8BJJKHWOe5RjaNrW5xf/GA==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^18.0.0 || >=20.0.0
      less: '*'
      lightningcss: ^1.21.0
      sass: '*'
      sass-embedded: '*'
      stylus: '*'
      sugarss: '*'
      terser: ^5.4.0
    peerDependenciesMeta:
      '@types/node':
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      sass-embedded:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true

  vitefu@0.2.5:
    resolution: {integrity: sha512-SgHtMLoqaeeGnd2evZ849ZbACbnwQCIwRH57t18FxcXoZop0uQu0uzlIhJBlF/eWVzuce0sHeqPcDo+evVcg8Q==}
    peerDependencies:
      vite: ^3.0.0 || ^4.0.0 || ^5.0.0
    peerDependenciesMeta:
      vite:
        optional: true

  webidl-conversions@3.0.1:
    resolution: {integrity: sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==}

  whatwg-url@5.0.0:
    resolution: {integrity: sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

snapshots:

  '@ampproject/remapping@2.2.1':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.3
      '@jridgewell/trace-mapping': 0.3.18

  '@babel/code-frame@7.24.7':
    dependencies:
      '@babel/highlight': 7.24.7
      picocolors: 1.0.0

  '@babel/compat-data@7.25.4': {}

  '@babel/core@7.25.2':
    dependencies:
      '@ampproject/remapping': 2.2.1
      '@babel/code-frame': 7.24.7
      '@babel/generator': 7.25.5
      '@babel/helper-compilation-targets': 7.25.2
      '@babel/helper-module-transforms': 7.25.2(@babel/core@7.25.2)
      '@babel/helpers': 7.25.0
      '@babel/parser': 7.25.4
      '@babel/template': 7.25.0
      '@babel/traverse': 7.25.4
      '@babel/types': 7.25.4
      convert-source-map: 2.0.0
      debug: 4.3.4
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.25.5':
    dependencies:
      '@babel/types': 7.25.4
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 2.5.2

  '@babel/helper-compilation-targets@7.25.2':
    dependencies:
      '@babel/compat-data': 7.25.4
      '@babel/helper-validator-option': 7.24.8
      browserslist: 4.23.3
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-module-imports@7.18.6':
    dependencies:
      '@babel/types': 7.22.5

  '@babel/helper-module-imports@7.24.7':
    dependencies:
      '@babel/traverse': 7.25.4
      '@babel/types': 7.25.4
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-module-transforms@7.25.2(@babel/core@7.25.2)':
    dependencies:
      '@babel/core': 7.25.2
      '@babel/helper-module-imports': 7.24.7
      '@babel/helper-simple-access': 7.24.7
      '@babel/helper-validator-identifier': 7.24.7
      '@babel/traverse': 7.25.4
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-plugin-utils@7.22.5': {}

  '@babel/helper-simple-access@7.24.7':
    dependencies:
      '@babel/traverse': 7.25.4
      '@babel/types': 7.25.4
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-string-parser@7.22.5': {}

  '@babel/helper-string-parser@7.24.8': {}

  '@babel/helper-validator-identifier@7.22.5': {}

  '@babel/helper-validator-identifier@7.24.7': {}

  '@babel/helper-validator-option@7.24.8': {}

  '@babel/helpers@7.25.0':
    dependencies:
      '@babel/template': 7.25.0
      '@babel/types': 7.25.4

  '@babel/highlight@7.24.7':
    dependencies:
      '@babel/helper-validator-identifier': 7.24.7
      chalk: 2.4.2
      js-tokens: 4.0.0
      picocolors: 1.0.0

  '@babel/parser@7.22.7':
    dependencies:
      '@babel/types': 7.22.5

  '@babel/parser@7.25.4':
    dependencies:
      '@babel/types': 7.25.4

  '@babel/plugin-syntax-jsx@7.22.5(@babel/core@7.25.2)':
    dependencies:
      '@babel/core': 7.25.2
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/template@7.25.0':
    dependencies:
      '@babel/code-frame': 7.24.7
      '@babel/parser': 7.25.4
      '@babel/types': 7.25.4

  '@babel/traverse@7.25.4':
    dependencies:
      '@babel/code-frame': 7.24.7
      '@babel/generator': 7.25.5
      '@babel/parser': 7.25.4
      '@babel/template': 7.25.0
      '@babel/types': 7.25.4
      debug: 4.3.4
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.22.5':
    dependencies:
      '@babel/helper-string-parser': 7.22.5
      '@babel/helper-validator-identifier': 7.22.5
      to-fast-properties: 2.0.0

  '@babel/types@7.25.4':
    dependencies:
      '@babel/helper-string-parser': 7.24.8
      '@babel/helper-validator-identifier': 7.24.7
      to-fast-properties: 2.0.0

  '@esbuild/aix-ppc64@0.21.5':
    optional: true

  '@esbuild/android-arm64@0.18.12':
    optional: true

  '@esbuild/android-arm64@0.21.5':
    optional: true

  '@esbuild/android-arm@0.18.12':
    optional: true

  '@esbuild/android-arm@0.21.5':
    optional: true

  '@esbuild/android-x64@0.18.12':
    optional: true

  '@esbuild/android-x64@0.21.5':
    optional: true

  '@esbuild/darwin-arm64@0.18.12':
    optional: true

  '@esbuild/darwin-arm64@0.21.5':
    optional: true

  '@esbuild/darwin-x64@0.18.12':
    optional: true

  '@esbuild/darwin-x64@0.21.5':
    optional: true

  '@esbuild/freebsd-arm64@0.18.12':
    optional: true

  '@esbuild/freebsd-arm64@0.21.5':
    optional: true

  '@esbuild/freebsd-x64@0.18.12':
    optional: true

  '@esbuild/freebsd-x64@0.21.5':
    optional: true

  '@esbuild/linux-arm64@0.18.12':
    optional: true

  '@esbuild/linux-arm64@0.21.5':
    optional: true

  '@esbuild/linux-arm@0.18.12':
    optional: true

  '@esbuild/linux-arm@0.21.5':
    optional: true

  '@esbuild/linux-ia32@0.18.12':
    optional: true

  '@esbuild/linux-ia32@0.21.5':
    optional: true

  '@esbuild/linux-loong64@0.18.12':
    optional: true

  '@esbuild/linux-loong64@0.21.5':
    optional: true

  '@esbuild/linux-mips64el@0.18.12':
    optional: true

  '@esbuild/linux-mips64el@0.21.5':
    optional: true

  '@esbuild/linux-ppc64@0.18.12':
    optional: true

  '@esbuild/linux-ppc64@0.21.5':
    optional: true

  '@esbuild/linux-riscv64@0.18.12':
    optional: true

  '@esbuild/linux-riscv64@0.21.5':
    optional: true

  '@esbuild/linux-s390x@0.18.12':
    optional: true

  '@esbuild/linux-s390x@0.21.5':
    optional: true

  '@esbuild/linux-x64@0.18.12':
    optional: true

  '@esbuild/linux-x64@0.21.5':
    optional: true

  '@esbuild/netbsd-x64@0.18.12':
    optional: true

  '@esbuild/netbsd-x64@0.21.5':
    optional: true

  '@esbuild/openbsd-x64@0.18.12':
    optional: true

  '@esbuild/openbsd-x64@0.21.5':
    optional: true

  '@esbuild/sunos-x64@0.18.12':
    optional: true

  '@esbuild/sunos-x64@0.21.5':
    optional: true

  '@esbuild/win32-arm64@0.18.12':
    optional: true

  '@esbuild/win32-arm64@0.21.5':
    optional: true

  '@esbuild/win32-ia32@0.18.12':
    optional: true

  '@esbuild/win32-ia32@0.21.5':
    optional: true

  '@esbuild/win32-x64@0.18.12':
    optional: true

  '@esbuild/win32-x64@0.21.5':
    optional: true

  '@jridgewell/gen-mapping@0.3.3':
    dependencies:
      '@jridgewell/set-array': 1.1.2
      '@jridgewell/sourcemap-codec': 1.4.15
      '@jridgewell/trace-mapping': 0.3.18

  '@jridgewell/gen-mapping@0.3.5':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.4.15
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.0': {}

  '@jridgewell/set-array@1.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/sourcemap-codec@1.4.14': {}

  '@jridgewell/sourcemap-codec@1.4.15': {}

  '@jridgewell/trace-mapping@0.3.18':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.0
      '@jridgewell/sourcemap-codec': 1.4.14

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.0
      '@jridgewell/sourcemap-codec': 1.4.15

  '@octokit/auth-token@3.0.4': {}

  '@octokit/core@4.2.4':
    dependencies:
      '@octokit/auth-token': 3.0.4
      '@octokit/graphql': 5.0.6
      '@octokit/request': 6.2.8
      '@octokit/request-error': 3.0.3
      '@octokit/types': 9.3.2
      before-after-hook: 2.2.3
      universal-user-agent: 6.0.0
    transitivePeerDependencies:
      - encoding

  '@octokit/endpoint@7.0.6':
    dependencies:
      '@octokit/types': 9.3.2
      is-plain-object: 5.0.0
      universal-user-agent: 6.0.0

  '@octokit/graphql@5.0.6':
    dependencies:
      '@octokit/request': 6.2.8
      '@octokit/types': 9.3.2
      universal-user-agent: 6.0.0
    transitivePeerDependencies:
      - encoding

  '@octokit/openapi-types@18.0.0': {}

  '@octokit/plugin-paginate-rest@6.1.2(@octokit/core@4.2.4)':
    dependencies:
      '@octokit/core': 4.2.4
      '@octokit/tsconfig': 1.0.2
      '@octokit/types': 9.3.2

  '@octokit/plugin-request-log@1.0.4(@octokit/core@4.2.4)':
    dependencies:
      '@octokit/core': 4.2.4

  '@octokit/plugin-rest-endpoint-methods@7.2.3(@octokit/core@4.2.4)':
    dependencies:
      '@octokit/core': 4.2.4
      '@octokit/types': 10.0.0

  '@octokit/request-error@3.0.3':
    dependencies:
      '@octokit/types': 9.3.2
      deprecation: 2.3.1
      once: 1.4.0

  '@octokit/request@6.2.8':
    dependencies:
      '@octokit/endpoint': 7.0.6
      '@octokit/request-error': 3.0.3
      '@octokit/types': 9.3.2
      is-plain-object: 5.0.0
      node-fetch: 2.6.12
      universal-user-agent: 6.0.0
    transitivePeerDependencies:
      - encoding

  '@octokit/rest@19.0.13':
    dependencies:
      '@octokit/core': 4.2.4
      '@octokit/plugin-paginate-rest': 6.1.2(@octokit/core@4.2.4)
      '@octokit/plugin-request-log': 1.0.4(@octokit/core@4.2.4)
      '@octokit/plugin-rest-endpoint-methods': 7.2.3(@octokit/core@4.2.4)
    transitivePeerDependencies:
      - encoding

  '@octokit/tsconfig@1.0.2': {}

  '@octokit/types@10.0.0':
    dependencies:
      '@octokit/openapi-types': 18.0.0

  '@octokit/types@9.3.2':
    dependencies:
      '@octokit/openapi-types': 18.0.0

  '@rollup/rollup-android-arm-eabi@4.21.0':
    optional: true

  '@rollup/rollup-android-arm64@4.21.0':
    optional: true

  '@rollup/rollup-darwin-arm64@4.21.0':
    optional: true

  '@rollup/rollup-darwin-x64@4.21.0':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.21.0':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.21.0':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.21.0':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.21.0':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.21.0':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.21.0':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.21.0':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.21.0':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.21.0':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.21.0':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.21.0':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.21.0':
    optional: true

  '@twind/core@1.1.3(typescript@4.9.5)':
    dependencies:
      csstype: 3.1.2
    optionalDependencies:
      typescript: 4.9.5

  '@twind/preset-autoprefix@1.0.7(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5)':
    dependencies:
      '@twind/core': 1.1.3(typescript@4.9.5)
      style-vendorizer: 2.2.3
    optionalDependencies:
      typescript: 4.9.5

  '@twind/preset-tailwind@1.1.4(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5)':
    dependencies:
      '@twind/core': 1.1.3(typescript@4.9.5)
    optionalDependencies:
      typescript: 4.9.5

  '@twind/with-web-components@1.1.3(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5)':
    dependencies:
      '@twind/core': 1.1.3(typescript@4.9.5)
    optionalDependencies:
      typescript: 4.9.5

  '@types/babel__core@7.20.5':
    dependencies:
      '@babel/parser': 7.22.7
      '@babel/types': 7.22.5
      '@types/babel__generator': 7.6.4
      '@types/babel__template': 7.4.1
      '@types/babel__traverse': 7.20.1

  '@types/babel__generator@7.6.4':
    dependencies:
      '@babel/types': 7.22.5

  '@types/babel__template@7.4.1':
    dependencies:
      '@babel/parser': 7.22.7
      '@babel/types': 7.22.5

  '@types/babel__traverse@7.20.1':
    dependencies:
      '@babel/types': 7.22.5

  '@types/estree@1.0.5': {}

  '@types/node@20.16.1':
    dependencies:
      undici-types: 6.19.8

  ansi-styles@3.2.1:
    dependencies:
      color-convert: 1.9.3

  asynckit@0.4.0: {}

  axios@1.4.0(debug@4.3.4):
    dependencies:
      follow-redirects: 1.15.2(debug@4.3.4)
      form-data: 4.0.0
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  babel-plugin-jsx-dom-expressions@0.38.1(@babel/core@7.25.2):
    dependencies:
      '@babel/core': 7.25.2
      '@babel/helper-module-imports': 7.18.6
      '@babel/plugin-syntax-jsx': 7.22.5(@babel/core@7.25.2)
      '@babel/types': 7.22.5
      html-entities: 2.3.3
      validate-html-nesting: 1.2.2

  babel-preset-solid@1.8.19(@babel/core@7.25.2):
    dependencies:
      '@babel/core': 7.25.2
      babel-plugin-jsx-dom-expressions: 0.38.1(@babel/core@7.25.2)

  before-after-hook@2.2.3: {}

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.23.3:
    dependencies:
      caniuse-lite: 1.0.30001651
      electron-to-chromium: 1.5.13
      node-releases: 2.0.18
      update-browserslist-db: 1.1.0(browserslist@4.23.3)

  caniuse-lite@1.0.30001651: {}

  chalk@2.4.2:
    dependencies:
      ansi-styles: 3.2.1
      escape-string-regexp: 1.0.5
      supports-color: 5.5.0

  color-convert@1.9.3:
    dependencies:
      color-name: 1.1.3

  color-name@1.1.3: {}

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  convert-source-map@2.0.0: {}

  csstype@3.1.2: {}

  debug@4.3.4:
    dependencies:
      ms: 2.1.2

  delayed-stream@1.0.0: {}

  deprecation@2.3.1: {}

  electron-to-chromium@1.5.13: {}

  esbuild@0.18.12:
    optionalDependencies:
      '@esbuild/android-arm': 0.18.12
      '@esbuild/android-arm64': 0.18.12
      '@esbuild/android-x64': 0.18.12
      '@esbuild/darwin-arm64': 0.18.12
      '@esbuild/darwin-x64': 0.18.12
      '@esbuild/freebsd-arm64': 0.18.12
      '@esbuild/freebsd-x64': 0.18.12
      '@esbuild/linux-arm': 0.18.12
      '@esbuild/linux-arm64': 0.18.12
      '@esbuild/linux-ia32': 0.18.12
      '@esbuild/linux-loong64': 0.18.12
      '@esbuild/linux-mips64el': 0.18.12
      '@esbuild/linux-ppc64': 0.18.12
      '@esbuild/linux-riscv64': 0.18.12
      '@esbuild/linux-s390x': 0.18.12
      '@esbuild/linux-x64': 0.18.12
      '@esbuild/netbsd-x64': 0.18.12
      '@esbuild/openbsd-x64': 0.18.12
      '@esbuild/sunos-x64': 0.18.12
      '@esbuild/win32-arm64': 0.18.12
      '@esbuild/win32-ia32': 0.18.12
      '@esbuild/win32-x64': 0.18.12

  esbuild@0.21.5:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.21.5
      '@esbuild/android-arm': 0.21.5
      '@esbuild/android-arm64': 0.21.5
      '@esbuild/android-x64': 0.21.5
      '@esbuild/darwin-arm64': 0.21.5
      '@esbuild/darwin-x64': 0.21.5
      '@esbuild/freebsd-arm64': 0.21.5
      '@esbuild/freebsd-x64': 0.21.5
      '@esbuild/linux-arm': 0.21.5
      '@esbuild/linux-arm64': 0.21.5
      '@esbuild/linux-ia32': 0.21.5
      '@esbuild/linux-loong64': 0.21.5
      '@esbuild/linux-mips64el': 0.21.5
      '@esbuild/linux-ppc64': 0.21.5
      '@esbuild/linux-riscv64': 0.21.5
      '@esbuild/linux-s390x': 0.21.5
      '@esbuild/linux-x64': 0.21.5
      '@esbuild/netbsd-x64': 0.21.5
      '@esbuild/openbsd-x64': 0.21.5
      '@esbuild/sunos-x64': 0.21.5
      '@esbuild/win32-arm64': 0.21.5
      '@esbuild/win32-ia32': 0.21.5
      '@esbuild/win32-x64': 0.21.5

  escalade@3.1.2: {}

  escape-string-regexp@1.0.5: {}

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  follow-redirects@1.15.2(debug@4.3.4):
    optionalDependencies:
      debug: 4.3.4

  form-data@4.0.0:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      mime-types: 2.1.35

  fsevents@2.3.3:
    optional: true

  fuse.js@6.6.2: {}

  gensync@1.0.0-beta.2: {}

  globals@11.12.0: {}

  has-flag@3.0.0: {}

  html-entities@2.3.3: {}

  is-number@7.0.0: {}

  is-plain-object@5.0.0: {}

  is-what@4.1.15: {}

  js-tokens@4.0.0: {}

  jsesc@2.5.2: {}

  json5@2.2.3: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  merge-anything@5.1.7:
    dependencies:
      is-what: 4.1.15

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  ms@2.1.2: {}

  nanoid@3.3.7: {}

  node-fetch@2.6.12:
    dependencies:
      whatwg-url: 5.0.0

  node-releases@2.0.18: {}

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  picocolors@1.0.0: {}

  picocolors@1.0.1: {}

  picomatch@2.3.1: {}

  postcss@8.4.41:
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.0.1
      source-map-js: 1.2.0

  proxy-from-env@1.1.0: {}

  rollup@4.21.0:
    dependencies:
      '@types/estree': 1.0.5
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.21.0
      '@rollup/rollup-android-arm64': 4.21.0
      '@rollup/rollup-darwin-arm64': 4.21.0
      '@rollup/rollup-darwin-x64': 4.21.0
      '@rollup/rollup-linux-arm-gnueabihf': 4.21.0
      '@rollup/rollup-linux-arm-musleabihf': 4.21.0
      '@rollup/rollup-linux-arm64-gnu': 4.21.0
      '@rollup/rollup-linux-arm64-musl': 4.21.0
      '@rollup/rollup-linux-powerpc64le-gnu': 4.21.0
      '@rollup/rollup-linux-riscv64-gnu': 4.21.0
      '@rollup/rollup-linux-s390x-gnu': 4.21.0
      '@rollup/rollup-linux-x64-gnu': 4.21.0
      '@rollup/rollup-linux-x64-musl': 4.21.0
      '@rollup/rollup-win32-arm64-msvc': 4.21.0
      '@rollup/rollup-win32-ia32-msvc': 4.21.0
      '@rollup/rollup-win32-x64-msvc': 4.21.0
      fsevents: 2.3.3

  semver@6.3.1: {}

  seroval@0.5.1: {}

  snarkdown@2.0.0: {}

  solid-js@1.7.8:
    dependencies:
      csstype: 3.1.2
      seroval: 0.5.1

  solid-refresh@0.6.3(solid-js@1.7.8):
    dependencies:
      '@babel/generator': 7.25.5
      '@babel/helper-module-imports': 7.24.7
      '@babel/types': 7.25.4
      solid-js: 1.7.8
    transitivePeerDependencies:
      - supports-color

  solid-toast@0.5.0(solid-js@1.7.8):
    dependencies:
      solid-js: 1.7.8

  source-map-js@1.2.0: {}

  style-vendorizer@2.2.3: {}

  supports-color@5.5.0:
    dependencies:
      has-flag: 3.0.0

  to-fast-properties@2.0.0: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  tr46@0.0.3: {}

  typescript@4.9.5: {}

  undici-types@6.19.8: {}

  universal-user-agent@6.0.0: {}

  update-browserslist-db@1.1.0(browserslist@4.23.3):
    dependencies:
      browserslist: 4.23.3
      escalade: 3.1.2
      picocolors: 1.0.1

  validate-html-nesting@1.2.2: {}

  vite-plugin-css-injected-by-js@3.2.0(vite@5.4.2(@types/node@20.16.1)):
    dependencies:
      vite: 5.4.2(@types/node@20.16.1)

  vite-plugin-mkcert@1.16.0(vite@5.4.2(@types/node@20.16.1)):
    dependencies:
      '@octokit/rest': 19.0.13
      axios: 1.4.0(debug@4.3.4)
      debug: 4.3.4
      picocolors: 1.0.0
      vite: 5.4.2(@types/node@20.16.1)
    transitivePeerDependencies:
      - encoding
      - supports-color

  vite-plugin-restart@0.4.1(vite@5.4.2(@types/node@20.16.1)):
    dependencies:
      micromatch: 4.0.8
      vite: 5.4.2(@types/node@20.16.1)

  vite-plugin-solid@2.10.2(solid-js@1.7.8)(vite@5.4.2(@types/node@20.16.1)):
    dependencies:
      '@babel/core': 7.25.2
      '@types/babel__core': 7.20.5
      babel-preset-solid: 1.8.19(@babel/core@7.25.2)
      merge-anything: 5.1.7
      solid-js: 1.7.8
      solid-refresh: 0.6.3(solid-js@1.7.8)
      vite: 5.4.2(@types/node@20.16.1)
      vitefu: 0.2.5(vite@5.4.2(@types/node@20.16.1))
    transitivePeerDependencies:
      - supports-color

  vite@5.4.2(@types/node@20.16.1):
    dependencies:
      esbuild: 0.21.5
      postcss: 8.4.41
      rollup: 4.21.0
    optionalDependencies:
      '@types/node': 20.16.1
      fsevents: 2.3.3

  vitefu@0.2.5(vite@5.4.2(@types/node@20.16.1)):
    optionalDependencies:
      vite: 5.4.2(@types/node@20.16.1)

  webidl-conversions@3.0.1: {}

  whatwg-url@5.0.0:
    dependencies:
      tr46: 0.0.3
      webidl-conversions: 3.0.1

  wrappy@1.0.2: {}

  yallist@3.1.1: {}

</file>
<file name="plugins/index.html">
&lt;html>
&lt;head>
  &lt;meta charset="UTF-8" />
  &lt;title>Pengu Loader&lt;/title>
&lt;/head>
&lt;body
  style="margin: 0; padding: 0; width: 100%; height: 100%;
    background-color: black;
    background-position: center;
    background-repeat: no-repeat;
    background-image: url(https://4.bp.blogspot.com/-eHzk7yHQQvo/Vt3fN2vNtUI/AAAAAAAAL60/s6i1VmnsZfo/s1600/1-Game-Lobby-PBE.jpg);">
  &lt;div id="pengu-root">&lt;/div>
  &lt;script type="module" src="/src/views/index.tsx">&lt;/script>
&lt;/body>
&lt;/html>
</file>
<file name="plugins/src/types.d.ts">
// internal types

interface Plugin {
  init?: (context: any) => any
  load?: () => any
  default?: Function | any
}

interface RcpAnnouceEvent extends CustomEvent {
  errorHandler: () => any
  registrationHandler: (registrar: (e) => Promise&lt;any>) => Promise&lt;any> | void
}

// built-in types

interface Action {
  id?: string
  name: string | (() => string)
  legend?: string | (() => string)
  tags?: string[]
  icon?: string
  group?: string | (() => string)
  hidden?: boolean
  perform?: (id?: string) => any
}

interface CommandBar {
  addAction: (action: Action) => void
  show: () => void
  update: () => void
}

interface Toast {
  success: (message: string) => void
  error: (message: string) => void
  promise: &lt;T>(
    promise: Promise&lt;T>,
    msg: { loading: string, success: string, error: string }
  ) => Promise&lt;T>
}

interface DataStore {
  has: (key: string) => boolean
  get: &lt;T>(key: string, fallback?: T) => T | undefined
  set: (key: string, value: any) => boolean
  remove: (key: string) => boolean
}

interface ApplyEffectFn {
  (type: 'transparent' | 'blurbehind' | 'acrylic' | 'unified', options?: { color: string }): void
  (type: 'mica', options?: { material?: 'auto' | 'mica' | 'acrylic' | 'tabbed' }): void
  (type: 'vibrancy', options: { material: string, alwaysOn?: boolean }): void
}

interface Effect {
  apply: ApplyEffectFn
  clear: () => void
  setTheme: (theme: 'light' | 'dark') => void
}

// globals

declare interface Window {

  DataStore: DataStore;
  CommandBar: CommandBar;
  Toast: Toast;
  Effect: Effect;

  Pengu: {
    version: string
    superPotato: boolean
    plugins: string[]
    isMac: boolean
  };

  os: {
    name: 'win' | 'mac'
    version: string
    build: string
  };

  openDevTools: () => void;
  openPluginsFolder: (subdir?: string) => void;
  reloadClient: () => void;
  restartClient: () => void;
  getScriptPath: () => string | undefined;

  __llver: string;
}
</file>
<file name="plugins/src/index.ts">
import './preload';
import './views';
</file>
<file name="plugins/src/views/style.css">
body {
  position: relative;
}

#pengu-root {
  font-size: .875rem;
  font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
}

div[id^=index_loading_div] {
  background-color: #010a13;
}

div[id^=index_loading_div]>img {
  display: none;
}

div[id^=index_loading_div]::before {
  content: '';
  background-image: url(/lol-game-data/assets/v1/profile-icons/4216.jpg);
  background-repeat: no-repeat;
  background-size: cover;
  width: 144px;
  height: 144px;
  border-radius: 50%;
}

div[id^=index_loading_div]:after {
  margin-top: 32px;
  content: "Pengu-Powered";
  color: #e2e1e1;
  font-family: 'Inter', sans-serif;
  font-size: 1rem;
  text-transform: uppercase;
}
</file>
<file name="plugins/src/views/env.d.ts">
/// &lt;reference types="vite/client" />

</file>
<file name="plugins/src/views/index.tsx">
/* @refresh reload */
import { render } from 'solid-js/web';
import App from './App';
import './style.css';

import install from '@twind/with-web-components';
import config from '../../twind.config';
import { loadTranslation } from './lib/i18n';

const rootId = 'pengu-root';
const withTwind = install(config);

class PenguRoot extends withTwind(HTMLElement) {
  constructor() {
    super();
    const shadow = this.attachShadow({ mode: 'open' });
    render(() => &lt;App />, shadow);
  }
}

async function mount() {

  await loadTranslation();

  let root = document.getElementById(rootId);
  if (!root) {
    root = document.createElement('div');
    root.setAttribute('id', rootId);
    document.body.appendChild(root);
  }

  await customElements.whenDefined(rootId);
  const twind = document.createElement(rootId);
  root.appendChild(twind);
}

customElements.define(rootId, PenguRoot);
window.addEventListener('load', mount);
</file>
<file name="plugins/src/views/App.tsx">
import { Toaster } from './components/Toaster';
import { CommandBar } from './components/CommandBar';
import { Welcome } from './components/Welcome';

export default function App() {
  return (
    &lt;div>
      &lt;Welcome />
      &lt;CommandBar />
      &lt;Toaster
        gutter={8}
        position="bottom-right"
      />
    &lt;/div>
  )
}
</file>
<file name="plugins/src/views/trans.json">
{
  "fallback": "en-US",
  "translations": [
    {
      "_locales": ["en-US", "en-GB", "en-AU"],
      "welcome_msg": "Hi Summoner, your Pengu has been successfully loaded and we hope you enjoy it! Join our community to get more 😎 awesome plugins and themes now 👇",
      "dont_show_again": "Do not show again",
      "active_status": "Pengu Loader is active!",
      "update_available": "New update available",
      "update_hint": "You have to close the Client and open Pengu Loader to get it.",
      "cmdbar_type_hint": "Type a command or search...",
      "act_visit_home": "Visit homepage",
      "act_open_devtools": "Open DevTools",
      "act_open_plugins": "Open plugins folder",
      "act_reload": "Reload Client",
      "act_restart": "Restart Client",
      "act_create_aram": "Create ARAM lobby",
      "act_create_normal": "Create 5v5 SR lobby",
      "act_practice_tool": "Create Practice Tool",
      "act_quit_pvp": "Quit PvP champ-select"
    },
    {
      "_locales": ["vi-VN", "vn-VN"],
      "welcome_msg": "Chào bạn gì đó ơi, Pengu đã được tải thành công và hi vọng bạn sẽ thích nó. Nhập hội cùng chúng mình để tìm thêm 😎 các theme và plugin tuyệt vời khác nhé 👇",
      "dont_show_again": "Không hiển thị lại",
      "active_status": "Pengu Loader đang hoạt động!",
      "update_available": "Đã có phiên bản mới",
      "update_hint": "Bạn nên đóng Client và chạy Pengu Loader để cập nhật nó.",
      "cmdbar_type_hint": "Gõ một lệnh hoặc tìm gì đó...",
      "act_visit_home": "Ghé thăm trang chủ",
      "act_open_devtools": "Mở DevTools",
      "act_open_plugins": "Mở thư mục plugins",
      "act_reload": "Tải lại Client",
      "act_restart": "Khởi động lại Client",
      "act_create_aram": "Tạo trận ARAM",
      "act_create_normal": "Tạo trận 5v5 SR",
      "act_practice_tool": "Tạo trận phòng tập",
      "act_quit_pvp": "Thoát chọn tướng PvP"
    },
    {
      "_locales": ["zh-CN"],
      "welcome_msg": "嗨，召唤师！你安装的插件已经成功载入！加入我们的社区😎以获得更多插件和主题 👇",
      "dont_show_again": "不再显示",
      "active_status": "Pengu Loader已激活！",
      "update_available": "有新版本可用",
      "update_hint": "您必须关闭客户端然后打开 Pengu Loader 才能获取更新。",
      "cmdbar_type_hint": "输入以搜索命令...",
      "act_visit_home": "访问 Pengu Loader 主页",
      "act_open_devtools": "打开开发者工具",
      "act_open_plugins": "打开插件文件夹",
      "act_reload": "软重启客户端",
      "act_restart": "硬重启客户端",
      "act_create_aram": "创建大乱斗房间",
      "act_create_normal": "创建单双排房间",
      "act_practice_tool": "创建训练模式房间",
      "act_quit_pvp": "秒退（仅限PVP模式）"
    },
    {
      "_locales": ["zh-TW"],
      "welcome_msg": "嗨，召喚師！您的插件已經成功載入！加入我們的社群😎以獲得更多插件和主題👇",
      "dont_show_again": "不再顯示",
      "active_status": "Pengu Loader已啟用！",
      "update_available": "有新版本可用",
      "update_hint": "您必须关闭客户端然后打开 Pengu Loader 才能获取更新。",
      "cmdbar_type_hint": "輸入以搜尋命令...",
      "act_visit_home": "訪問 Pengu Loader 主頁",
      "act_open_devtools": "打開開發者工具",
      "act_open_plugins": "打開插件資料夾",
      "act_reload": "重載客戶端",
      "act_restart": "重啟客戶端",
      "act_create_aram": "創建隨機單中房間",
      "act_create_normal": "創建5V5單排房間",
      "act_practice_tool": "創建練習模式",
      "act_quit_pvp": "跳GAME(僅限PVP模式)"
    },
    {
      "_locales": ["fr-FR", "fr-CA", "fr-BE", "fr-CH", "fr-LU"],
      "welcome_msg": "Salut Invocateur, ton Pengu a été chargé avec succès et nous espérons que tu l'apprécieras ! Rejoins notre communauté pour obtenir plus de 😎 plugins et thèmes géniaux maintenant 👇",
      "dont_show_again": "Ne plus afficher",
      "active_status": "Pengu Loader est actif !",
      "update_available": "Nouvelle mise à jour disponible",
      "update_hint": "Vous devez fermer le Client et ouvrir Pengu Loader pour l'obtenir.",
      "cmdbar_type_hint": "Tapez une commande ou recherchez...",
      "act_visit_home": "Visiter la page d'accueil",
      "act_open_devtools": "Ouvrir les DevTools",
      "act_open_plugins": "Ouvrir le dossier des plugins",
      "act_reload": "Recharger le Client",
      "act_restart": "Redémarrer le Client",
      "act_create_aram": "Créer un lobby ARAM",
      "act_create_normal": "Créer un lobby SR 5v5",
      "act_practice_tool": "Créer un lobby Entraînement",
      "act_quit_pvp": "Quitter la sélection de champion PvP"
    },
    {
      "_locales": ["pt-BR", "pt-PT"],
      "welcome_msg": "Olá Invocador, o Pengu foi carregado com sucesso, esperamos que você aproveite! Junte-se à nossa comunidade para obter mais 😎 plugins e temas incríveis agora 👇",
      "dont_show_again": "Não mostrar novamente",
      "active_status": "Pengu Loader está ativo!",
      "update_available": "Nova atualização disponível",
      "update_hint": "Você precisa fechar o Cliente e abrir o Pengu Loader para obtê-la.",
      "cmdbar_type_hint": "Digite um comando ou pesquise...",
      "act_visit_home": "Visitar página inicial",
      "act_open_devtools": "Abrir Ferramentas de Desenvolvedor",
      "act_open_plugins": "Abrir pasta de plugins",
      "act_reload": "Recarregar Cliente",
      "act_restart": "Reiniciar Cliente",
      "act_create_aram": "Criar sala ARAM",
      "act_create_normal": "Criar sala 5v5 SR",
      "act_practice_tool": "Criar sala de Treino",
      "act_quit_pvp": "Sair da seleção de campeões PvP"
    },
    {
      "_locales": ["ru-RU"],
      "welcome_msg": "Привет Призыватель, ваш Pengu был успешно загружен и мы надеемся вы насладитесь им! Присоединитесь к нашему сообществу сейчас, чтобы найти больше 😎 классных плагинов и тем 👇",
      "dont_show_again": "Не показывать снова",
      "active_status": "Pengu Loader работает!",
      "update_available": "Доступно новое обновление",
      "update_hint": "Чтобы обновление применилось, вы должны закрыть клиент и открыть Pengu Loader.",
      "cmdbar_type_hint": "Введите команду или запрос...",
      "act_visit_home": "Вернуться на главную страницу",
      "act_open_devtools": "Открыть инструменты для разработчиков",
      "act_open_plugins": "Открыть папку плагинов",
      "act_reload": "Перезагрузить клиент",
      "act_restart": "Перезапустить клиент",
      "act_create_aram": "Создать лобби ARAM",
      "act_create_normal": "Создать лобби 5x5 УП",
      "act_practice_tool": "Создать лобби с инструментом для тренировки",
      "act_quit_pvp": "Выйти из выбора чемпионов (PvP)" 
    }
  ]
}
</file>
<file name="plugins/src/views/components/Toaster.tsx">
import toast, { ToastOptions } from 'solid-toast';

const options: ToastOptions = {
  position: 'bottom-right',
  duration: 5000
};

window.Toast = {

  success(message) {
    toast.success(message, options);
  },

  error(message) {
    toast.error(message, options)
  },

  promise(promise, msg) {
    return toast.promise(promise, msg, options);
  },
};

export { Toaster, toast } from 'solid-toast';
</file>
<file name="plugins/src/views/components/Welcome.tsx">
import { Show, createSignal, onMount } from 'solid-js';
import penguLogo from '../assets/pengu.jpg';
import { toast } from './Toaster';
import { _t } from '../lib/i18n';
import { fetchUpdate } from '../lib/updater';

async function doCheckUpdate() {
  const update = await fetchUpdate();
  if (update === false) return;

  toast.custom((t) => {
    return (
      &lt;div class={`${!t.visible &amp;&amp; 'hidden'} relative w-[370px] bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden`}>
        &lt;div class="p-2">
          &lt;div class="flex items-start">
            &lt;div class="flex-shrink-0 pt-[2px] text-gray-600">
              &lt;svg width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                &lt;path stroke="none" d="M0 0h24v24H0z" fill="none">&lt;/path>
                &lt;path d="M9 12h-3.586a1 1 0 0 1 -.707 -1.707l6.586 -6.586a1 1 0 0 1 1.414 0l6.586 6.586a1 1 0 0 1 -.707 1.707h-3.586v3h-6v-3z">&lt;/path>
                &lt;path d="M9 21h6">&lt;/path>
                &lt;path d="M9 18h6">&lt;/path>
              &lt;/svg>
            &lt;/div>
            &lt;div class="ml-3 w-0 flex-1 pt-0.5">
              &lt;p class="text-sm font-bold text-sky-500">{_t('update_available')} - {update.version}&lt;/p>
              &lt;p class="mt-1 text-sm text-gray-700">{_t('update_hint')}&lt;/p>
            &lt;/div>
            &lt;div class="ml-4 flex-shrink-0 flex">
              &lt;button
                class="bg-white rounded-md inline-flex text-gray-400 hover:text-gray-500"
                onClick={() => toast.dismiss(t.id)}
              >
                &lt;svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  &lt;path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                &lt;/svg>
              &lt;/button>
            &lt;/div>
          &lt;/div>
        &lt;/div>

      &lt;/div>
    )
  }, { duration: 30000, position: 'bottom-left' });
}

export function Welcome() {

  const welcome = window.DataStore?.get&lt;boolean>('pengu-welcome', true) !== false;
  const [visible, show] = createSignal(welcome);

  const dontShowCheck = (e) => {
    const value = !e.currentTarget.value;
    window.DataStore?.set('pengu-welcome', value);
  };

  const hide = () => {
    show(false);
  };

  if (!welcome) {
    onMount(() => {
      toast.success(_t('active_status'), {
        position: 'bottom-left',
        duration: 7000
      });
    });
  }

  onMount(doCheckUpdate);

  return (
    &lt;Show when={visible()}>
      &lt;div class="z-10 relative">
        &lt;div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity">&lt;/div>
        &lt;div class="fixed inset-0 z-10 overflow-y-auto">
          &lt;div class="flex min-h-full justify-center text-center items-center p-0">
            &lt;div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all my-8 max-w-lg">
              &lt;div class="bg-white px-4 pt-5 p-6 pb-4">
                &lt;div class="sm:flex sm:items-start">
                  &lt;div class="mx-auto flex flex-shrink-0 items-center justify-center h-10 w-10">
                    &lt;img src={penguLogo} class="w-10 h-10 rounded" alt="" />
                  &lt;/div>
                  &lt;div class="ml-4 mt-0 text-left">
                    &lt;h3 class="text-base mt-0 font-semibold leading-6 text-gray-900">Pengu Loader&lt;/h3>
                    &lt;div class="mt-2">
                      &lt;div class="text-sm text-black">{_t('welcome_msg')}&lt;/div>
                      &lt;div class="flex mt-5 space-x-1">
                        &lt;a href="https://chat.pengu.lol/" target="_blank" rel="noreferrer" class="opacity-90 hover:opacity-100">
                          &lt;img src="https://img.shields.io/discord/1069483280438673418?style=flat-square&amp;logo=discord&amp;logoColor=white&amp;label=discord&amp;color=5c5fff" alt="" />
                        &lt;/a>
                        &lt;a href="https://pengu.lol/" target="_blank" rel="noreferrer" class="opacity-90 hover:opacity-100">
                          &lt;img src="https://img.shields.io/badge/-pengu.lol-607080.svg?&amp;style=flat-square&amp;logo=gitbook&amp;logoColor=white" alt="" />
                        &lt;/a>
                        &lt;a href="https://github.com/PenguLoader/PenguLoader/" target="_blank" rel="noreferrer" class="opacity-90 hover:opacity-100">
                          &lt;img src="https://img.shields.io/github/stars/PenguLoader/PenguLoader?style=flat-square&amp;logo=github" alt="" />
                        &lt;/a>
                      &lt;/div>
                    &lt;/div>
                  &lt;/div>
                &lt;/div>
              &lt;/div>
              &lt;div class="bg-gray-50 py-3 flex flex-row justify-between items-center px-6">
                &lt;div class="flex items-center space-x-2">
                  &lt;input type="checkbox" id="TxrO6Gew" onChange={dontShowCheck} class="h-4 w-4 rounded border-gray-300 outline-none" />
                  &lt;label for="TxrO6Gew" class="text-sm font-medium text-gray-700">{_t('dont_show_again')}&lt;/label>
                &lt;/div>
                &lt;button
                  onClick={hide}
                  type="button"
                  class="uppercase text-sm outline-none border-none bg-gray-300/60 px-3 py-1 text-gray-900 rounded hover:bg-gray-300 cursor-pointer"
                >Okay&lt;/button>
              &lt;/div>
            &lt;/div>
          &lt;/div>
        &lt;/div>
      &lt;/div>
    &lt;/Show>
  )
}
</file>
<file name="plugins/src/views/components/CommandBar/SearchResults.tsx">
import { For, Show, createEffect, createMemo, on, onCleanup, onMount } from 'solid-js';
import Fuse from 'fuse.js';
import { useRoot, VisualState } from './root';
import { SearchItem } from './SearchItem';
import { evaluate } from './utils';

function evalAction(action: Action, path: string | string[]): string {
  if (Array.isArray(path))
    path = path[0];
  if (path === 'name' || path === 'group')
    return evaluate(action[path]);
  else
    return action[path as string];
}

export function SearchResults() {

  let containerRef: HTMLDivElement;
  const { search, actions, activeIndex, setActiveIndex, setVisualState, hidden } = useRoot();

  const filteredItems = createMemo(() => {
    if (search().length === 0) {
      return actions()
        .filter(item => !item.hidden);
    }

    const fuse = new Fuse(actions(), {
      distance: 200,
      threshold: 0.4,
      includeScore: true,
      keys: ['name', 'tags', 'group'],
      getFn: evalAction
    });

    return fuse.search(search())
      .filter(item => !item.item.hidden || (item.item.hidden &amp;&amp; item.score! > 0))
      .sort((a, b) => b.score! - a.score!)
      .map(item => item.item);
  });

  function shouldShowCategory(item: Action, index: number) {
    if (index == 0) return true;
    if (typeof filteredItems()[index - 1] === 'undefined') return false;
    return item.group !== filteredItems()[index - 1].group;
  }

  function scrollToActiveItem() {
    if (hidden() || !containerRef) return;
    const activeElement: HTMLElement = containerRef.querySelector(`div[data-index="${activeIndex()}"]`)!;
    if (!activeElement) return;
    const newScrollPos = (activeElement.offsetTop + activeElement.offsetHeight) - containerRef.offsetHeight;
    if (newScrollPos > 0) {
      containerRef.scrollTop = newScrollPos;
    } else {
      containerRef.scrollTop = 0;
    }
  }

  function execute(index: number) {
    if (hidden()) return;
    const item = filteredItems()[index];
    setActiveIndex(index);
    setVisualState(VisualState.AnimatingOut);
    if (typeof item.perform === 'function') {
      item.perform(item.id);
    }
  }

  const handleKeyDown = (e: KeyboardEvent) => {
    if (e.isComposing) return;
    if (e.key === 'ArrowUp') {
      e.preventDefault();
      setActiveIndex(index => index &amp;&amp; index - 1);
      scrollToActiveItem();
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      setActiveIndex(index => index &lt; filteredItems().length - 1 ? index + 1 : index);
      scrollToActiveItem();
    } else if (e.key === 'Enter') {
      e.preventDefault();
      execute(activeIndex());
    } else if (e.code === 'Escape') {
      e.preventDefault();
      setVisualState(VisualState.AnimatingOut);
    }
  };

  onMount(() => {
    createEffect(on(filteredItems, () => {
      setActiveIndex(0);
      scrollToActiveItem();
    }));

    window.addEventListener('keydown', handleKeyDown);
    onCleanup(() => window.removeEventListener('keydown', handleKeyDown));
  });

  return (
    &lt;div
      ref={containerRef!}
      class="max-h-[320px] overflow-y-auto overflow-x-hidden scroll-smooth"
    >
      &lt;For each={filteredItems()}>
        {(item, index) => (
          &lt;div class="pb-1 space-y-1">
            &lt;Show when={shouldShowCategory(item, index())}>
              &lt;div class="px-1 overflow-hidden text-gray-700">
                &lt;div class="px-2 py-1 my-1 text-xs font-medium text-neutral-500 capitalize">
                  {evaluate(item.group)}
                &lt;/div>
              &lt;/div>
            &lt;/Show>
            &lt;SearchItem item={item} index={index()} click={() => execute(index())} />
          &lt;/div>
        )}
      &lt;/For>
    &lt;/div>
  )
}
</file>
<file name="plugins/src/views/components/CommandBar/utils.ts">
import { Accessor, createEffect, createSignal, onCleanup } from 'solid-js';

export function evaluate(value?: string | (() => string)) {
  if (typeof value === 'string') {
    return value;
  } else if (typeof value === 'function') {
    return value();
  } else {
    return '';
  }
}

export function useThrottledValue&lt;T>(value: Accessor&lt;T>, ms = 50) {
  if (ms == 0) return value;

  const [throttledValue, setThrottledValue] = createSignal(value());
  const [lastRan, setLastRan] = createSignal(Date.now());

  createEffect(() => {
    const timeout = setTimeout(() => {
      setThrottledValue(value);
      setLastRan(Date.now());
    }, lastRan() - (Date.now() - ms));

    onCleanup(() => clearTimeout(timeout));
  });

  return throttledValue;
}
</file>
<file name="plugins/src/views/components/CommandBar/index.tsx">
import { Show, onMount } from 'solid-js';
import { useRoot, VisualState } from './root';
import { SearchBar } from './SearchBar';
import { SearchResults } from './SearchResults';
import { Animator } from './Animator';

export function CommandBar() {

  const { hidden, setVisualState } = useRoot();

  onMount(() => {
    window.addEventListener('keydown', e => {
      if (e.ctrlKey &amp;&amp; e.code === 'KeyK' &amp;&amp; hidden()) {
        e.preventDefault();
        setVisualState(VisualState.AnimatingIn);
      }
    });
  });

  const backdropClick = () => {
    setVisualState(VisualState.AnimatingOut);
  };

  return (
    &lt;Show when={!hidden()}>
      &lt;div class="fixed top-0 left-0 z-[99] flex items-center justify-center w-screen h-screen">
        &lt;div
          class="absolute inset-0 w-full h-full bg-black bg-opacity-40"
          onClick={backdropClick}
        />
        &lt;div class="flex min-h-[370px] justify-center w-full max-w-xl items-start relative">
          &lt;Animator>
            &lt;div class="box-border flex flex-col w-full h-full overflow-hidden
           bg-white rounded-md shadow-md bg-opacity-90 drop-shadow-md backdrop-blur-sm">
              &lt;SearchBar />
              &lt;SearchResults />
            &lt;/div>
          &lt;/Animator>
        &lt;/div>
      &lt;/div>
    &lt;/Show>
  )
}
</file>
<file name="plugins/src/views/components/CommandBar/Animator.tsx">
import { children, createEffect, createSignal, on, onCleanup } from 'solid-js';
import { useRoot, VisualState } from './root';

const appearanceAnimationKeyframes = [
  { opacity: '0', transform: 'scale(.95)', },
  { opacity: '1', transform: 'scale(1.05)' },
  { opacity: '1', transform: 'scale(1)' },
];

const bumpAnimationKeyframes = [
  { transform: 'scale(1)', },
  { transform: 'scale(.96)', },
  { transform: 'scale(1)', },
];

export function Animator(props) {

  let outerRef: HTMLDivElement;
  let innerRef: HTMLDivElement;

  const resolved = children(() => props.children);

  const { visualState, setVisualState } = useRoot();
  const enterMs = 100;
  const exitMs = 100;

  createEffect(on(visualState, (state) => {
    if (state === VisualState.Showing) return;

    const anim = outerRef.animate(appearanceAnimationKeyframes, {
      duration: state === VisualState.AnimatingIn ? enterMs : exitMs,
      easing: state === VisualState.AnimatingOut ? 'ease-in' : 'ease-out',
      direction: state === VisualState.AnimatingOut ? 'reverse' : 'normal',
      fill: 'forwards',
    });

    anim.addEventListener('finish', () => {
      setVisualState((state) => {
        const visible = state === VisualState.AnimatingIn || state === VisualState.Showing;
        return visible ? VisualState.Showing : VisualState.Hidden;
      });
    });
  }));

  const [previousHeight, setPreviousHeight] = createSignal(0);
  createEffect(() => {
    if (visualState() === VisualState.Showing) {
      if (!outerRef || !innerRef) {
        return;
      }

      const ro = new ResizeObserver((entries) => {
        for (const entry of entries) {
          const cr = entry.contentRect;

          if (!previousHeight()) {
            setPreviousHeight(cr.height);
          }

          outerRef.animate(
            [
              { height: `${previousHeight()}px`, },
              { height: `${cr.height}px`, },
            ],
            {
              duration: enterMs / 2,
              easing: 'ease-out',
              fill: 'forwards',
            }
          );

          setPreviousHeight(cr.height);
        }
      });

      ro.observe(innerRef);
      onCleanup(() => ro.unobserve(innerRef));
    }
  });

  const [firstRender, setFirstRender] = createSignal(true);
  createEffect(() => {
    if (firstRender()) {
      setFirstRender(false);
      return;
    }
    outerRef.animate(bumpAnimationKeyframes, {
      duration: enterMs,
      easing: 'ease-out',
    });
  });

  return (
    &lt;div
      ref={outerRef!}
      class="w-full h-full"
      style={appearanceAnimationKeyframes[0]}
    >
      &lt;div ref={innerRef!}>
        {resolved()}
      &lt;/div>
    &lt;/div>
  )
}
</file>
<file name="plugins/src/views/components/CommandBar/SearchItem.tsx">
import { Show } from 'solid-js';
import { useRoot } from './root';
import { evaluate } from './utils';

interface Props {
  item: Action
  index: number
  click: () => any
}

export function SearchItem(props: Props) {

  const { activeIndex, setActiveIndex } = useRoot();

  return (
    &lt;div class="px-1">
      &lt;div
        data-index={props.index}
        data-active={activeIndex() === props.index}
        onClick={props.click}
        onMouseMove={() => setActiveIndex(props.index)}
        class="cursor-pointer relative flex select-none items-center rounded px-2 py-1.5
          text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50
          data-[active=true]:bg-slate-700 data-[active=true]:text-white"
      >
        &lt;Show when={props.item.icon}>
          &lt;span innerHTML={props.item.icon}>&lt;/span>
        &lt;/Show>
        &lt;span>{evaluate(props.item.name)}&lt;/span>
        &lt;Show when={props.item.legend}>
          &lt;span class="ml-auto text-xs tracking-widest">{evaluate(props.item.legend)}&lt;/span>
        &lt;/Show>
      &lt;/div>
    &lt;/div>
  )
}
</file>
<file name="plugins/src/views/components/CommandBar/SearchBar.tsx">
import { onMount } from 'solid-js';
import { useRoot } from './root';
import { _t } from '../../lib/i18n';

export function SearchBar() {
  let input: HTMLInputElement;
  const { search, setSearch, setActiveIndex } = useRoot();

  onMount(() => {
    setSearch('');
    setActiveIndex(0);
    input.focus();
  });

  const onKeyDown = (e: KeyboardEvent) => {
    if (e.key === 'ArrowUp') {
      e.preventDefault();
    }
  };

  return (
    &lt;div class="flex items-center px-3 border-b border-gray-300 bg-white/90">
      &lt;svg
        class="w-4 h-4 mr-0 text-neutral-400 shrink-0"
        xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
      >
        &lt;circle cx="11" cy="11" r="8">&lt;/circle>
        &lt;line x1="21" x2="16.65" y1="21" y2="16.65">&lt;/line>
      &lt;/svg>
      &lt;input
        ref={input!}
        type="text" value={search()}
        onKeyDown={onKeyDown}
        onInput={e => setSearch(e.target.value)}
        onBlur={() => setTimeout(() => input.focus(), 50)}
        class="flex w-full px-2 py-3 text-sm bg-transparent border-none rounded-md outline-none
        placeholder:text-neutral-400 h-11 disabled:cursor-not-allowed disabled:opacity-50"
        placeholder={_t('cmdbar_type_hint')} autocomplete="off" autocorrect="off" spellcheck={false}
      />
    &lt;/div>
  )
}
</file>
<file name="plugins/src/views/components/CommandBar/data.ts">
import { _t } from '../../lib/i18n';

enum QueueId {
  DraftPick = 400,
  SoloDuo = 420,
  BlindPick = 430,
  Flex = 440,
  ARAM = 450,
  Clash = 700,
  IntroBots = 830,
  BeginnerBots = 840,
  IntermediateBots = 850,
  ARURF = 900,
  TFTNormal = 1090,
  TFTRanked = 1100,
  TFTTutorial = 1110,
  TFTHyperRoll = 1130,
  TFTDoubleUp = 1160,
  NexusBlitz = 1300,
  Tutorial1 = 2000,
  Tutorial2 = 2010,
  Tutorial3 = 2020,

  PracticeTool = 0xFFFF,
}

async function createLobby(queueId: QueueId) {
  let body: any = { queueId };
  if (queueId === QueueId.PracticeTool) {
    body = {
      customGameLobby: {
        configuration: {
          gameMode: 'PRACTICETOOL',
          gameMutator: '',
          gameServerRegion: '',
          mapId: 11,
          mutators: { id: 1 },
          spectatorPolicy: 'AllAllowed',
          teamSize: 5
        },
        lobbyName: 'Game ' + Math.floor(Math.random() * 0xFFFFFFFF).toString(36),
        lobbyPassword: null
      },
      isCustom: true
    }
  }

  await fetch('/lol-lobby/v2/lobby', {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
      'Content-Type': 'application/json'
    }
  });
}

async function quitPvPChampSelect() {
  const params = new URLSearchParams({
    destination: 'lcdsServiceProxy',
    method: 'call',
    args: JSON.stringify(['', 'teambuilder-draft', 'quitV2', '']),
  });
  const url = '/lol-login/v1/session/invoke?' + params.toString();
  await fetch(url, { method: 'POST' });
}

const ACTIONS: Record&lt;string, Action[]> = {
  pengu: [
    {
      name: _t.bind(null, 'act_visit_home'),
      legend: 'pengu.lol',
      perform: () => window.open('https://pengu.lol', '_blank')
    },
    {
      name: _t.bind(null, 'act_open_devtools'),
      legend: 'F12',
      tags: ['dev', 'console'],
      perform: () => window.openDevTools?.()
    },
    {
      name: _t.bind(null, 'act_open_plugins'),
      tags: ['dev'],
      perform: () => window.openPluginsFolder?.()
    },
    {
      name: _t.bind(null, 'act_reload'),
      legend: 'Ctrl Shift R',
      hidden: true,
      perform: () => window.reloadClient?.()
    },
    {
      name: _t.bind(null, 'act_restart'),
      legend: 'Ctrl Shift Enter',
      hidden: true,
      perform: () => window.restartClient?.()
    }
  ],
  lobby: [
    {
      name: _t.bind(null, 'act_create_aram'),
      perform: () => createLobby(QueueId.ARAM)
    },
    {
      name: _t.bind(null, 'act_create_normal'),
      perform: () => createLobby(QueueId.BlindPick)
    },
    {
      name: _t.bind(null, 'act_practice_tool'),
      perform: () => createLobby(QueueId.PracticeTool)
    },
  ],
  uncategorized: [
    {
      name: _t.bind(null, 'act_quit_pvp'),
      hidden: true,
      perform: () => quitPvPChampSelect()
    }
  ]
};

export const DEFAULT_ACTIONS: Action[] = Object.keys(ACTIONS)
  .flatMap(k => ACTIONS[k].map(v => ({ ...v, group: k })));
</file>
<file name="plugins/src/views/components/CommandBar/root.ts">
import { createMemo, createRoot, createSignal, on } from 'solid-js';
import { DEFAULT_ACTIONS } from './data';

const ACTION_LIST = [...DEFAULT_ACTIONS];

export enum VisualState {
  Hidden = 0,
  AnimatingIn,
  Showing,
  AnimatingOut,
}

const root = createRoot(() => {
  const [updated, triggerUpdate] = createSignal(undefined, { equals: false });
  const actions = createMemo(on(updated, () => ACTION_LIST), ACTION_LIST, { equals: false });

  const [search, setSearch] = createSignal('');
  const [activeIndex, setActiveIndex] = createSignal(0);
  const [visualState, setVisualState] = createSignal(VisualState.Hidden);
  const hidden = createMemo(() => visualState() === VisualState.Hidden);

  function addAction(item: Action) {
    if (typeof item !== 'object' || !item.name) {
      console.warn('[CommandBar] Action item should be an object with `name` and `perform` props.')
      return;
    }

    const action = { ...item };

    if (!action.group || typeof action.group !== 'string') {
      action.group = 'uncategorized';
    }

    ACTION_LIST.push(action);
    triggerUpdate();
  }

  window.CommandBar = {
    addAction,
    show: () => setVisualState(VisualState.AnimatingIn),
    update: () => triggerUpdate(),
  }

  return {
    actions,
    search, setSearch,
    activeIndex, setActiveIndex,
    visualState, setVisualState, hidden,
  }
});

export const useRoot = () => root;

</file>
<file name="plugins/src/views/lib/updater.ts">
import snarkdown from 'snarkdown';

const GITHUB_REPO = 'PenguLoader/PenguLoader';

function parseVersion(version: string) {
  const match = /v?(\d+(?:\.\d+){2,3})/i.exec(version);
  if (!match) return 0;
  const nums = match[1].split('.').map(Number);
  return (nums[0] * 10000 ** 2)
    + (nums[1] * 10000) + (nums[2])
    + ((nums[3] ?? 0) / 10000);
}

export async function fetchUpdate() {
  const currentVersion = window.Pengu?.version || window.__llver || 'v0.0.0';
  try {
    const res = await fetch(`https://api.github.com/repos/${GITHUB_REPO}/releases/latest`);
    const release = await res.json();
    const latestVersion: string = release['tag_name'];
    if (parseVersion(latestVersion) > parseVersion(currentVersion)) {
      return {
        old: currentVersion,
        version: latestVersion,
        changelog: snarkdown(release['body'])
      };
    }
  } catch (err) {
    console.warn('Pengu failed to fetch update.', err);
  }
  return false;
}
</file>
<file name="plugins/src/views/lib/i18n.ts">
import { fallback, translations } from '../trans.json';

type Translation = Record&lt;string, string>;
type TranslationKey = keyof typeof translations[0];

let _T: Translation;

function findTranslation(locale: string) {
  locale = locale.toLowerCase();
  for (const trans of translations) {
    if (trans._locales.some(l => l.toLowerCase() === locale)) {
      return trans as any;
    }
  }
}

export async function loadTranslation() {
  let locale = fallback;
  try {
    // cant use body's dataset before rcp get loads
    const data = await fetch('/riotclient/region-locale')
      .then(r => r.json());
    locale = data.locale.replace('_', '-');
  } catch {
    // fallback
  }
  _T = (locale &amp;&amp; findTranslation(locale)) || findTranslation(fallback);
}

export function _t(key: TranslationKey) {
  return _T[key] || `{{${key}}}`;
}
</file>
<file name="plugins/src/preload/loader.ts">
import { rcp, socket } from './rcp';

const plugins = window.Pengu.plugins

if ('disabledPlugins' in window.Pengu) {
  const blacklist = new Set&lt;number>
  const disabled = String(window.Pengu.disabledPlugins)
  delete window.Pengu.disabledPlugins

  for (const hash of disabled.split(',')) {
    const num = window.parseInt(hash, 16)
    blacklist.add(num)
  }

  function getHash(str: string) {
    const data = new TextEncoder().encode(str)
    let hash = 0x811c9dc5

    for (const byte of data) {
      hash ^= byte
      hash += (hash &lt;&lt; 1) + (hash &lt;&lt; 4) + (hash &lt;&lt; 7) + (hash &lt;&lt; 8) + (hash &lt;&lt; 24)
    }

    return hash >>> 0
  }

  function isDisabled(path: string) {
    path = path.toLowerCase().replace(/\\/g, '/')
    return blacklist.has(getHash(path))
  }

  for (let i = plugins.length - 1; i >= 0; --i) {
    const entry = plugins[i]
    if (isDisabled(entry) || /^@default\//i.test(entry)) {
      plugins.splice(i, 1)
    }
  }
}

async function loadPlugin(entry: string) {
  let stage = 'load';
  try {
    // Acquire plugin
    const url = `https://plugins/${entry}`;
    const plugin: Plugin = await import(url);

    // Init immediately
    if (typeof plugin.init === 'function') {
      stage = 'initialize';
      const pluginName = entry.substring(0, entry.indexOf('/'));
      const initContext = { rcp, socket };
      // If it's not top-level JS
      if (pluginName) {
        const meta = { name: pluginName };
        initContext['meta'] = meta;
      }
      await plugin.init(initContext);
    }

    // Register load
    if (typeof plugin.load === 'function') {
      window.addEventListener('load', plugin.load);
    } else if (typeof plugin.default === 'function') {
      window.addEventListener('load', plugin.default);
    }

    const msg = `Loaded plugin "${entry}".`;
    console.info('%c Pengu ', 'background: #183461; color: #fff', msg);
  } catch (err) {
    const msg = `Failed to ${stage} plugin "${entry}".\n`;
    console.error('%c Pengu ', 'background: #183461; color: #fff', msg, err);
  }
}

// Load all plugins asynchronously
const waitable = Promise.all(
  plugins.map(loadPlugin)
);

// Listen for the first rcp, it's also the first listener
rcp.preInit('rcp-fe-common-libs', async function () {
  // Wait for plugins load
  await waitable;
});

export { }
</file>
<file name="plugins/src/preload/super-potato.ts">
const GLOBAL_STYLE = `
*:not(.store-loading):not(.spinner):not([animated]):not(.lol-loading-screen-spinner):not(.lol-uikit-vignette-celebration-layer *), *:before, *:after {
  transition: none !important;
  transition-property: none !important;
  /* animation: none !important; */
}`;

const SHADOW_STYLE = `
*:not(.spinner):not([animated]), *:before, *:after {
  transition: none !important;
  transition-property: none !important;
  /* animation: none !important; */
}`;

function load() {
  const style = document.createElement('style');
  style.textContent = GLOBAL_STYLE;
  document.body.appendChild(style);

  const createElement = document.createElement;
  document.createElement = function (name, options?) {
    const elm = createElement.call(this, name, options);

    if (elm.shadowRoot) {
      const style = document.createElement('style');
      style.textContent = SHADOW_STYLE;
      elm.shadowRoot.appendChild(style);
    }

    return elm;
  };

  fetch('/lol-settings/v1/local/lol-user-experience', {
    method: 'PATCH',
    headers: {
      'content-type': 'application/json'
    },
    body: JSON.stringify({
      schemaVersion: 3,
      data: { potatoModeEnabled: true }
    })
  });
}

if (window.Pengu.superPotato) {
  window.addEventListener('load', load);
}

export { }
</file>
<file name="plugins/src/preload/index.ts">
import './api';
import './polyfills';
import './super-potato';
import './load-hooks';
import './loader';
import { version } from '../../package.json'

window.Pengu.version = version
Object.freeze(window.Pengu);
</file>
<file name="plugins/src/preload/polyfills.ts">
declare global {
  interface Object {
    hasOwn: Function
  }
}

if (!Object.hasOwn) {
  Object.hasOwn = function (obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  };
}

if (!Array.prototype.at) {
  Array.prototype.at = function (idx) {
    idx = Number(idx) || 0;
    if (idx &lt; 0) {
      idx = this.length + idx;
      if (idx &lt; 0) {
        return undefined;
      }
    }
    if (idx >= this.length) {
      return undefined;
    }
    return this[idx];
  };
}

export { }
</file>
<file name="plugins/src/preload/load-hooks.ts">
let windowLoaded = false;

window.addEventListener('load', function () {
  windowLoaded = true;
})

const windowAddEventListener = window.addEventListener;
const documentAddEventListener = document.addEventListener;

// Make sure the late window's load &amp; DOMContentLoaded listeners are called
window.addEventListener = function (type, listener, options) {
  if (type === 'load' &amp;&amp; windowLoaded) {
    setTimeout(listener, 1);
  } else if (type === 'DOMContentLoaded' &amp;&amp; document.readyState === 'complete') {
    setTimeout(listener, 1);
  } else {
    windowAddEventListener.call(this, type, listener, options);
  }
};

// Make sure the late document's DOMContentLoaded listeners are called
document.addEventListener = function (type, listener, options) {
  if (type === 'DOMContentLoaded'
    &amp;&amp; (document.readyState === 'interactive'
      || document.readyState === 'complete')) {
    setTimeout(listener, 1);
  } else {
    documentAddEventListener.call(this, type, listener, options);
  }
};

export { }
</file>
<file name="plugins/src/preload/api/DataStore.ts">
import { native } from './native';

let data_: Map&lt;string, any>;

function data() {
  if (data_ === undefined) {
    try {
      var object = JSON.parse(native.LoadDataStore());
      data_ = new Map(Object.entries(object));
    } catch {
      data_ = new Map();
    }
  }
  return data_;
}

function commit() {
  var object = Object.fromEntries(data_);
  native.SaveDataStore(JSON.stringify(object));
}

window.DataStore = {

  has(key) {
    return data().has(String(key));
  },

  get(key, fallback) {
    if (typeof key !== 'string') {
      return undefined;
    } else if (data().has(key)) {
      return data().get(key);
    }
    return fallback;
  },

  set(key, value) {
    if (typeof key !== 'string') {
      return false;
    }
    data().set(String(key), value);
    commit();
    return true;
  },

  remove(key) {
    var result = data().delete(String(key));
    commit();
    return result;
  }
}
</file>
<file name="plugins/src/preload/api/Effect.ts">
import { native } from './native';

const NSVisualEffectMaterial = {
  Titlebar: 3,
  Selection: 4,
  Menu: 5,
  Popover: 6,
  Sidebar: 7,
  HeaderView: 10,
  Sheet: 11,
  WindowBackground: 12,
  HudWindow: 13,
  FullScreenUI: 15,
  Tooltip: 17,
  ContentBackground: 18,
  UnderWindowBackground: 21,
  UnderPageBackground: 22,
}

const WinToMacMaterial = {
  transparent: NSVisualEffectMaterial.UnderWindowBackground,
  blurbehind: NSVisualEffectMaterial.HudWindow,
  acrylic: NSVisualEffectMaterial.FullScreenUI,
  unified: NSVisualEffectMaterial.Popover,
  mica: NSVisualEffectMaterial.HeaderView,
}

const Win11MicaMaterial = {
  auto: 0,
  none: 1,
  mica: 2,
  acrylic: 3,
  tabbed: 4,
}

type EffectName =
  | 'transparent'
  | 'blurbehind'
  | 'acrylic'
  | 'unified'
  | 'mica'
  | 'vibrancy'

const WinBackdropType = {
  transparent: 0,
  blurbehind: 1,
  acrylic: 2,
  unified: 3,
  mica: 4,
}

function parseHexColor(color: string): number {
  if (typeof color === 'string') {
    if (color.startsWith('#')) {
      let hex = color.slice(1)
      let size = hex.length
      let i = 0, step = size > 4 ? 1 : 0

      let r = parseInt(hex[i] + hex[i += step], 16);
      let g = parseInt(hex[++i] + hex[i += step], 16)
      let b = parseInt(hex[++i] + hex[i += step], 16)
      let a = 255

      if (size === 4 || size === 8) {
        a = parseInt(hex[++i] + hex[i += step], 16)
      }

      return ((a &lt;&lt; 24) | (b &lt;&lt; 16) | (g &lt;&lt; 8) | r) >>> 0
    }
  }
  return 0
}

function applyWindowEffectMac(name: EffectName, options) {
  if (name === 'vibrancy') {
    const material = String(options.material)
    const alwaysOn = Boolean(options.alwaysOn)
    if (material in NSVisualEffectMaterial) {
      const state = alwaysOn ? 1 : 0
      native.SetWindowVibrancy(NSVisualEffectMaterial[material], state)
    } else {
      console.warn('Unsupported vibrancy material: %s', material)
    }
  }
  else if (name in WinToMacMaterial) {
    native.SetWindowVibrancy(WinToMacMaterial[name], 0)
  } else {
    console.warn('Unknown window visual effect: %s', name)
  }
}

function applyWindowEffectWin(name: EffectName, options) {
  if (name in WinBackdropType) {
    if (name === 'mica') {
      const material = String(options.material || 'mica')
      if (material in Win11MicaMaterial) {
        native.SetWindowVibrancy(WinBackdropType.mica, Win11MicaMaterial[material])
      } else {
        console.warn('Unsupported mica material: %s', material)
      }
    } else {
      const color = parseHexColor(options.color)
      native.SetWindowVibrancy(WinBackdropType[name], color)
    }
  } else {
    console.warn('Unknown window visual effect: %s', name)
  }
}

window.Effect = {

  apply(name, options) {
    options = options || {}
    if (window.Pengu.isMac) {
      applyWindowEffectMac(name, options)
    } else {
      applyWindowEffectWin(name, options)
    }
  },

  clear() {
    native.SetWindowVibrancy(null);
  },

  setTheme(theme) {
    if (theme === 'light')
      native.SetWindowTheme(false)
    else (theme === 'dark')
    native.SetWindowTheme(true)
  },

}
</file>
<file name="plugins/src/preload/api/native.ts">
// @ts-ignore
export const native: Native = window.__native;

// @ts-ignore
delete window.__native;

interface Native {
  OpenDevTools: () => void;
  OpenPluginsFolder: (path?: string) => boolean;
  ReloadClient: () => void;

  SetWindowTheme: (dark: boolean) => void;
  SetWindowVibrancy: (kind: number | null, state?: number) => void;

  LoadDataStore: () => string;
  SaveDataStore: (data: string) => void;
}
</file>
<file name="plugins/src/preload/api/index.ts">
import { native } from './native';

import './DataStore';
import './Effect';

window.openDevTools = function () {
  native.OpenDevTools();
};

window.openPluginsFolder = function (path?: string) {
  if (typeof path === 'string' &amp;&amp; path) {
    if (!path.startsWith('..') &amp;&amp; !/[\\\/]\.\.[\\\/]/.test(path)) {
      if (/^[\\/]/.test(path))
        path = path.substring(1);
      return native.OpenPluginsFolder(path);
    }
  }
  return native.OpenPluginsFolder();
};

window.reloadClient = function () {
  native.ReloadClient();
};

window.restartClient = function () {
  fetch('/riotclient/kill-and-restart-ux', {
    method: 'POST'
  });
};

window.getScriptPath = function () {
  const error = new Error();
  const stack = error.stack;
  return stack?.match(/(?:http|https):\/\/[^\s]+\.js/g)?.[0];
};

export { }
</file>
<file name="plugins/src/preload/rcp/index.ts">
export { rcp } from './hooks';
export { socket } from './socket';
</file>
<file name="plugins/src/preload/rcp/hooks.ts">
const length = Symbol("length");

type CallbackType = "before" | "after";

interface Callback {
  (...args: any): void | Promise&lt;void>;
}

interface PluginContainer {
  impl: null | object;
  state: "preInit" | "init" | "postInit" | "fulfilled"
}

type CallbackContainer = {
  [length]: number;
} &amp; {
  [k in CallbackType]?: Callback[];
}

class RCP {
  static readonly PREF = "riotPlugin.announce:";
  static readonly PREF_LEN = this.PREF.length;

  static isAnnounceEvent(event: Event): event is RcpAnnouceEvent {
    return event.type.startsWith(this.PREF);
  }

  constructor() {
    const self = this;
    const { dispatchEvent } = document;
    function dispatchEventWrap(this: any, event: Event): boolean {
      if (RCP.isAnnounceEvent(event)) self.onPluginAnnounce(event);
      return dispatchEvent.call(this, event);
    }
    Object.defineProperty(document, "dispatchEvent", { value: dispatchEventWrap });
  }

  private readonly pluginRegistry = new Map&lt;string, PluginContainer>();
  private readonly callbacks = new Map&lt;string, CallbackContainer>();

  private onPluginAnnounce(event: RcpAnnouceEvent) {
    const self = this;
    const name = event.type.substring(RCP.PREF_LEN);
    
    const { registrationHandler } = event;

    function registrationHandlerWrap(this: any, registrar: Parameters&lt;typeof registrationHandler>[0]): ReturnType&lt;typeof registrationHandler> {
      return registrationHandler.call(this, async function(provider) {
        const container: PluginContainer = { impl: null, state: "preInit" };
        self.pluginRegistry.set(name, container);
        // callbacks called immidiatly, without adding microtasks to the queue
        // so, no edgecases where pre/post init callback added after it already
        // cant be called, but before state of plugin changes (point of not doing it after await)
        await self.invokeCallbacks("before", name, () => { container.state = "init"; }, provider);
        const api = (container.impl = await registrar(provider));
        container.state = "postInit";
        await self.invokeCallbacks("after", name, () => { container.state = "fulfilled"; }, api);
        return api;
      });
    }
  
    Object.defineProperty(event, "registrationHandler", {
      value: registrationHandlerWrap,
    })
  }

  private async invokeCallbacks(type: CallbackType, name: string, callback: () => void, ...args: any[]) {
    const container = this.callbacks.get(name);
    if (container == undefined) return void callback();
    const callbacks = container[type];
    if (callbacks == undefined) return void callback();
    //while older callbacks dont finished, new ones stll can be added 
    while (callbacks.length > 0) do {
      container[length] -= callbacks.length;
      await Promise.allSettled(callbacks.splice(0).map(callback => callback(...args)));
    } while (callbacks.length > 0);
    if (container[length] == 0) this.callbacks.delete(name);
    callback();
  }

  private addCallback(type: CallbackType, name: string, callback: Callback) {
    let container = this.callbacks.get(name);
    if (container == undefined) this.callbacks.set(name, (container = { [type]: [], [length]: 0 }));
    const arr = container[type] ?? (container[type] = []);
    container[length]++;
    arr.push(callback);
  }

  public preInit(name: string, callback: (provider: any) => any): boolean {
    name = String(name);
    if (typeof callback !== "function") throw new TypeError(`${callback} is not a function`);
    const plugin = this.pluginRegistry.get(name);
    if (plugin == undefined || plugin.state == "preInit") return (this.addCallback("before", name, callback), true);
    return false;
  }

  public postInit(name: string, callback: (api: any) => any, blocking: boolean = false){
    name = String(name);
    if (typeof callback !== "function") throw new TypeError(`${callback} is not a function`);
    const plugin = this.pluginRegistry.get(name);
    if (plugin !== undefined &amp;&amp; plugin.state === "fulfilled") return false;
    this.addCallback("after", name, blocking ? callback : (api: any) => void callback(api));
    return true;
  }

  private whenReadyOne(name: string) {
    return new Promise(resolve => {
      if (!this.postInit(name, resolve)) resolve(this.pluginRegistry.get(name)!.impl);
    });
  }

  private whenReadyAll(names: string[]) {
    return Promise.all(names.map(name => this.whenReadyOne(String(name))));
  }

  public whenReady(param){
    if (typeof param == "string") return this.whenReadyOne(param);
    if (Array.isArray(param)) return this.whenReadyAll(param);
    throw new TypeError(`unexpected argument ${param}`);
  }
  public get(name: string){
    name = String(name).toLowerCase();
    if (!name.startsWith('rcp-')) name = 'rcp-' + name;
    return this.pluginRegistry.get(name)?.impl;
  }

  // [Symbol.iterator](){
  //   return this.pluginRegistry.entries();
  // }
}

export const rcp = new RCP();

Object.defineProperty(window, "rcp", {
  value: rcp,
  enumerable: false,
  configurable: false,
  writable: false
})
</file>
<file name="plugins/src/preload/rcp/socket.ts">
import { rcp } from './hooks';

interface EventData {
  data: any;
  uri: string;
  eventType: 'Create' | 'Update' | 'Delete';
}

interface ApiListener {
  (message: EventData): void;
}

let ws: WebSocket;
const eventQueue = Array&lt;string>();
const listenersMap = new Map&lt;string, Array&lt;ApiListener>>();

rcp.preInit('rcp-fe-common-libs', async function (provider) {
  const { _endpoint } = provider.context.socket;
  ws = new WebSocket(_endpoint, 'wamp');
  ws.addEventListener('open', () => {
    for (const e of eventQueue.splice(0, eventQueue.length)) {
      ws.send(JSON.stringify([5, e]));
    }
  });
  ws.addEventListener('message', handleMessage);
  window.addEventListener('beforeunload', () => ws.close());
});

function handleMessage(e: MessageEvent&lt;string>) {
  const [type, endpoint, data] = JSON.parse(e.data);
  if (type === 8 &amp;&amp; listenersMap.has(endpoint)) {
    const listeners = listenersMap.get(endpoint)!;
    for (const callback of listeners) {
      setTimeout(() => callback(&lt;EventData>data), 0);
    }
  }
}

function buildApi(api: string): string {
  if (api === 'all') return 'OnJsonApiEvent';
  api = api.toLowerCase().replace(/^\/+|\/+$/g, '');
  return 'OnJsonApiEvent_' + api.replace(/\//g, '_');
}

function observe(api: string, listener: ApiListener) {
  if (typeof api !== 'string' || api === ''
    || typeof listener !== 'function')
    return false;

  const endpoint = buildApi(api);
  listener = listener.bind(self);

  if (listenersMap.has(endpoint)) {
    const arr = listenersMap.get(endpoint);
    arr!.push(listener);
  } else {
    listenersMap.set(endpoint, [listener]);
  }

  if (ws?.readyState === 1) {
    ws.send(JSON.stringify([5, endpoint]));
  } else {
    eventQueue.push(endpoint);
  }

  return {
    disconnect: () => disconnect(api, listener),
  };
}

function disconnect(api: string, listener: ApiListener) {
  const endpoint = buildApi(api);
  if (listenersMap.has(endpoint)) {
    const arr = listenersMap.get(endpoint)!.filter(x => x !== listener);
    if (arr.length === 0) {
      ws.send(JSON.stringify([6, endpoint]));
      listenersMap.delete(endpoint);
    } else {
      listenersMap.set(endpoint, arr);
    }
    return true;
  }
  return false;
}

export const socket = {
  observe,
  disconnect,
};
</file>
</source>