<?xml version='1.0' encoding='utf-8'?>
<source type="local_directory" path="work/PenguLoader"><file name="README.md">&lt;br&gt; &lt;div align="center"&gt; &lt;a href="https://pengu.lol"&gt; &lt;img src="https://i.imgur.com/kqomxqs.jpg" width="144"/&gt; &lt;/a&gt; &lt;h1 align="center"&gt;pengu loader&lt;/h1&gt; &lt;p align="center"&gt; ultimate javascript plugin loader, build unmatched lol client. &lt;/p&gt; &lt;p align="center"&gt; &lt;a href="https://chat.pengu.lol"&gt; &lt;img src ="https://img.shields.io/discord/1069483280438673418?style=for-the-badge&amp;logo=discord&amp;logocolor=white&amp;color=5c5fff"/&gt; &lt;/a&gt; &lt;a href="https://github.com/penguloader/penguloader/releases/latest"&gt; &lt;img src="https://img.shields.io/github/downloads/penguloader/penguloader/total?style=for-the-badge" /&gt; &lt;/a&gt; &lt;a href="https://github.com/penguloader/penguloader"&gt; &lt;img src="https://img.shields.io/github/stars/penguloader/penguloader.svg?style=for-the-badge&amp;logo=github" /&gt; &lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;br&gt; ## **pengu loader** formerly league loader powerful plugin loader tailored **league legends client**, enabling limitless customization personalization. pengu loader, seamlessly load javascript plugins directly client, allowing transform appearance, add unique features, integrate custom content enhance overall experience. ## features - **plugin support** customize league client - **personalize &amp; theme** flexible web stacks - **modern javascript** compatibility - **built-in devtools** easier debugging - **simplified api** access hooks ## getting started please visit homepage begin: ### https://pengu.lol/ ## disclaimer program provided without warranty kind, either express implied, including without limitation implied warranties merchantability, noninfringment, fitness particular purpose. licensor warrant functions contained program meet requirements operation uninterrupted error free. licensor makes warranties respecting harm may caused malicious use software. licensor expressly disclaims warranty representation authorized users third party. pengu loader endorsed riot games reflect views opinions riot games anyone officially involved producing managing riot games properties. riot games, associated properties trademarks registered trademarks riot games, inc. ## sponsors &lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;img src="https://github.com/user-attachments/assets/58e9a6f4-6630-437d-a758-b284c0ed41e7" /&gt;&lt;/td&gt; &lt;td&gt;free code signing windows provided &lt;a href="https://about.signpath.io"&gt;signpath.io&lt;/a&gt;, certificate &lt;a href="https://signpath.org"&gt;signpath foundation&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; ## license: mit [![fossa status](https://app.fossa.com/api/projects/git%2bgithub.com%2fnomi-san%2fleague-loader.svg?type=large)](https://app.fossa.com/projects/git%2bgithub.com%2fnomi-san%2fleague-loader?ref=badge_large)</file><file name="core/insert_dylib.c">// repo: https://github.com/tyilo/insert_dylib #include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; #include &lt;stdbool.h&gt; #include &lt;stdarg.h&gt; #include &lt;string.h&gt; #include &lt;unistd.h&gt; #include &lt;getopt.h&gt; #include &lt;sys/stat.h&gt; #include &lt;sys/param.h&gt; #include &lt;copyfile.h&gt; #include &lt;mach-o/loader.h&gt; #include &lt;mach-o/fat.h&gt; #define is_64_bit(x) ((x) == mh_magic_64 || (x) == mh_cigam_64) #define is_little_endian(x) ((x) == fat_cigam || (x) == mh_cigam_64 || (x) == mh_cigam) #define swap32(x, magic) (is_little_endian(magic)? osswapint32(x): (x)) #define swap64(x, magic) (is_little_endian(magic)? osswapint64(x): (x)) #define round_up(x, y) (((x) + (y) - 1) &amp; -(y)) #define absdiff(x, y) ((x) &gt; (y)? (uintmax_t)(x) - (uintmax_t)(y): (uintmax_t)(y) - (uintmax_t)(x)) #define bufsize 512 void fbzero(file *f, off_t offset, size_t len) { static unsigned char zeros[bufsize] = {0}; fseeko(f, offset, seek_set); while(len != 0) { size_t size = min(len, sizeof(zeros)); fwrite(zeros, size, 1, f); len -= size; } } void fmemmove(file *f, off_t dst, off_t src, size_t len) { static unsigned char buf[bufsize]; while(len != 0) { size_t size = min(len, sizeof(buf)); fseeko(f, src, seek_set); fread(&amp;buf, size, 1, f); fseeko(f, dst, seek_set); fwrite(buf, size, 1, f); len -= size; src += size; dst += size; } } int inplace_flag = false; int weak_flag = false; int overwrite_flag = false; int codesig_flag = 0; int yes_flag = false; static struct option long_options[] = { {"inplace", no_argument, &amp;inplace_flag, true}, {"weak", no_argument, &amp;weak_flag, true}, {"overwrite", no_argument, &amp;overwrite_flag, true}, {"strip-codesig", no_argument, &amp;codesig_flag, 1}, {"no-strip-codesig", no_argument, &amp;codesig_flag, 2}, {"all-yes", no_argument, &amp;yes_flag, true}, {null, 0, null, 0} }; __attribute__((noreturn)) void usage(void) { printf("usage: insert_dylib dylib_path binary_path [new_binary_path]\n"); printf("option flags:"); struct option *opt = long_options; while(opt-&gt;name != null) { printf(" --%s", opt-&gt;name); opt++; } printf("\n"); exit(1); } __attribute__((format(printf, 1, 2))) bool ask(const char *format, ...) { char *question; asprintf(&amp;question, "%s [y/n] ", format); va_list args; va_start(args, format); vprintf(question, args); va_end(args); free(question); while(true) { char *line = null; size_t size; if(yes_flag) { puts("y"); line = "y"; } else { getline(&amp;line, &amp;size, stdin); } switch(line[0]) { case 'y': case 'y': return true; break; case 'n': case 'n': return false; break; default: printf("please enter n: "); } } } size_t fpeek(void *restrict ptr, size_t size, size_t nitems, file *restrict stream) { off_t pos = ftello(stream); size_t result = fread(ptr, size, nitems, stream); fseeko(stream, pos, seek_set); return result; } void *read_load_command(file *f, uint32_t cmdsize) { void *lc = malloc(cmdsize); fpeek(lc, cmdsize, 1, f); return lc; } bool check_load_commands(file *f, struct mach_header *mh, size_t header_offset, size_t commands_offset, const char *dylib_path, off_t *slice_size) { fseeko(f, commands_offset, seek_set); uint32_t ncmds = swap32(mh-&gt;ncmds, mh-&gt;magic); off_t linkedit_32_pos = -1; off_t linkedit_64_pos = -1; struct segment_command linkedit_32; struct segment_command_64 linkedit_64; off_t symtab_pos = -1; uint32_t symtab_size = 0; for(int = 0; &lt; ncmds; i++) { struct load_command lc; fpeek(&amp;lc, sizeof(lc), 1, f); uint32_t cmdsize = swap32(lc.cmdsize, mh-&gt;magic); uint32_t cmd = swap32(lc.cmd, mh-&gt;magic); switch(cmd) { case lc_code_signature: if(i == ncmds - 1) { if(codesig_flag == 2) { return true; } if(codesig_flag == 0 &amp;&amp; !ask("lc_code_signature load command found. remove it?")) { return true; } struct linkedit_data_command *cmd = read_load_command(f, cmdsize); fbzero(f, ftello(f), cmdsize); uint32_t dataoff = swap32(cmd-&gt;dataoff, mh-&gt;magic); uint32_t datasize = swap32(cmd-&gt;datasize, mh-&gt;magic); free(cmd); uint64_t linkedit_fileoff = 0; uint64_t linkedit_filesize = 0; if(linkedit_32_pos != -1) { linkedit_fileoff = swap32(linkedit_32.fileoff, mh-&gt;magic); linkedit_filesize = swap32(linkedit_32.filesize, mh-&gt;magic); } else if(linkedit_64_pos != -1) { linkedit_fileoff = swap64(linkedit_64.fileoff, mh-&gt;magic); linkedit_filesize = swap64(linkedit_64.filesize, mh-&gt;magic); } else { fprintf(stderr, "warning: __linkedit segment found.\n"); } if(linkedit_32_pos != -1 || linkedit_64_pos != -1) { if(linkedit_fileoff + linkedit_filesize != *slice_size) { fprintf(stderr, "warning: __linkedit segment end file, codesign work patched binary.\n"); } else { if(dataoff + datasize != *slice_size) { fprintf(stderr, "warning: codesignature end __linkedit segment, codesign work patched binary.\n"); } else { *slice_size -= datasize; //int64_t diff_size = 0; if(symtab_pos == -1) { fprintf(stderr, "warning: lc_symtab load command found. codesign might work patched binary.\n"); } else { fseeko(f, symtab_pos, seek_set); struct symtab_command *symtab = read_load_command(f, symtab_size); uint32_t strsize = swap32(symtab-&gt;strsize, mh-&gt;magic); int64_t diff_size = swap32(symtab-&gt;stroff, mh-&gt;magic) + strsize - (int64_t)*slice_size; if(-0x10 &lt;= diff_size &amp;&amp; diff_size &lt;= 0) { symtab-&gt;strsize = swap32((uint32_t)(strsize - diff_size), mh-&gt;magic); fwrite(symtab, symtab_size, 1, f); } else { fprintf(stderr, "warning: string table appear right code signature. codesign might work patched binary. (0x%llx)\n", diff_size); } free(symtab); } linkedit_filesize -= datasize; uint64_t linkedit_vmsize = round_up(linkedit_filesize, 0x1000); if(linkedit_32_pos != -1) { linkedit_32.filesize = swap32((uint32_t)linkedit_filesize, mh-&gt;magic); linkedit_32.vmsize = swap32((uint32_t)linkedit_vmsize, mh-&gt;magic); fseeko(f, linkedit_32_pos, seek_set); fwrite(&amp;linkedit_32, sizeof(linkedit_32), 1, f); } else { linkedit_64.filesize = swap64(linkedit_filesize, mh-&gt;magic); linkedit_64.vmsize = swap64(linkedit_vmsize, mh-&gt;magic); fseeko(f, linkedit_64_pos, seek_set); fwrite(&amp;linkedit_64, sizeof(linkedit_64), 1, f); } goto fix_header; } } } // truncated file, zero code signature fbzero(f, header_offset + dataoff, datasize); fix_header: mh-&gt;ncmds = swap32(ncmds - 1, mh-&gt;magic); mh-&gt;sizeofcmds = swap32(swap32(mh-&gt;sizeofcmds, mh-&gt;magic) - cmdsize, mh-&gt;magic); return true; } else { printf("lc_code_signature last load command, remove.\n"); } break; case lc_load_dylib: case lc_load_weak_dylib: { struct dylib_command *dylib_command = read_load_command(f, cmdsize); union lc_str offset = dylib_command-&gt;dylib.name; char *name = &amp;((char *)dylib_command)[swap32(offset.offset, mh-&gt;magic)]; int cmp = strcmp(name, dylib_path); free(dylib_command); if(cmp == 0) { if(!ask("binary already contains load command dylib. continue anyway?")) { return false; } } break; } case lc_segment: case lc_segment_64: if(cmd == lc_segment) { struct segment_command *cmd = read_load_command(f, cmdsize); if(strcmp(cmd-&gt;segname, "__linkedit") == 0) { linkedit_32_pos = ftello(f); linkedit_32 = *cmd; } free(cmd); } else { struct segment_command_64 *cmd = read_load_command(f, cmdsize); if(strcmp(cmd-&gt;segname, "__linkedit") == 0) { linkedit_64_pos = ftello(f); linkedit_64 = *cmd; } free(cmd); } case lc_symtab: symtab_pos = ftello(f); symtab_size = cmdsize; } fseeko(f, swap32(lc.cmdsize, mh-&gt;magic), seek_cur); } return true; } bool insert_dylib(file *f, size_t header_offset, const char *dylib_path, off_t *slice_size) { fseeko(f, header_offset, seek_set); struct mach_header mh; fread(&amp;mh, sizeof(struct mach_header), 1, f); if(mh.magic != mh_magic_64 &amp;&amp; mh.magic != mh_cigam_64 &amp;&amp; mh.magic != mh_magic &amp;&amp; mh.magic != mh_cigam) { printf("unknown magic: 0x%x\n", mh.magic); return false; } size_t commands_offset = header_offset + (is_64_bit(mh.magic)? sizeof(struct mach_header_64): sizeof(struct mach_header)); bool cont = check_load_commands(f, &amp;mh, header_offset, commands_offset, dylib_path, slice_size); if(!cont) { return true; } // even though padding 4 works x86_64, codesign like size_t path_padding = 8; size_t dylib_path_len = strlen(dylib_path); size_t dylib_path_size = (dylib_path_len &amp; ~(path_padding - 1)) + path_padding; uint32_t cmdsize = (uint32_t)(sizeof(struct dylib_command) + dylib_path_size); struct dylib_command dylib_command = { .cmd = swap32(weak_flag? lc_load_weak_dylib: lc_load_dylib, mh.magic), .cmdsize = swap32(cmdsize, mh.magic), .dylib = { .name = swap32(sizeof(struct dylib_command), mh.magic), .timestamp = 0, .current_version = 0, .compatibility_version = 0 } }; uint32_t sizeofcmds = swap32(mh.sizeofcmds, mh.magic); fseeko(f, commands_offset + sizeofcmds, seek_set); char space[cmdsize]; fread(&amp;space, cmdsize, 1, f); bool empty = true; for(int = 0; &lt; cmdsize; i++) { if(space[i] != 0) { empty = false; break; } } if(!empty) { if(!ask("it seem like enough empty space. continue anyway?")) { return false; } } fseeko(f, -((off_t)cmdsize), seek_cur); char *dylib_path_padded = calloc(dylib_path_size, 1); memcpy(dylib_path_padded, dylib_path, dylib_path_len); fwrite(&amp;dylib_command, sizeof(dylib_command), 1, f); fwrite(dylib_path_padded, dylib_path_size, 1, f); free(dylib_path_padded); mh.ncmds = swap32(swap32(mh.ncmds, mh.magic) + 1, mh.magic); sizeofcmds += cmdsize; mh.sizeofcmds = swap32(sizeofcmds, mh.magic); fseeko(f, header_offset, seek_set); fwrite(&amp;mh, sizeof(mh), 1, f); return true; } int main(int argc, const char *argv[]) { while(true) { int option_index = 0; int c = getopt_long(argc, (char *const *)argv, "", long_options, &amp;option_index); if(c == -1) { break; } switch(c) { case 0: break; case '?': usage(); break; default: abort(); break; } } argv = &amp;argv[optind - 1]; argc -= optind - 1; if(argc &lt; 3 || argc &gt; 4) { usage(); } const char *lc_name = weak_flag? "lc_load_weak_dylib": "lc_load_dylib"; const char *dylib_path = argv[1]; const char *binary_path = argv[2]; struct stat s; if(stat(binary_path, &amp;s) != 0) { perror(binary_path); exit(1); } if(dylib_path[0] != '@' &amp;&amp; stat(dylib_path, &amp;s) != 0) { if(!ask("the provided dylib path exist. continue anyway?")) { exit(1); } } bool binary_path_was_malloced = false; if(!inplace_flag) { char *new_binary_path; if(argc == 4) { new_binary_path = (char *)argv[3]; } else { asprintf(&amp;new_binary_path, "%s_patched", binary_path); binary_path_was_malloced = true; } if(!overwrite_flag &amp;&amp; stat(new_binary_path, &amp;s) == 0) { if(!ask("%s already exists. overwrite it?", new_binary_path)) { exit(1); } } if(copyfile(binary_path, new_binary_path, null, copyfile_data | copyfile_unlink)) { printf("failed create %s\n", new_binary_path); exit(1); } binary_path = new_binary_path; } file *f = fopen(binary_path, "r+"); if(!f) { printf("couldn't open file %s\n", binary_path); exit(1); } bool success = true; fseeko(f, 0, seek_end); off_t file_size = ftello(f); rewind(f); uint32_t magic; fread(&amp;magic, sizeof(uint32_t), 1, f); switch(magic) { case fat_magic: case fat_cigam: { fseeko(f, 0, seek_set); struct fat_header fh; fread(&amp;fh, sizeof(fh), 1, f); uint32_t nfat_arch = swap32(fh.nfat_arch, magic); printf("binary fat binary %d archs.\n", nfat_arch); struct fat_arch archs[nfat_arch]; fread(archs, sizeof(archs), 1, f); int fails = 0; uint32_t offset = 0; if(nfat_arch &gt; 0) { offset = swap32(archs[0].offset, magic); } for(int = 0; &lt; nfat_arch; i++) { off_t orig_offset = swap32(archs[i].offset, magic); off_t orig_slice_size = swap32(archs[i].size, magic); offset = round_up(offset, 1 &lt;&lt; swap32(archs[i].align, magic)); if(orig_offset != offset) { fmemmove(f, offset, orig_offset, orig_slice_size); fbzero(f, min(offset, orig_offset) + orig_slice_size, absdiff(offset, orig_offset)); archs[i].offset = swap32(offset, magic); } off_t slice_size = orig_slice_size; bool r = insert_dylib(f, offset, dylib_path, &amp;slice_size); if(!r) { printf("failed add %s arch #%d!\n", lc_name, + 1); fails++; } if(slice_size &lt; orig_slice_size &amp;&amp; &lt; nfat_arch - 1) { fbzero(f, offset + slice_size, orig_slice_size - slice_size); } file_size = offset + slice_size; offset += slice_size; archs[i].size = swap32((uint32_t)slice_size, magic); } rewind(f); fwrite(&amp;fh, sizeof(fh), 1, f); fwrite(archs, sizeof(archs), 1, f); // need flush truncating fflush(f); ftruncate(fileno(f), file_size); if(fails == 0) { printf("added %s archs %s\n", lc_name, binary_path); } else if(fails == nfat_arch) { printf("failed add %s archs.\n", lc_name); success = false; } else { printf("added %s %d/%d archs %s\n", lc_name, nfat_arch - fails, nfat_arch, binary_path); } break; } case mh_magic_64: case mh_cigam_64: case mh_magic: case mh_cigam: if(insert_dylib(f, 0, dylib_path, &amp;file_size)) { ftruncate(fileno(f), file_size); printf("added %s %s\n", lc_name, binary_path); } else { printf("failed add %s!\n", lc_name); success = false; } break; default: printf("unknown magic: 0x%x\n", magic); exit(1); } fclose(f); if(!success) { if(!inplace_flag) { unlink(binary_path); } exit(1); } if(binary_path_was_malloced) { free((void *)binary_path); } return 0; }</file><file name="core/src/platform.h">#ifndef _platform_h_ #define _platform_h_ #if defined(_win32) || defined(_win64) #ifndef win32_lean_and_mean #define win32_lean_and_mean #endif #ifndef os_win #define os_win 1 #endif #elif defined(__apple__) || defined(__mach__) #ifndef os_mac #define os_mac 1 #endif #else #error "your platform supported." #endif #if !(defined(_m_x64) || defined(_m_amd64) || defined(__x86_64__) || defined(__amd64__)) #error "target 64-bit (x86-64/amd64) only." #endif #ifdef _msc_ver #define nominmax #define _crt_secure_no_warnings #ifndef unicode #define unicode 1 #endif #endif #ifndef count_of #define count_of(arr) (sizeof(arr) / sizeof(*arr)) #endif #if os_win #define platform_name "win" #define libcef_module_name "libcef.dll" #elif os_mac #define platform_name "mac" #define libcef_module_name "league legends.app/contents/frameworks/chromium embedded framework.framework/chromium embedded framework" #endif #ifndef ndebug #define _debug 1 #endif #endif</file><file name="core/src/hook.h">#ifndef _hook_h_ #define _hook_h_ #include "platform.h" #include &lt;stdint.h&gt; #include &lt;string.h&gt; #include &lt;mutex&gt; #if os_win #include &lt;windows.h&gt; #elif os_mac #include &lt;mach/mach_init.h&gt; #include &lt;mach/mach_vm.h&gt; #include &lt;sys/mman.h&gt; #include &lt;dlfcn.h&gt; #endif namespace hook { struct shellcode { #if os_win uint8_t opcodes[12]; #elif os_mac uint8_t opcodes[16]; #endif shellcode(intptr_t addr) { memset(opcodes, 0, sizeof(opcodes)); #if os_win // movabs rax [addr] opcodes[0] = 0x48; opcodes[1] = 0xb8; memcpy(&amp;opcodes[2], &amp;addr, sizeof(intptr_t)); // push rax opcodes[10] = 0x50; // ret opcodes[11] = 0xc3; #elif os_mac // jmp qword ptr [rip + offset] ; pad 2 opcodes[0] = 0xff; opcodes[1] = 0x25; memset(&amp;opcodes[2], 0, sizeof(int32_t)); memcpy(&amp;opcodes[6], &amp;addr, sizeof(intptr_t)); #endif } }; struct restorable { restorable(void *func, const void *code, size_t size) : func_(func), size_(size), backup_(new uint8_t[size]) { memcpy(backup_, func, size); memcpy_safe(func, code, size); } ~restorable() { memcpy_safe(func_, backup_, size_); delete[] backup_; } restorable swap() { return restorable(func_, backup_, size_); } private: void *func_; uint8_t *backup_; size_t size_; static bool memcpy_safe(void *dst, const void *src, size_t size) { #if os_win dword op; bool success = virtualprotect(dst, size, page_execute_readwrite, &amp;op); (success == 0) return false; memcpy(dst, src, size); success = virtualprotect(dst, size, op, &amp;op); return success != 0; #elif os_mac kern_return_t kr; kr = mach_vm_protect(mach_task_self(), (mach_vm_address_t)dst, (mach_vm_size_t)size, false, vm_prot_read | vm_prot_write | vm_prot_execute | vm_prot_copy); (kr != kern_success) return false; kr = mach_vm_write(mach_task_self(), (mach_vm_address_t)dst, (vm_offset_t)src, size); (kr != kern_success) return false; kr = mach_vm_protect(mach_task_self(), (mach_vm_address_t)dst, (mach_vm_size_t)size, false, vm_prot_read | vm_prot_execute); return kr == kern_success; #endif } }; template &lt;typename&gt; class hook; template &lt;typename r, typename... args&gt; class hook&lt;r (*)(args...)&gt; { public: using fn = r (*)(args...); ~hook() { (rest_) { std::lock_guard&lt;std::mutex&gt; _l(mutex_); { delete rest_; } } } bool hook(fn orig, fn hook) { (!orig || !hook) return false; orig_ = orig; shellcode code(reinterpret_cast&lt;intptr_t&gt;(hook)); rest_ = new restorable((void *)orig, code.opcodes, sizeof(code.opcodes)); return true; } bool hook(const char *lib, const char *proc, fn hook) { #if os_win (hmodule mod = getmodulehandlea(lib)) (fn orig = reinterpret_cast&lt;fn&gt;(getprocaddress(mod, proc))) #elif os_mac (void *mod = dlopen(lib, rtld_noload | rtld_lazy)) (fn orig = reinterpret_cast&lt;fn&gt;(dlsym(mod, proc))) #endif return this-&gt;hook(orig, hook); return false; } r operator()(args... args) { std::lock_guard&lt;std::mutex&gt; _l(mutex_); { restorable _t = rest_-&gt;swap(); { return orig_(args...); } } } protected: fn orig_ = nullptr; restorable *rest_ = nullptr; std::mutex mutex_; }; } #endif</file><file name="core/src/pengu.h">#ifndef _pengu_h_ #define _pengu_h_ #include "platform.h" #include &lt;stdint.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #ifdef os_win #include &lt;windows.h&gt; #elif os_mac #include &lt;unistd.h&gt; #define callback #endif #include &lt;type_traits&gt; #include &lt;atomic&gt; #include &lt;string&gt; #include &lt;vector&gt; #include &lt;filesystem&gt; using path = std::filesystem::path; /// lcux used utf-16 cef strings. #define cef_string_type_utf16 1 #include "include/internal/cef_string.h" #include "include/capi/cef_base_capi.h" /// /// use c++ api libcef_wrapper reasons, /// notably performance hooking. /// /// c++ cef uses virtual methods, /// cef capi wraps around function pointer self. /// /// example, virtual method cefv8handler::execute(a, b, c) /// get capi method: cef_v8handler_t::execute(cef_v8handler_t *self, a, b, c) /// constructing c object, cef_v8handler_t::execute must assigned function pointer, /// helpers, bind method c++ class directly fp /// skip `self` access class. /// /// ** native c++ ** /// /// class myhandler : public cefv8handler { /// public: /// virtual execute(...) override { /// // impl /// } /// implement_refcounting(myhandler); /// }; /// /// ** basic capi c++ ** /// /// struct myhandler : cef_v8handler_t { /// myhandler() { /// // impl ref-counter /// cef_v8handler_t::execute = _execute; /// } /// static _execute(cef_v8handler_t *_self, ...) { /// auto myhandler *self = (myhandler *)_self; /// // impl /// } /// } /// /// ** bindings ** /// /// class myhandler : cefrefcount&lt;cef_v8handler_t&gt; { /// public: /// myhandler() : cefrefcount(this) { /// cef_bind_method(myhandler, execute); /// } /// _execute(...) { /// // impl /// } /// } /// template&lt;typename t&gt; struct remove_arg1; /// remove first arg (self) function sig. template&lt;typename r, typename arg1, typename... args&gt; struct remove_arg1&lt;r(*)(arg1, args...)&gt; { using type = r(*)(args...); using self = arg1; }; template &lt;typename t&gt; struct method_traits; /// used extract method pairs class. template &lt;typename t, typename r, typename... args&gt; struct method_traits&lt;r(t::*)(args...)&gt; { using type = r(*)(args...); using klass = t; }; template &lt;int id, typename this, typename m, typename r, typename self, typename... args&gt; struct self_bind_traits_base { static m_; static inline r callback invoke(self self, args ...args) noexcept { return (reinterpret_cast&lt;this *&gt;(self)-&gt;*m_)(args...); } }; template &lt;int id, typename this, typename m, typename r, typename self, typename... args&gt; /* typename */ self_bind_traits_base&lt;id, this, m, r, self, args...&gt;::m_ = nullptr; template &lt;int id, typename, typename, typename&gt; struct self_bind_traits; template &lt;int id, typename this, typename m, typename r, typename self, typename... args&gt; struct self_bind_traits&lt;id, this, m, r(*)(self, args...)&gt; : self_bind_traits_base&lt;id, this, m, r, self, args...&gt; {}; template &lt;int id, typename m, typename to&gt; static inline void self_bind(m from, &amp;to) noexcept { using traits = self_bind_traits&lt;id, typename method_traits&lt;m&gt;::klass, m, to&gt;; (traits::m_ == nullptr) traits::m_ = from; = traits::invoke; } /// use __counter__ make unique static variables funtion sig. /// `static_assert` check method type updating headers. #define cef_bind_method(klass, m) \ { \ static_assert(std::is_same&lt;method_traits&lt;decltype(&amp;klass::_##m)&gt;::type, \ remove_arg1&lt;decltype(m)&gt;::type&gt;::value, "invalid method."); \ self_bind&lt;__counter__&gt;(&amp;klass::_##m, m); \ } (0) /// /// basic reference counting capi cef objects. /// use method bindings above. /// template &lt;typename t&gt; struct cefrefcount : public { template &lt;typename u&gt; cefrefcount(const u *) noexcept : t{}, ref_(1) { t::base.size = sizeof(u); t::base.add_ref = _base_addref; t::base.release = _base_release; t::base.has_one_ref = _base_hasoneref; t::base.has_at_least_one_ref = _base_hasatleastoneref; self_delete_ = [](void *self) noexcept { delete static_cast&lt;u *&gt;(self); }; } cefrefcount(nullptr_t) noexcept : cefrefcount(static_cast&lt;t *&gt;(nullptr)) {} private: void(*self_delete_)(void *); std::atomic&lt;size_t&gt; ref_; static void callback _base_addref(cef_base_ref_counted_t *_) noexcept { ++reinterpret_cast&lt;cefrefcount *&gt;(_)-&gt;ref_; } static int callback _base_release(cef_base_ref_counted_t *_) noexcept { cefrefcount *self = reinterpret_cast&lt;cefrefcount *&gt;(_); (--self-&gt;ref_ == 0) { self-&gt;self_delete_(_); return 1; } return 0; } static int callback _base_hasoneref(cef_base_ref_counted_t *_) noexcept { return reinterpret_cast&lt;cefrefcount *&gt;(_)-&gt;ref_ == 1; } static int callback _base_hasatleastoneref(cef_base_ref_counted_t *_) noexcept { return reinterpret_cast&lt;cefrefcount *&gt;(_)-&gt;ref_ &gt; 0; } }; /// cef string interface struct cefstrbase : cef_string_t { cefstrbase(); /// /// check string empty. /// bool empty() const; // string manipulations bool equal(const char *that) const; bool contain(const char *sub) const; bool startw(const char *sub) const; bool endw(const char *sub) const; /// /// copy string utf-16 std string. /// void copy(std::u16string &amp;to) const; /// /// convert string utf-8 std string. /// std::string to_utf8() const; /// /// convert string utf-16 std string. /// std::u16string to_utf16() const; /// /// convert string fs path. /// std::filesystem::path to_path() const; }; struct cefstr : cefstrbase { cefstr(); ~cefstr(); cefstr(const char *s, size_t len); cefstr(const char16_t *s, size_t len); cefstr(const std::string &amp;s); cefstr(const std::u16string &amp;s); /// /// forward underlying string value. /// current dtor() set null. /// cef_string_t forward(); /// /// get reference base string const pointer. /// static const cefstrbase &amp;borrow(const cef_string_t *s); /// /// convert fs path string. /// static cefstr from_path(const path &amp;path); /// /// wrap u16string cef_string_t stack. /// static cef_string_t wrap(const std::u16string &amp;utf16) { return cef_string_t{ (char16 *)utf16.data(), utf16.length(), nullptr }; } }; /// /// wrapper `cef_string_userfree_t` auto-free. /// free userfree pointer passed struct. /// struct cefscopedstr : cefstrbase { /// /// @param uf cef userfree string, /// `ptr()` method return empty string `uf` null. /// cefscopedstr(cef_string_userfree_t uf); ~cefscopedstr(); const cef_string_t *ptr() { return str_; } private: // underlying pointer cef_string_userfree_t str_; }; /** * cefstring utf-16 literal. */ static inline cef_string_t operator""_s(const char16_t *s, size_t l) { return cef_string_t{ (char16 *)s, l, nullptr }; } namespace platform { /// /// get os version. /// @returns semver version string. const char *get_os_version(); /// /// get os build number. /// @returns build number string. /// const char *get_os_build(); } namespace config { /// /// get loader dir (root pengu folder). /// @returns path dir. /// path loader_dir(); /// /// get datastore path. /// @returns path datastore file. /// path datastore_path(); /// /// get cache dir league client. /// @returns path possible cache dir. /// path cache_dir(); /// /// get league client dir. /// @returns path league dir. /// path league_dir(); /// /// get plugins dir. /// default, child root dir. /// could replaced `plugins_dir` config. /// @returns path plugins dir. /// path plugins_dir(); /// /// get list disabled plugins hex-hashed path splitted commas. /// @returns list string. /// std::string disabled_plugins(); namespace options { bool use_hotkeys(); bool optimized_client(); bool silent_mode(); bool super_potato(); bool isecure_mode(); bool use_devtools(); bool use_riotclient(); bool use_proxy(); // undocumented int debug_port(); } } namespace file { /// /// check path directory. /// @param path path dir. /// @returns true dir exists. /// bool is_dir(const path &amp;path); /// /// check path file. /// @param path path file. /// @returns true file exists. /// bool is_file(const path &amp;path); /// /// check path symlink. /// @param path path symlink file. /// @returns true path symlink. /// bool is_symlink(const path &amp;path); /// /// read content file. /// @param path path file. /// @param buffer output buffer, must freed success. /// @param length output buffer length. /// @returns true success. /// bool read_file(const path &amp;path, void **buffer, size_t *length); /// /// read content file. /// @param path path file. /// @param buffer output buffer. /// @param length output buffer length. /// @returns true success. /// bool write_file(const path &amp;path, const void *buffer, size_t length); /// /// get files inside dir. /// @param path path dir. /// @returns vector file paths. /// std::vector&lt;path&gt; read_dir(const path &amp;dir); } namespace dialog { /// /// show system message box, block executing thread. /// void alert(const char *message, const char *caption); /// /// show system message box yes-no buttons. /// @returns true user pressed `yes`. /// bool confirm(const char *message, const char *caption); #if os_win static void alert(const char *message, const char *caption) { messageboxa(null, message, caption, mb_iconinformation | mb_ok | mb_topmost); } static bool confirm(const char *message, const char *caption) { return idyes == messageboxa(null, message, caption, mb_iconwarning/* mb_iconquestion */ | mb_yesno | mb_topmost); } #endif } namespace shell { /// /// open url browser. /// @param url string start `https://`. /// void open_url(const char *url); /// /// open folder path explorer/finder. /// @param path absolute path folder. /// void open_folder(const path &amp;path); } namespace window { /// /// get window rectangle screen. /// @param handle `nsview*` macos, `hwnd` windows. /// void get_rect(void *handle, int *x, int *y, int *w, int *h); /// /// get window dpi scale factor. /// @param handle `nsview*` macos, `hwnd` windows. /// float get_scaling(void *handle); /// /// bring window foreground. /// @param handle `nsview*` macos, `hwnd` windows. /// void make_foreground(void *handle); /// /// set window vibrancy effect. /// @param handle `nsview*` macos, `hwnd` windows. /// @param material `nsvisualeffectmaterial` enum macos. /// windows, one following values: /// `0` (transparent - windows 7+), /// `1` (blurbehind -windows 7+), /// `2` (acrylic - windows 10+), /// `3` (unified - windows 10+), /// `4` (mica - windows 11). /// @param state `nsvisualeffectstate` enum macos, accent background color windows. /// void apply_vibrancy(void *handle, uint32_t material, uint32_t state); /// /// remove applied vibrancy effect window. /// @param handle `nsview*` macos, `hwnd` windows. /// void clear_vibrancy(void *handle); /// /// enable window drop shadow. /// @param handle `nsview*` macos, `hwnd` windows. /// @note windows 7 requires aero enabled. /// void enable_shadow(void *handle); /// /// check current system appearance dark mode. /// @note support windows 10 1607+, macos 10.14+. /// bool is_dark_theme(); /// /// set default window theme. /// @param handle `nsview*` macos, `hwnd` windows. /// @note support windows 10 1809+, macos 10.14+. /// void set_theme(void *handle, bool dark); } namespace dylib { /// /// find loaded dylib/dll. /// @param name library name full `.framework` name macos. /// void *find_lib(const char *name); /// /// find symbol/proc lib. /// @param lib handle `find_lib()`. /// @param proc symbol name. /// void *find_proc(void *lib, const char *proc); /// /// find memory module matching pattern. /// @param rladdr relative address near module's address space. /// @param pattern matching pattern e.g `aa bb cc 00`, also allows wildcard `aa ?? ff`. /// void *find_memory(const void *rladdr, const char *pattern); } #endif</file><file name="core/src/browser/browser.h">#pragma #include "pengu.h" #include "include/capi/cef_browser_capi.h" #include "include/capi/cef_frame_capi.h" #include "include/capi/cef_request_context_capi.h" namespace browser { extern cef_window_handle_t window; void setup_window(cef_browser_t *browser); void open_devtools(cef_browser_t *browser); void register_riotclient_domain(cef_request_context_t *ctx); void set_riotclient_credentials(const char *port, const char *token); void register_plugins_domain(cef_request_context_t *ctx); }</file><file name="core/src/renderer/v8_wrapper.h">#ifndef _v8_wrapper_h_ #define _v8_wrapper_h_ #include "include/capi/cef_v8_capi.h" struct v8valuebase { inline cef_v8value_t *ptr() { return &amp;_; } protected: cef_v8value_t _; }; struct v8value : v8valuebase { inline bool isundefined() { return _.is_undefined(&amp;_); } inline bool isnull() { return _.is_null(&amp;_); } inline bool isbool() { return _.is_bool(&amp;_); } inline bool isint() { return _.is_int(&amp;_); } inline bool isuint() { return _.is_uint(&amp;_); } inline bool isdouble() { return _.is_double(&amp;_); } inline bool isstring() { return _.is_string(&amp;_); } inline bool isobject() { return _.is_object(&amp;_); } inline bool isarray() { return _.is_array(&amp;_); } inline bool isfunction() { return _.is_function(&amp;_); } inline bool asbool() { return _.get_bool_value(&amp;_); } inline int asint() { return _.get_int_value(&amp;_); } inline uint32_t asuint() { return _.get_uint_value(&amp;_); } inline double asdouble() { return _.get_double_value(&amp;_); } inline cef_string_userfree_t asstring() { return _.get_string_value(&amp;_); } inline struct v8array *asarray() { return reinterpret_cast&lt;struct v8array *&gt;(&amp;_); } inline struct v8object *asobject() { return reinterpret_cast&lt;struct v8object *&gt;(&amp;_); } static inline v8value *undefined() { return (v8value *)cef_v8value_create_undefined(); } static inline v8value *null() { return (v8value *)cef_v8value_create_null(); } static inline v8value *boolean(bool value) { return (v8value *)cef_v8value_create_bool(value); } static inline v8value *number(double value) { return (v8value *)cef_v8value_create_double(value); } static inline v8value *number(int value) { return (v8value *)cef_v8value_create_int(value); } static inline v8value *string(const cef_string_t *value) { return (v8value *)cef_v8value_create_string(value); } static inline v8value *function(const cef_string_t *name, cef_v8handler_t *handler) { return (v8value *)cef_v8value_create_function(name, handler); } }; struct v8array : v8valuebase { inline int length() { return _.get_array_length(&amp;_); } inline v8value *get(int index) { return (v8value *)_.get_value_byindex(&amp;_, index); } inline void set(int index, v8valuebase *value) { _.set_value_byindex(&amp;_, index, (cef_v8value_t *)value); } static inline v8array *create(int length) { return (v8array *)cef_v8value_create_array(length); } }; struct v8object : v8valuebase { inline bool has(const cef_string_t *key) { return _.has_value_bykey(&amp;_, key); } inline v8value *get(const cef_string_t *key) { return (v8value *)_.get_value_bykey(&amp;_, key); } inline void set(const cef_string_t *key, v8valuebase *value, cef_v8_propertyattribute_t attr) { _.set_value_bykey(&amp;_, key, (cef_v8value_t *)value, attr); } static inline v8object *create() { return (v8object *)cef_v8value_create_object(nullptr, nullptr); } }; typedef v8value *(*v8functionhandler)(v8value *const argv[], int argc); struct v8handlerfunctionentry { const char *name; v8functionhandler func; }; #endif</file><file name="loader/vite.config.ts">import { defineconfig } 'vite' import { resolve } 'node:path' import solid 'vite-plugin-solid' import autoprefixer 'autoprefixer' import tailwindcss 'tailwindcss' import pkg './package.json' // https://vitejs.dev/config/ export default defineconfig({ css: { postcss: { plugins: [ autoprefixer, tailwindcss ] } }, define: { '__version__': json.stringify(pkg.version), '__platform__': json.stringify(process.platform), }, publicdir: false, plugins: [ solid(), ], resolve: { alias: { '~': resolve(__dirname, './src') } }, // vite options tailored tauri development applied `tauri dev` `tauri build` // // 1. prevent vite obscuring rust errors clearscreen: false, // 2. tauri expects fixed port, fail port available server: { port: 1420, strictport: true, watch: { // 3. tell vite ignore watching `src-tauri` ignored: ['**/src-tauri/**'], }, }, })</file><file name="loader/README.md">## pengu loader ui &amp; built-in plugins folder includes app ui built-in plugins. ``` loader/ |__ src/ |__ src-tuari/ |__ src-plugins</file><file name="loader/package.json">{ "name": "pengu-loader", "version": "1.2.0", "description": "pengu loader app", "license": "mit", "type": "module", "scripts": { "dev": "vite", "build": "vite build", "serve": "vite preview", "tauri": "tauri" }, "dependencies": { "@std/ini": "npm:@jsr/std__ini@^0.225", "@std/yaml": "npm:@jsr/std__yaml@^1.0.2", "@tauri-apps/api": "^1", "class-variance-authority": "^0.7.0", "js-yaml": "^4.1.0", "solid-js": "^1.7.8", "tailwind-merge": "^2.4.0", "tippy.js": "^6.3.7" }, "devdependencies": { "@tauri-apps/cli": "^1", "@types/js-yaml": "^4.0.9", "@types/node": "^20", "autoprefixer": "^10.4.20", "postcss": "^8.4.41", "tailwindcss": "^3.4.7", "tailwindcss-animate": "^1.0.7", "typescript": "^5.2.2", "vite": "^5.3.1", "vite-plugin-solid": "^2.8.0" } }</file><file name="loader/tsconfig.json">{ "compileroptions": { "baseurl": ".", "paths": { "~/*": [ "./src/*" ] }, "target": "es2020", "usedefineforclassfields": true, "module": "esnext", "lib": [ "es2020", "dom", "dom.iterable" ], "skiplibcheck": true, /* bundler mode */ "moduleresolution": "bundler", "allowimportingtsextensions": true, "resolvejsonmodule": true, "isolatedmodules": true, "noemit": true, "jsx": "preserve", "jsximportsource": "solid-js", /* linting */ "strict": true, "nounusedlocals": true, "nounusedparameters": true, "nofallthroughcasesinswitch": true, }, "include": [ "src" ], "references": [ { "path": "./tsconfig.node.json" } ] }</file><file name="loader/tailwind.config.ts">import { config } 'tailwindcss' const config: config = { darkmode: 'class', content: [ './src/**/*.{ts,tsx}', './src/**/*.css' ], theme: { container: { center: true, padding: '2rem', screens: { '2xl': '1400px' } }, extend: { colors: { border: 'hsl(var(--border))', input: 'hsl(var(--input))', ring: 'hsl(var(--ring))', background: 'hsl(var(--background))', foreground: 'hsl(var(--foreground))', primary: { default: 'rgb(var(--primary))', foreground: 'hsl(var(--primary-foreground))' }, secondary: { default: 'hsl(var(--secondary))', foreground: 'hsl(var(--secondary-foreground))' }, destructive: { default: 'hsl(var(--destructive))', foreground: 'hsl(var(--destructive-foreground))' }, info: { default: 'hsl(var(--info))', foreground: 'hsl(var(--info-foreground))' }, success: { default: 'hsl(var(--success))', foreground: 'hsl(var(--success-foreground))' }, warning: { default: 'hsl(var(--warning))', foreground: 'hsl(var(--warning-foreground))' }, error: { default: 'hsl(var(--error))', foreground: 'hsl(var(--error-foreground))' }, muted: { default: 'hsl(var(--muted))', foreground: 'hsl(var(--muted-foreground))' }, accent: { default: 'hsl(var(--accent))', foreground: 'hsl(var(--accent-foreground))' }, popover: { default: 'hsl(var(--popover))', foreground: 'hsl(var(--popover-foreground))' }, card: { default: 'rgb(var(--card))', foreground: 'hsl(var(--card-foreground))' } }, borderradius: { xl: 'calc(var(--radius) + 4px)', lg: 'var(--radius)', md: 'calc(var(--radius) - 2px)', sm: 'calc(var(--radius) - 4px)' }, } }, plugins: [ require('tailwindcss-animate'), ] } export default config</file><file name="loader/tsconfig.node.json">{ "compileroptions": { "composite": true, "skiplibcheck": true, "module": "esnext", "moduleresolution": "bundler", "allowsyntheticdefaultimports": true, }, "include": [ "vite.config.ts" ] }</file><file name="loader/translations.json">{ "languages": [ { "id": "en", "name": "english", "translations": { "welcome": "welcome", "choose_lang": "choose language", "accept_tos": "accept terms conditions", "tos_content": "pengu loader safe, using exploit plugins could get banned.", "get_started": "get started" } }, { "id": "vi", "name": "ting vit", "translations": { "welcome": "xin cho", "choose_lang": "chn ngn ng", "accept_tos": "ti ng vi cc iu khon", "tos_content": "pengu loader ton, nhng dng cc plugin khai thc l hng c th b kha ti khon.", "get_started": "bt u" } } ] }</file><file name="loader/pnpm-lock.yaml">lockfileversion: '9.0' settings: autoinstallpeers: true excludelinksfromlockfile: false importers: .: dependencies: '@std/ini': specifier: npm:@jsr/std__ini@^0.225 version: '@jsr/std__ini@0.225.2' '@std/yaml': specifier: npm:@jsr/std__yaml@^1.0.2 version: '@jsr/std__yaml@1.0.3' '@tauri-apps/api': specifier: ^1 version: 1.6.0 class-variance-authority: specifier: ^0.7.0 version: 0.7.0 js-yaml: specifier: ^4.1.0 version: 4.1.0 solid-js: specifier: ^1.7.8 version: 1.8.21 tailwind-merge: specifier: ^2.4.0 version: 2.5.2 tippy.js: specifier: ^6.3.7 version: 6.3.7 devdependencies: '@tauri-apps/cli': specifier: ^1 version: 1.6.0 '@types/js-yaml': specifier: ^4.0.9 version: 4.0.9 '@types/node': specifier: ^20 version: 20.16.1 autoprefixer: specifier: ^10.4.20 version: 10.4.20(postcss@8.4.41) postcss: specifier: ^8.4.41 version: 8.4.41 tailwindcss: specifier: ^3.4.7 version: 3.4.10 tailwindcss-animate: specifier: ^1.0.7 version: 1.0.7(tailwindcss@3.4.10) typescript: specifier: ^5.2.2 version: 5.5.4 vite: specifier: ^5.3.1 version: 5.4.2(@types/node@20.16.1) vite-plugin-solid: specifier: ^2.8.0 version: 2.10.2(solid-js@1.8.21)(vite@5.4.2) packages: '@alloc/quick-lru@5.2.0': resolution: {integrity: sha512-urcabb+4burfabwblutiberxwvbsu/v7tzwfmbgjfbkwibuzis9gxdoduyuiecfdgq85jglmw6jus3+z5tsklw==} engines: {node: '&gt;=10'} '@ampproject/remapping@2.3.0': resolution: {integrity: sha512-30iztapgz+ltiyoeivqyo853f02jbysd5ugngpkfv0m3xot9an73erkgyamzu43x4vfqcnlxw9kpg3r5lc4yyw==} engines: {node: '&gt;=6.0.0'} '@babel/code-frame@7.24.7': resolution: {integrity: sha512-bcyh1cvjbo9tvyiz2jvexgsimvgz2fdrvddoivqyuklnkssx+eppdebq/g47ayw+rqnfe+urvoshmf+f/qwala==} engines: {node: '&gt;=6.9.0'} '@babel/compat-data@7.25.2': resolution: {integrity: sha512-bycppcpkbvx4znyapeefau03bp89shqnmls+rmdptmw+heszh9+z84d2yg+k7cylbwwzdjtdow/uqzmpjulclq==} engines: {node: '&gt;=6.9.0'} '@babel/core@7.25.2': resolution: {integrity: sha512-bbt3opicoxur9euz5/ro/xv8/v7yj5bjymqg/c1yao8mikanumzalcn+msbci3pigy4liqfpupfmm27hmgayea==} engines: {node: '&gt;=6.9.0'} '@babel/generator@7.25.0': resolution: {integrity: sha512-3leecj3pvw8pw2r1sr1m89g/qryk/m/mb/tlqn7dn4sbbuqytqnlod+ii2u4dqigtumkcnamkmdraltfzttriw==} engines: {node: '&gt;=6.9.0'} '@babel/helper-compilation-targets@7.25.2': resolution: {integrity: sha512-u2u5lssaz7tat3cfaymq8whh0pxvdhoek6hvpaexxixjyequmh0l0ynjnm6ctgkmxv1iksi0izkgw4acfkpaaw==} engines: {node: '&gt;=6.9.0'} '@babel/helper-module-imports@7.18.6': resolution: {integrity: sha512-0nfvs3vkusybfi1x2vd6tkrywq+z/cleyc/rjnfrix/30bf5aigybtvgxolektzjh8o5e5kj3tt+nkxuuzfvla==} engines: {node: '&gt;=6.9.0'} '@babel/helper-module-imports@7.24.7': resolution: {integrity: sha512-8ayh3c+74cgcvvxow/myrynragv+ntvg5vku2nzph9x7rcrwzmh0vfalljuftz9mx6u4esdxzfcozsqtum0hca==} engines: {node: '&gt;=6.9.0'} '@babel/helper-module-transforms@7.25.2': resolution: {integrity: sha512-bjyrabix6j/wv83ftcvjmbt72qthi56c7jxzog2xatilpmoc7dpd8wnkikexhdvppi/3qcmo6wy1eaxoluiecq==} engines: {node: '&gt;=6.9.0'} peerdependencies: '@babel/core': ^7.0.0 '@babel/helper-plugin-utils@7.24.8': resolution: {integrity: sha512-ffwx5142d8h2mgr/ipvgh5g7w6jdn4juspztydnqo0yn7ks2kuz6pci8h6mpcoujegd/uzq3tavflcxqsnwwwg==} engines: {node: '&gt;=6.9.0'} '@babel/helper-simple-access@7.24.7': resolution: {integrity: sha512-zbaivbcmh5ts+b86r/cju+4xgyis+r1j951gxi3kmmxbmhcg4oqmsv6zxq64xom/cvzfu1fmocyt6+owc5qmyg==} engines: {node: '&gt;=6.9.0'} '@babel/helper-string-parser@7.24.8': resolution: {integrity: sha512-po9khhrcuuygnjwwyegnrjtsizhit+vmd0kped+so0l7mxkmt19g3pjy9gtnhysck/hdzq+dtw/4vgnmkippsq==} engines: {node: '&gt;=6.9.0'} '@babel/helper-validator-identifier@7.24.7': resolution: {integrity: sha512-rr+pbcq1smqddyf6x0wxtg8qylcgub0eragguqrlfkca87l7yap7ehq8snj96oogto8obv70khufycikhxog0w==} engines: {node: '&gt;=6.9.0'} '@babel/helper-validator-option@7.24.8': resolution: {integrity: sha512-xb8t9td1mhlungh/aiowyn+gvhab9kwlu8gffxgst3ffeit7rjs+xwbc2vud1utzdipkj/ab3rdqj7ufngyi2q==} engines: {node: '&gt;=6.9.0'} '@babel/helpers@7.25.0': resolution: {integrity: sha512-mjglz42acm0ogjjj8ctsm3db8noof8h2l7dctepjs29u+v7yo/rbx9nshlkmgfnrks/q4tbae7hxnov9vkgwlw==} engines: {node: '&gt;=6.9.0'} '@babel/highlight@7.24.7': resolution: {integrity: sha512-estjpq4ouy8xyfhgvxngigbjrwxftkx9ksigdnmly3o7b/v7kiac9x4oik87upjsc/vs5l869bem5fhza8cazw==} engines: {node: '&gt;=6.9.0'} '@babel/parser@7.25.3': resolution: {integrity: sha512-iltjkdbj4hmvfpgqwwsvoxthywpkkpbrxkanrsyewdpappt5py5yevkgpij7xyxhndxjpaa3pyalsxq7u8e/dw==} engines: {node: '&gt;=6.0.0'} hasbin: true '@babel/plugin-syntax-jsx@7.24.7': resolution: {integrity: sha512-6ddciupe/mpmnokv/u+rsd2vvvy+yw/jfbb0zhyjezt9nlhmcuylnylsbqccs1bffjlb0fcwc9vqz+sbz6psiq==} engines: {node: '&gt;=6.9.0'} peerdependencies: '@babel/core': ^7.0.0-0 '@babel/template@7.25.0': resolution: {integrity: sha512-aoogh1/5xzkvg1jvvz7avrx2pij2xbi227dhmby6y+bm9h2fln+ifecyu4xl0cniivejlscri89lusbj8vjd9q==} engines: {node: '&gt;=6.9.0'} '@babel/traverse@7.25.3': resolution: {integrity: sha512-hefgyp1x754ogcskmv5resmtv7ixj/kpae1xyy+d9g5pvkkoffsbis4m77mdjuwlzkdikfcffq9rpu+h/s3zdq==} engines: {node: '&gt;=6.9.0'} '@babel/types@7.25.2': resolution: {integrity: sha512-ytnytra7w9e6/oazehj0bjehprullh9/fbpt5lfb0nhqxyalcrkrs3zh9v07iyhkgpqx6z78fnucczr/l4fs4q==} engines: {node: '&gt;=6.9.0'} '@esbuild/aix-ppc64@0.21.5': resolution: {integrity: sha512-1sdgh6zsptlggy1yi6+dbkiz8xzphjevalf/am1thplsf5stom9rwtje4hkaf20ffxxntfqeyxyjnwh1gizedq==} engines: {node: '&gt;=12'} cpu: [ppc64] os: [aix] '@esbuild/android-arm64@0.21.5': resolution: {integrity: sha512-c0ux9vaubq7dtdcjq+wdyglowmdtr/goc2u5iyk/7d1h1jyc0qsed7+11imp2mrln9rccmrcjc4ymclczgws/a==} engines: {node: '&gt;=12'} cpu: [arm64] os: [android] '@esbuild/android-arm@0.21.5': resolution: {integrity: sha512-vcpvzsjpphei1sizdlvalspxxl7wbovubbaowwug4rjhb68ox8kualb+1ocnvt5fjv6wpkx6o/iepbdrf68zcg==} engines: {node: '&gt;=12'} cpu: [arm] os: [android] '@esbuild/android-x64@0.21.5': resolution: {integrity: sha512-d7apruunhrbwhxzxrvp856rjuhrfw1sdqatkxh2hqa0kazb1hkmi02opyracl0txigz/zmxwlbzgjwwyacakta==} engines: {node: '&gt;=12'} cpu: [x64] os: [android] '@esbuild/darwin-arm64@0.21.5': resolution: {integrity: sha512-dwqxqzyuk5aiwwf3uflirdj5edd49zg6o9wclz7kumv2wrfr4hkjxp/5t8jz11qbqfus6/crckgwyhtnay88kq==} engines: {node: '&gt;=12'} cpu: [arm64] os: [darwin] '@esbuild/darwin-x64@0.21.5': resolution: {integrity: sha512-se/jjf8nlmkvg4kniuywmv/22zaerb+qasi5mdrxtd6r08kvs2qcn4c09miupktditvh8jrfflwgfbqcxzrjbw==} engines: {node: '&gt;=12'} cpu: [x64] os: [darwin] '@esbuild/freebsd-arm64@0.21.5': resolution: {integrity: sha512-5jcrxxrdujlx8jxp/wcbcy3penncgbr9bn6jsy4omhfutihe3zw0mawa7+rdacmlrmizaf03nlqix9dgyb8h4g==} engines: {node: '&gt;=12'} cpu: [arm64] os: [freebsd] '@esbuild/freebsd-x64@0.21.5': resolution: {integrity: sha512-j95knbj1zkbmxthvh29bbriqygmxqovqoqya+iss0/2l3t9/kj42ow2mpqerrbxdjnmkudcaqt/dfnxwx/zzcq==} engines: {node: '&gt;=12'} cpu: [x64] os: [freebsd] '@esbuild/linux-arm64@0.21.5': resolution: {integrity: sha512-ibkvmyyzksbex8d8i7mh/tmfwdxbf3db4qm6sy+7re0yxya+k1cem3on9xgdt2eqgmu4hqyzhan7teq8xkgp4q==} engines: {node: '&gt;=12'} cpu: [arm64] os: [linux] '@esbuild/linux-arm@0.21.5': resolution: {integrity: sha512-bpb5ahztbengjckvz9ugqgwo8euu4clq68e95a53klxaprmuyyv2d6f0uui65xisgol1hbp5mtronbgo+0bfca==} engines: {node: '&gt;=12'} cpu: [arm] os: [linux] '@esbuild/linux-ia32@0.21.5': resolution: {integrity: sha512-yvjxdqlrqpdl2dvrodymmhz4rpevkyvppfgyksngdyzka01046plwyrkki3ax8fbjok5qbxblurkwk/mwy18tg==} engines: {node: '&gt;=12'} cpu: [ia32] os: [linux] '@esbuild/linux-loong64@0.21.5': resolution: {integrity: sha512-uhf1bmmg8qevzdrzaqg2sig/02+4/dhb6a9kbya0xdvwdekcoc8zrwi5jjvndujtcibgfq5publpeoxqj+jqsg==} engines: {node: '&gt;=12'} cpu: [loong64] os: [linux] '@esbuild/linux-mips64el@0.21.5': resolution: {integrity: sha512-iajomo+kjk23bj52dfsncmsz1qp1dqm6cwluv3w1qwyxkyiwecfafni555fvsgqekwjmxvlokcv5yghw5b3jbg==} engines: {node: '&gt;=12'} cpu: [mips64el] os: [linux] '@esbuild/linux-ppc64@0.21.5': resolution: {integrity: sha512-1hhv/z4oefmwplo8rp7cvlhbdnjsc3cttjxihbi+5aj5r+mbvy4egg7wcbe//hsst+rvdag7s81tavpl2xae4w==} engines: {node: '&gt;=12'} cpu: [ppc64] os: [linux] '@esbuild/linux-riscv64@0.21.5': resolution: {integrity: sha512-2hdxdmd9gmgtgrpwnjzp2alsoke/0o5hhtuvwibd3ydjme8jwvscnngbntthkgeb91ozhzrj4qiixk/sbmydda==} engines: {node: '&gt;=12'} cpu: [riscv64] os: [linux] '@esbuild/linux-s390x@0.21.5': resolution: {integrity: sha512-zus5sxzqbjd3exxwvjn1yqkrepangxe9lgow2qlnmr8ikmtphkjgxu1hr01k4fjg8h1keedaqdczqtbrrnb41a==} engines: {node: '&gt;=12'} cpu: [s390x] os: [linux] '@esbuild/linux-x64@0.21.5': resolution: {integrity: sha512-1rydtpyv03iycf1+bhzrzqjcdouaotaqhtwjzcwvijkd2n5xu0ttvc8/+1fawqcp9ibcwomjmhoh94dh82bxpq==} engines: {node: '&gt;=12'} cpu: [x64] os: [linux] '@esbuild/netbsd-x64@0.21.5': resolution: {integrity: sha512-woi2mxzxjmulcciwmnlciyzh4ncimpwqas049keemvocnadvxo0ubiqpfsmxb3cwkedngg7swzdlvlczpe0tlg==} engines: {node: '&gt;=12'} cpu: [x64] os: [netbsd] '@esbuild/openbsd-x64@0.21.5': resolution: {integrity: sha512-hlnnw99xsvx12lfbuwot8evcssvrndvxnpjz7bpn947b8gjpzehwynvhfsaerc0n3tsboinvrp2bytz5lkezow==} engines: {node: '&gt;=12'} cpu: [x64] os: [openbsd] '@esbuild/sunos-x64@0.21.5': resolution: {integrity: sha512-6+gjmfpfy0bhu5tpptkuh8+uw3mnrvgs+dspqxqov3ekbordwnztveb4qnivqcyxq6gzkytnoz9dzg+d4garkg==} engines: {node: '&gt;=12'} cpu: [x64] os: [sunos] '@esbuild/win32-arm64@0.21.5': resolution: {integrity: sha512-z0gotd75vvxqyq7nsl93zwahctrogqvuacydur+vov8uhhnskroyu961kgtcd1e95iqpksqkh7tbtslns3ta8a==} engines: {node: '&gt;=12'} cpu: [arm64] os: [win32] '@esbuild/win32-ia32@0.21.5': resolution: {integrity: sha512-swxff1cl2rvnmavs+bbclwtfzsvdgtl//g/smwac5ovk/upu2gu9tiargfmyffkrmg3syajsrelf0tij1v8fya==} engines: {node: '&gt;=12'} cpu: [ia32] os: [win32] '@esbuild/win32-x64@0.21.5': resolution: {integrity: sha512-tqd/1efjuzpc6rcfwevltci/xnfctzknmxs98fydfge4wp9clfv98nykrzjkvpmhddnjzlhduymx4psqapjwiw==} engines: {node: '&gt;=12'} cpu: [x64] os: [win32] '@isaacs/cliui@8.0.2': resolution: {integrity: sha512-o8jcjabxaleog9dq0+arxwzbtfnp4wnaqzuijk7ll44amxgkv/j2m4tpjxjy3znbcfvbxfzucm1twdyfybfqea==} engines: {node: '&gt;=12'} '@jridgewell/gen-mapping@0.3.5': resolution: {integrity: sha512-izl8zoedibrwezlccrhoacupyyn5gdik+q6fbfdpdg6hqx6jpkitn7dfipw9lqzxg6df9sa7+oknq0qlz/gaqg==} engines: {node: '&gt;=6.0.0'} '@jridgewell/resolve-uri@3.1.2': resolution: {integrity: sha512-brisgcijp20/tbwspwmei54qvprzexkud9ljl+uixuktwvja8ww1trb1jms1rfxo1cbtnz/5hpc9qvmkwdopkw==} engines: {node: '&gt;=6.0.0'} '@jridgewell/set-array@1.2.1': resolution: {integrity: sha512-r8glrtzeyp03ymzp/6lil/28tgegezhx1q2k703kgwrai1vdvpixdg70vjc2pamw3na6jkl5hhfu1sjx0mnn/a==} engines: {node: '&gt;=6.0.0'} '@jridgewell/sourcemap-codec@1.5.0': resolution: {integrity: sha512-gv3zraisu3fjpagnsribrqgwql6qufx04ympw/zd8xmlsu32mhccbfbo6kzfljvypcz8zydegqsgf+pwpam7gq==} '@jridgewell/trace-mapping@0.3.25': resolution: {integrity: sha512-vnk6aewybgtawwmy/pzwngdojcklwsd2wqvjggagoawcgwysyxfyoxt00ijktf+8lb57dwob3aa0o9capepiyq==} '@jsr/std__ini@0.225.2': resolution: {integrity: sha512-wdckw7yanql8aifpyik8+bpss0q3tl7xu5jvdezu4ultwppmxstdbrgwklzxdgs9i5dobt2iflscnddkeht4xa==, tarball: https://npm.jsr.io/~/11/@jsr/std__ini/0.225.2.tgz} '@jsr/std__yaml@1.0.3': resolution: {integrity: sha512-msyq7wdqvrb7erht13z6frj8drrcgpjhmz1ia2xrkjylsqt21aomeikpsvf4+ozij1tooqyntlxnbuiosxypdw==, tarball: https://npm.jsr.io/~/11/@jsr/std__yaml/1.0.3.tgz} '@nodelib/fs.scandir@2.1.5': resolution: {integrity: sha512-vq24bq3ym5heqm2nkcr3yxdwjc7vtsethrdnkp2dk9p1uqlr+dhurm/noto0kg7hyhu7eppkzj3myqyumbf62g==} engines: {node: '&gt;= 8'} '@nodelib/fs.stat@2.0.5': resolution: {integrity: sha512-rkhppp2zrqdaqa/2jnhnztcpalv64xdhip7a7454a5ovi7bukxgt7mx7udwau3zg1dcppu0rz3vv1seaqvy4+a==} engines: {node: '&gt;= 8'} '@nodelib/fs.walk@1.2.8': resolution: {integrity: sha512-ogb+uxlgwcgqkgwo8gcegwemotft3fio9ababbmagwxiobkz+gty0pp185begg7llih/nshsv2xas1lnznocsg==} engines: {node: '&gt;= 8'} '@pkgjs/parseargs@0.11.0': resolution: {integrity: sha512-+1vkjdd0qblpodgrjueqarh8vaivqodibwh9xpp5syisf7yoqgsjkpnfoqqlqlu+vq/tvsshmr6lopmn8u+dpg==} engines: {node: '&gt;=14'} '@popperjs/core@2.11.8': resolution: {integrity: sha512-p1st0akscrn9sgzhp8gmywbnqsbvawszax44oxnnvlhgqaocovxmjziohstwq7sqknbr47akdni+ulewd8+g6a==} '@rollup/rollup-android-arm-eabi@4.21.0': resolution: {integrity: sha512-wtwd8pfosaj+ql87le7votj3sylavxunwhzcnx3xfxfii/ba/r3x7mum8dvrh8rb2r4aio8jjsr3zjdaftmnfa==} cpu: [arm] os: [android] '@rollup/rollup-android-arm64@4.21.0': resolution: {integrity: sha512-a1sr2zsk1b4eykizu17zuzhmuqckjk2/j9me2idjk1ghw7lb5z35lezj9ijch6gtufsnvzs1znydw2ozsthrka==} cpu: [arm64] os: [android] '@rollup/rollup-darwin-arm64@4.21.0': resolution: {integrity: sha512-zonkwlgdld/svhko5pd9ozml6roy5oq5t4thvdyzlpiohegy+dp2nwumxk0ld91lrbjrvtnae0erbwjqhztraa==} cpu: [arm64] os: [darwin] '@rollup/rollup-darwin-x64@4.21.0': resolution: {integrity: sha512-7dos8br0xakg48ske2qntmsfpfulrdw9+votl27mvt46vo44atbmdzdgysoevnelmzlfd+nea0uyoa8f01wsrg==} cpu: [x64] os: [darwin] '@rollup/rollup-linux-arm-gnueabihf@4.21.0': resolution: {integrity: sha512-pwjsfqjnwngsocq53kjmtwdjdmh/6nubwqcz52aewleuvx08bzcy6touuawaoncpnxz/3sirtd8hiq32g1y8va==} cpu: [arm] os: [linux] '@rollup/rollup-linux-arm-musleabihf@4.21.0': resolution: {integrity: sha512-efriansz3uhzrnzxuevxs9locowmgd1rwecid6ujqix2myn3a8im1fafzbzh7zk1rj6okcr16du3upldakd83w==} cpu: [arm] os: [linux] '@rollup/rollup-linux-arm64-gnu@4.21.0': resolution: {integrity: sha512-zrphydktvhyegtw94wj8pnl1uroqvhm3j3hjdquwacwnmivjawoyjteauedejvgx7xv3z9gavrbkezcghq9u1w==} cpu: [arm64] os: [linux] '@rollup/rollup-linux-arm64-musl@4.21.0': resolution: {integrity: sha512-cfaupqd+uefeurmqnp2eevxqgbsox/lhoyn9/d2psdv8xtrjdg3ngofjctc1vq/jeke1qd0iejbbfxlebphnpw==} cpu: [arm64] os: [linux] '@rollup/rollup-linux-powerpc64le-gnu@4.21.0': resolution: {integrity: sha512-zkpan1/rvahruylwbxc9t7b2hxdpb/ufeu22pg2psv7rn8roofgureghw1ysmx/cmddhntddjy3lo9hrlgtahg==} cpu: [ppc64] os: [linux] '@rollup/rollup-linux-riscv64-gnu@4.21.0': resolution: {integrity: sha512-h1eracwd5e8es8leis+o/nqmdljkcb1d6r2h4fksscxqillkarq6ws7xbldu80yz+nmqhvfdquwcvrqmgr28rg==} cpu: [riscv64] os: [linux] '@rollup/rollup-linux-s390x-gnu@4.21.0': resolution: {integrity: sha512-zj4ha+3b5tu8u7l58ccsi0a9n1vkfwphwd/pugxwtzlsb5btkwdnw/+jcu84+3qymkpli+xvhdmrlwuwda6kqw==} cpu: [s390x] os: [linux] '@rollup/rollup-linux-x64-gnu@4.21.0': resolution: {integrity: sha512-e2hrvelfih6kw/unbqk/kzqmny5mo+67yteh9oa65rm5ijxytwixjx6fjiipaqokbthyf1eqgiz6oxkcqsm0hg==} cpu: [x64] os: [linux] '@rollup/rollup-linux-x64-musl@4.21.0': resolution: {integrity: sha512-1vvmgddusebvgxwx2licgrebqfqsff0hmekljyakq9jqubldkeamsptlomyccyc6ij/l3fzujbmrbw/u0a0ucq==} cpu: [x64] os: [linux] '@rollup/rollup-win32-arm64-msvc@4.21.0': resolution: {integrity: sha512-s5ofkz/hfcrlaybtonfy1twndfyre1womwu+6kcpm/iatybvrrgmzvm+vcfwxmc5zhdlgfe0n4xorsdpi7/4xq==} cpu: [arm64] os: [win32] '@rollup/rollup-win32-ia32-msvc@4.21.0': resolution: {integrity: sha512-g9+teqrnaa6nbpqyuqgtiopmnfgnmkr3kmukfbdsiyy23lzvucpiuwjtrx6ezycjjodxrh52rbr9oxvm+fp5wg==} cpu: [ia32] os: [win32] '@rollup/rollup-win32-x64-msvc@4.21.0': resolution: {integrity: sha512-2jscdzwtqvrhejhlfz1jy6w6keuetff9nzyszxzslnvkdx+dpsdj+rbjkm74nvg2rdx0gwbs+imdvwjuq3s9pq==} cpu: [x64] os: [win32] '@tauri-apps/api@1.6.0': resolution: {integrity: sha512-rqi++fwclu5i2ubp4hxfvl+sbwkdigbkxnpjdquwttnyg7izp4fwqghtnl5eow0vi8i6esaj5frlqo7n7jbjdg==} engines: {node: '&gt;= 14.6.0', npm: '&gt;= 6.6.0', yarn: '&gt;= 1.19.1'} '@tauri-apps/cli-darwin-arm64@1.6.0': resolution: {integrity: sha512-snrwud9nqgxy47mby1cgtt/jqyqou7ps7mx/mpgahl0fvudicey/5l9qfepphegccgcelevn7i6aqhikhyutca==} engines: {node: '&gt;= 10'} cpu: [arm64] os: [darwin] '@tauri-apps/cli-darwin-x64@1.6.0': resolution: {integrity: sha512-g2/udr/eeh2arvuawa4wwaeoqv/7jdo/zlni3jlbjp5pk8ggb3kdy0ro1xqzf94mtk2monoxa4dmgaet4suj1a==} engines: {node: '&gt;= 10'} cpu: [x64] os: [darwin] '@tauri-apps/cli-linux-arm-gnueabihf@1.6.0': resolution: {integrity: sha512-evwf4orkqyg8bpsrk0gqo7oa0sdm2mdndtjpmfleyfegcxliogzknqaow3m7u+0y4qikmg3ttrk+ngc8ymtrjg==} engines: {node: '&gt;= 10'} cpu: [arm] os: [linux] '@tauri-apps/cli-linux-arm64-gnu@1.6.0': resolution: {integrity: sha512-ydpy17caysrhk9dx4buvemhaxe2o+6skiefg8in/xrdwrxhanpi9i80yxpatutx54kx55t5++25vjg9+3iw83a==} engines: {node: '&gt;= 10'} cpu: [arm64] os: [linux] '@tauri-apps/cli-linux-arm64-musl@1.6.0': resolution: {integrity: sha512-4u628tuf2u8pmr4tibjhekrfwt+46dwhxrdlpdywsztnop5rjavkhodm0kbwns4xgkftw1f3r6ssv+2zxlcisa==} engines: {node: '&gt;= 10'} cpu: [arm64] os: [linux] '@tauri-apps/cli-linux-x64-gnu@1.6.0': resolution: {integrity: sha512-akrzp76fvuajyxj5krjt9bjyhwzyunrqu0rqirqotzct5yr6qgp8rjtq7yhcizwrseblollc3qvbgw3yl0vqca==} engines: {node: '&gt;= 10'} cpu: [x64] os: [linux] '@tauri-apps/cli-linux-x64-musl@1.6.0': resolution: {integrity: sha512-0edidq6ambtarmixddhfyafl361jqullld2wi2aooie7dkq2myh6gv3ha7nb9gqfwnige+xtj4bkxip2tsgplg==} engines: {node: '&gt;= 10'} cpu: [x64] os: [linux] '@tauri-apps/cli-win32-arm64-msvc@1.6.0': resolution: {integrity: sha512-qwwpwk4ubcwj1rljsramingb2awkyzzhpybala+mmzyymrecdxwgkyixwbrzgqc6fewebmq5ug73qz5ebjiikg==} engines: {node: '&gt;= 10'} cpu: [arm64] os: [win32] '@tauri-apps/cli-win32-ia32-msvc@1.6.0': resolution: {integrity: sha512-vtw0yxo9+aefuhuxq57alg43tjecoprimrukgbtzydcrib/ty5trt3qwmdy0dxbkpdtu3rqsz30sbdzw6tlp3q==} engines: {node: '&gt;= 10'} cpu: [ia32] os: [win32] '@tauri-apps/cli-win32-x64-msvc@1.6.0': resolution: {integrity: sha512-h54fhovgi7+lifrchzgzyschb1hdlp599vwxqqj/xnwjy+6rwr2e5boe/ehqog8rbgkfk0xx3kpavxpbulmggg==} engines: {node: '&gt;= 10'} cpu: [x64] os: [win32] '@tauri-apps/cli@1.6.0': resolution: {integrity: sha512-dbbpbl6ghtzm8immbkkfaz4fdtykwrc7q5oxp4xqd91recmden2lexuvuiis3hye7up8eb5b9nphhqjb+zo7qq==} engines: {node: '&gt;= 10'} hasbin: true '@types/babel__core@7.20.5': resolution: {integrity: sha512-qoqprzvz5wqfjwmdqeserxwv3rqmvhgpbxffvywhbx9x47poia6i/+dxefemzkoagoatdaignsmqmiu61yryza==} '@types/babel__generator@7.6.8': resolution: {integrity: sha512-assj+tpedseifr1arwrln6v3mdfjrmzt6ltk/vp/kreflnr5qh5+dhvd5ninyzxzwjvxegq+05iuxcazvrqwtw==} '@types/babel__template@7.4.4': resolution: {integrity: sha512-h/nuasyg5eyxbip8yrxo4rme2/qqgvyowrwvmzhyhbconbw8pusg4lkfmrhgzhue5z3l3milduvyj/capa2a8a==} '@types/babel__traverse@7.20.6': resolution: {integrity: sha512-r1bzfrm0tomoi8g1szvcaqho6lcv6zu0ea+w2khrt8dyrhqxgzbbl4kdkzis+jbmv+eycmaeaqxqyaljq5rozg==} '@types/estree@1.0.5': resolution: {integrity: sha512-/kyrxgdlwzhob7q+wtsuqlfrtcduccpfy+x+9imbphk8qllhx2wipyus5dytr9wa/ylzabiovy7qvdb1aq6lyw==} '@types/js-yaml@4.0.9': resolution: {integrity: sha512-k4mgaql5tgo/iipqb2udg2uwjxziswkh0uysqeltljpx1qglpuzym8pno4dxg1qbomtjudyj6qr6xdiah10jlg==} '@types/node@20.16.1': resolution: {integrity: sha512-zjdo7weadftsynz5qitdfrcrhqdvqi1xqnq0voizpjm/dvaodqqiuwbjpkvsxmti0myrgrikcdjmphossnpejq==} ansi-regex@5.0.1: resolution: {integrity: sha512-qujqxltsugl2lh9suxo8vwsy4soanhgo6lnsm84e1lbce8s3o0wpdirzyr9z/zzjmlmwv37qoob9pdjlmuekfq==} engines: {node: '&gt;=8'} ansi-regex@6.0.1: resolution: {integrity: sha512-n5m855fkb2ssfmiiffovrabhjc8qthwvx+mhwp3qceqbhyienj5dhsgjbxtc0wezxyt4wcd6zrqeldphfuzgfa==} engines: {node: '&gt;=12'} ansi-styles@3.2.1: resolution: {integrity: sha512-vt0zi6kzrdth8yyjw3smbym/u+nqfsaxepwo0pf9sq8/e94wxxoppkx9fr1flyctovdnoq+8ntlqfxirc+r5qa==} engines: {node: '&gt;=4'} ansi-styles@4.3.0: resolution: {integrity: sha512-zbb9rcjat1rbjivdb2hqkfhnylxgtk8nurxz3izwd3f6ntxbxzqcnnsi1lkx+idohdplfp222wvalihezjqseg==} engines: {node: '&gt;=8'} ansi-styles@6.2.1: resolution: {integrity: sha512-bn798gffqx+viw3r7yrgwrqnrn2orkekujjl4jnn4e8gxxbjtg3fbreiiy3l8/hrwuwieczvi4quotp4mervug==} engines: {node: '&gt;=12'} any-promise@1.3.0: resolution: {integrity: sha512-7uvmkalwrt1wgjl1rrgxosjw/0qzfiegpegvzg9kjp8vrru55xthbwnqq2gpxm9ulbcuhxm3iqx9ob4mzr1b2a==} anymatch@3.1.3: resolution: {integrity: sha512-kmrefur0b4t+d+obkjr3kyqvocp2xaszo55ucb6mgqmd3kbce+mwtyvvv7d/zsdebnnv6aczuutkihqxvtr1rw==} engines: {node: '&gt;= 8'} arg@5.0.2: resolution: {integrity: sha512-pyjyfolkq9y57jvq6qlo8dagnqswh8m1rmjydqdut6xbwsgk36p/z/v+p888pm69jmmfs8xd8f6i1kq/i9hugg==} argparse@2.0.1: resolution: {integrity: sha512-8+9wqebbfzpx9or+wa6o29asiogermzcgtaindpmhhyag10f05asfvbbceqgf/pxw1ejaz+q2/bebg3dvurk3q==} autoprefixer@10.4.20: resolution: {integrity: sha512-xy25y5xsv/weoqzdyxxme4affkzi0p23z6fs3ygymdnkjkcgonkl0itxca85utqasgfcqyf3ua6+c7wuvx/16g==} engines: {node: ^10 || ^12 || &gt;=14} hasbin: true peerdependencies: postcss: ^8.1.0 babel-plugin-jsx-dom-expressions@0.38.1: resolution: {integrity: sha512-4fd4h69cu4jhx2uldevx4yc5t/fc/dmaafhsm8hxm7sjhyzjr09gbvyhdofza+91f/g9e6tizjblcmkoxwmlew==} peerdependencies: '@babel/core': ^7.20.12 babel-preset-solid@1.8.19: resolution: {integrity: sha512-f3moudx3i4znhstnxubno+5kgsbvhpbgrpgqfrprs8w7fovjuosd1/f9qdyd9dgclhfr+j7v14931eu1peddmq==} peerdependencies: '@babel/core': ^7.0.0 balanced-match@1.0.2: resolution: {integrity: sha512-3oseuo0tmv67hn1ambxsk4yaqu7tjihlbxrdzoph0kw9+cex4braax0anxt0tx2mrprpwwqapwilisejhyu5pw==} binary-extensions@2.3.0: resolution: {integrity: sha512-ceh+7ox5qe7ljulhoy0feh3phuudhacrueyl2vyghzwfpkniy/+8ocg0a3uusoyzavmylwulwqof3hl0jjmmiw==} engines: {node: '&gt;=8'} brace-expansion@2.0.1: resolution: {integrity: sha512-xnaivq8em+kc6aulx6wuqiwvsnzsi9d3wxzv3fpwtga19f621kwdbsacfkxgkuhzwsy+my6il1shtxwefcytda==} braces@3.0.3: resolution: {integrity: sha512-yqbxgo/oszvd2isillro+7hf6q18ejrksesdomzkepkxct3gvd8olcoqdizgupr5fj+ede8go/lxc1bzfmpxva==} engines: {node: '&gt;=8'} browserslist@4.23.3: resolution: {integrity: sha512-btwcfjvji4ywdnfau8rhz+b1q/vlouitrm3rlp6y1tygwioa+inuyirgxubxo8na1qkmhmylb/ivqg5tt4efoa==} engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || &gt;=13.7} hasbin: true camelcase-css@2.0.1: resolution: {integrity: sha512-qosvevhslijgywrx6rv7zkdmf8lbrmx+uqgx2+vdc+ki/ebnsy9kit5aj23aggu3pa4t9agwbnxwqs+ioy+2aa==} engines: {node: '&gt;= 6'} caniuse-lite@1.0.30001651: resolution: {integrity: sha512-9cf+xv1jjne1xpzlguuxlnke1bodkqrqyyfj9tdysqhduqa4hu4or9hlugowyqc/aj8whjsgvv+bwkh0+tegrg==} chalk@2.4.2: resolution: {integrity: sha512-mti+f9lpjncwf4twv8/ortttf1gzi+f8fqlyadouralcfwfqwf2+ngchshjkcb+ifblq9buzwe1xckqu4pesuq==} engines: {node: '&gt;=4'} chokidar@3.6.0: resolution: {integrity: sha512-7vt13fmjotkpgipcw9jeqausepe+ei8nl6/g4fbamim0goolmua9nddo/dwp0zaxcr3cpq5zpbqmpaqgdda2pw==} engines: {node: '&gt;= 8.10.0'} class-variance-authority@0.7.0: resolution: {integrity: sha512-jfi8iqw4hczal4alinxqlexqbwcnjoskloa4iaufxcjr6qawjyw7turysrsre8w2p/4ggaxkit/hx3qz/ibd1a==} clsx@2.0.0: resolution: {integrity: sha512-rq1+kcj+tthg0mkvgbuxwayccf1oh39bf5coiprzucev8mwjv0xucri2exnton9illifgclwqcu9brzorvtw6q==} engines: {node: '&gt;=6'} color-convert@1.9.3: resolution: {integrity: sha512-qfautd+vfdatfqcc8ccyyt1fywxsqaik2csd6zdb8n3cpsebavrxp9zogg6g/shhjyat88/az/iudgalsnvbgg==} color-convert@2.0.1: resolution: {integrity: sha512-rrecpsj7iu/xb5okycsfhsppfnnsj/52ovtrkb4zp5onxwvf3zvmmtoncofgc+crdpfk/u584fmg38zhcaelkq==} engines: {node: '&gt;=7.0.0'} color-name@1.1.3: resolution: {integrity: sha512-72fsenhmw2hzmtvheca9kcmpeibzwiqsjn+bhcbbs9vr1mtt+vjjpdksibnumkaw8tfudpjk5suu3qhe9nexdw==} color-name@1.1.4: resolution: {integrity: sha512-doy+3auw3a2wnbzhiumzptcgjgulu/ubl/ubczf9oxbdo8ff4o8yvp5bf0efs8ueoyo5q4fx7dy9ogqgxgasqa==} commander@4.1.1: resolution: {integrity: sha512-nokm8xhkzajzfx8b2v5oaht+u5prqc2uca2vq9jyl/31o2wi9mxba7lifs3sv5vsc49z6pehfbmulvshkj26wa==} engines: {node: '&gt;= 6'} convert-source-map@2.0.0: resolution: {integrity: sha512-kvp459hrv2fej1casi1ku+my3kash19tfyktz2xwmmeq6bk2nu3xxvfj+q61m0xktwwt+1hsyf3jzstms3arjg==} cross-spawn@7.0.3: resolution: {integrity: sha512-irdpjkupvend7dhpo8rkbonppydygcdftwjpewncgy8wp2rxcxxl8tskreql6orb2g7+ujrags1q15fudc7g6w==} engines: {node: '&gt;= 8'} cssesc@3.0.0: resolution: {integrity: sha512-/tb/jcjk111nnscgob5mntsntnm1acnudipb/tkwzfhydrre47sox/18wf2bbjgc3zzcskw1t5nt5ebfoaz/vg==} engines: {node: '&gt;=4'} hasbin: true csstype@3.1.3: resolution: {integrity: sha512-m1uqkml8rqk/szd0lnhtqxiplpimgm8sobwu7llncpsbtyy3yeu1vc7l4kt5zt4s/yoxhh5o7tiuulocnladrw==} debug@4.3.6: resolution: {integrity: sha512-o/09bd4z1fbru4vzkhfqvgppzagbw6sm9fekbt1a/ybxqfguusxa1dn2nxgxs34jmkxqyx8czawevojfimuxig==} engines: {node: '&gt;=6.0'} peerdependencies: supports-color: '*' peerdependenciesmeta: supports-color: optional: true didyoumean@1.2.2: resolution: {integrity: sha512-gxtyfqmg7gkyhqmb056k7m3xszy/myh8w+b4rt+qxbqsvaodc3xymqddphx1bgpgsdaa5siifona89ytratdzw==} dlv@1.1.3: resolution: {integrity: sha512-+hlytyjlpknig8xurg8wvmbp8xs8p71y+skks6zxwoegluepxtdoueih7wkdepwrq5jbpe6aovqfzfjuqkjxwa==} eastasianwidth@0.2.0: resolution: {integrity: sha512-i88tyzwc9xiyhrq4/3c5rjjfgkjhlyw2lugihegerbnq6oy7ytybanspdxza8y7vup9ymdcya+eyq4ca7ilqwa==} electron-to-chromium@1.5.12: resolution: {integrity: sha512-tihpkdleocl1y+ptoq3zrnehuakp3wbx/sr7aclawdiwjvqae/im/h0sicm4c1q8blphcdojtol+zblflydeha==} emoji-regex@8.0.0: resolution: {integrity: sha512-msjyzcwnoa0ewahpz0mxpyfvwg6yjy1ng3xteoqz644vco/rpgnr1/ggt+ic3ijtzq8eu3tdm14sawnvumge6a==} emoji-regex@9.2.2: resolution: {integrity: sha512-l18dajsxsuk2+42pv8mls5jjt2hqfkfe4j21womgbuqsz2hl72nsuu785g9rxgo3s0zngvl42tihp3ztov/vyg==} esbuild@0.21.5: resolution: {integrity: sha512-mg3opmv4hxywwpodxu3qda5xckqi+vctzq8s9j/epkhb2hzkxq4snfze3+nk93jyxc8vmsep+lousc/rvkabqw==} engines: {node: '&gt;=12'} hasbin: true escalade@3.1.2: resolution: {integrity: sha512-erchmcae19vr8vqge50xisvomy19rg6gfu3+r3jkeo46sulmwbksvvyoggqv+jofl84zsoslmv6gxa89pmtgma==} engines: {node: '&gt;=6'} escape-string-regexp@1.0.5: resolution: {integrity: sha512-vbrorb5fuqwvla16u8r/qgafiya2qgzwdrnmczuykrbdsumg6i1zcgqrefkrvhuokigvne7bq35dsfo1qvjqfg==} engines: {node: '&gt;=0.8.0'} fast-glob@3.3.2: resolution: {integrity: sha512-ox2ruafqwf/orj8m737y5adxdqo0lab7/s5mnxcdtndd4p6bsyivsv9jqsatbtsq8khrplwihbvlunatxd+1ow==} engines: {node: '&gt;=8.6.0'} fastq@1.17.1: resolution: {integrity: sha512-srvd3lwvixwg6by68zn7vho9a1pqcn/wbfaaasddfzljjvogx0p8z7v1t72grfjfjhu3ypzbuu25f7kaw2jn1w==} fill-range@7.1.1: resolution: {integrity: sha512-ysgpe3whlk8zyi4twdg2jy3ebrz2rxowdxnld4bkqb00cc/1zw9awnc0i9ztdjitivtqvai9kalykrc+hbw0yg==} engines: {node: '&gt;=8'} foreground-child@3.3.0: resolution: {integrity: sha512-ld2g8rraymyfxbheqmz8zahbi4j4us1i/cxgmdnjyfwddmxlvcdp051dzfu+t7+ab7wv6smqpwmyfij5ubffvg==} engines: {node: '&gt;=14'} fraction.js@4.3.7: resolution: {integrity: sha512-zsdfxo51wgaxrey55a7la9lscwpwv9rxiryabrlvofblh/shpnrtsxeuuifxkkovicnxq+o8jtbjvjs4m89yew==} fsevents@2.3.3: resolution: {integrity: sha512-5xodfx+fl7faatnagmwppbftwh/r77wmmmqqhgs65c3vvb0yhrgf+b1ymz3441tmj5n63k0212xnojwzlhffqw==} engines: {node: ^8.16.0 || ^10.6.0 || &gt;=11.0.0} os: [darwin] function-bind@1.1.2: resolution: {integrity: sha512-7xhnxh7qx9xg5miwxkhumtox/mirncogdrxwsmt2par23whp6mrrln7fbsfpcpr+ovo0f744iugr82njmfg2sa==} gensync@1.0.0-beta.2: resolution: {integrity: sha512-3hn7naskyvmdlqy55gnw3nq+meseaeptqlg+vebj7zzqembvnhzcgyyeqfo/tlyz6eqifcp1hcsczo+nggs8zg==} engines: {node: '&gt;=6.9.0'} glob-parent@5.1.2: resolution: {integrity: sha512-aoigsqcepijywp3arngx+5vntu2hbydzbgp45elw1vr3zb3vzleyed1sc9hnbcoc9/srmym5rpqrkgz4as9zow==} engines: {node: '&gt;= 6'} glob-parent@6.0.2: resolution: {integrity: sha512-xxwi8eohvqgwp6idl+3b0r86f4d6ax6zsu55hfb4ydceuxlxc5fcyeou+nngfts4teju/11rt4kjptmgbfmv4a==} engines: {node: '&gt;=10.13.0'} glob@10.4.5: resolution: {integrity: sha512-7bv8rf0k6xjo7d4a/pxylbucfb6c+vpd2/mb2yrdlew7jb5hexicd9ibfo7wpk8i4sevk6dfny9h7eybm3/shg==} hasbin: true globals@11.12.0: resolution: {integrity: sha512-wobp/eeguiisjsp7wcv/y6mo+lv9uoncwqxuffm8ebwzwngyfbd6gz+iekq9jcmyhoh99g15m3t+qavhfjizva==} engines: {node: '&gt;=4'} has-flag@3.0.0: resolution: {integrity: sha512-skjf1+ceqbr4smkvqnbdndtf4txpvhvgateu0t918bl30fnbe2m4vnlx+vwe/dpjlb+huggyzw7uqxh98hpeyw==} engines: {node: '&gt;=4'} hasown@2.0.2: resolution: {integrity: sha512-0hju9scpvmmzibdzfqnpxwa6dqh7wdh0cii9y+cys8rg3nl48bclra9hmkhvvuhypwnh5y7xdwab7bfgsjkumq==} engines: {node: '&gt;= 0.4'} html-entities@2.3.3: resolution: {integrity: sha512-dv5ln36z34nntdgnz0ewgblzenelnatkifa4kynog2tdi6mz1uswiq1wakdyjnjwydido7fa2so1ctxpxl8vxa==} is-binary-path@2.1.0: resolution: {integrity: sha512-zmeryes6pdydyugidse7oshxtbi7wveueozgr/g7rd0xuimynlvzre/k2mgztjwy725ifellevcem97mmtrgxw==} engines: {node: '&gt;=8'} is-core-module@2.15.0: resolution: {integrity: sha512-dd+lb2/zvk9sky1tgct1wfjfo/mwbpmx5x7kcvlajwtguomczdqx61pvy5yk6svacwpoexwo81iffyoky2qnta==} engines: {node: '&gt;= 0.4'} is-extglob@2.1.1: resolution: {integrity: sha512-sbkbankn603vi4jezv49levjmn4ygwsbzzworeoyeiutsn3njydbo36zfhgj6qedpozifkdtnq5jrxmvl3jsoq==} engines: {node: '&gt;=0.10.0'} is-fullwidth-code-point@3.0.0: resolution: {integrity: sha512-zymm5+u+scsswyd9qnaejv3dfvhckclkdizyajuuha83rljb7nsugnddchgv0hk+ky7bmalswek4ueg6ev6xqg==} engines: {node: '&gt;=8'} is-glob@4.0.3: resolution: {integrity: sha512-xelsayhh36zge7zwhli7pw34hnbnl8ojv5kvmkjd4hbdd3th8tfk9vyaslm+mxwozhfkgzfxhlsnrwrr4elssg==} engines: {node: '&gt;=0.10.0'} is-number@7.0.0: resolution: {integrity: sha512-41cifkg6e8tylspdttpelvmqvsbevzttthverd741+pnz8anv0004mrl43qkpdlk9cgvnp6nzwzublbgxyxxng==} engines: {node: '&gt;=0.12.0'} is-what@4.1.16: resolution: {integrity: sha512-zhmweosbfjka0yhfnndgtm4zxdrss6hqto7qszm08fehyryiya0yhu5r6mgo1n/8mgapbxipimpd77bavfyg+a==} engines: {node: '&gt;=12.13'} isexe@2.0.0: resolution: {integrity: sha512-rhxmlp9lnkhghrng9qfhrcmbyacvpn69smsgcq3f36xjgvvwthj4qqlbtllq7ssj8b+fiq1eucegi2lksyqeiw==} jackspeak@3.4.3: resolution: {integrity: sha512-oglzqpz2yfaha/rd1y8cd9siesqvxklvosw/cgwhnhfmdbsqfezyojj7bizbs9bcamuw96asq/nppwugm+rqbw==} jiti@1.21.6: resolution: {integrity: sha512-2ytgewtwzmwkhu6jp9nkgepdayhbntiwvyuujlbbn9vl7dc9dvxkob2bc3zz92d3cvv/aflh0osdfwphepq53w==} hasbin: true js-tokens@4.0.0: resolution: {integrity: sha512-rdjuflce3cuzkimqqgscu06fpu9udijo0beybphhn4k6apgjtifcoctt9bcxopybtpd2kcm6sbzg4causw/pkq==} js-yaml@4.1.0: resolution: {integrity: sha512-wpxzs9noxzajesjgiztydeaypl0fksa+fb9ajiyemkhmwkxqg63h4t1kjgughptqpdnrcmmylugrrjjlbtwvra==} hasbin: true jsesc@2.5.2: resolution: {integrity: sha512-oyu7xezjkcq3c5ps3qizsqfnpqojyzza99wd9awd05nctc5pwokshk2mkl6hxqr6/cy2lbndplzbpuqhxe63ga==} engines: {node: '&gt;=4'} hasbin: true json5@2.2.3: resolution: {integrity: sha512-xmowe7eyhyh14cldvpoyg+goh3ryx++kpzryljwsw98t3nk+u8xol8fwkogwtzdb8lxgf6zywduzehmwfxasyg==} engines: {node: '&gt;=6'} hasbin: true lilconfig@2.1.0: resolution: {integrity: sha512-utwot/ghzuuxnlkxb6dk81rooeonehgbrxiugk4yyf5qlrz+iivwu56e2fqghfrxz0qnuhlb/8nkqvrh66jkgq==} engines: {node: '&gt;=10'} lilconfig@3.1.2: resolution: {integrity: sha512-eop+wdavpituys0fwkhikec9ybyrtgbu41u5k7+bttzzeohvny7m9dz5kb21gnwift2q1ooptvncpcgsovo5ow==} engines: {node: '&gt;=14'} lines-and-columns@1.2.4: resolution: {integrity: sha512-7ylyleszq/pv29jhedl3ufjo6zx7gcqjr5f7pkrqc93v7fzsymt1bpweu8nauxs8qzzvqhbjhk5qzg6mt/hkbg==} lru-cache@10.4.3: resolution: {integrity: sha512-jnazzcxrct42vgluyz0zfazdfavjww6afyldbqydv5dcli2m5samk+oio7s59xfsrswhp02jajrradprgtt6sq==} lru-cache@5.1.1: resolution: {integrity: sha512-kpnarqa3iwv+jta0utuvvbrh+jlrr1fv0e56ggzafoxn7dk/fviadw8lhmk52dlch4wp2n6gi8vn1aesbfgo9w==} merge-anything@5.1.7: resolution: {integrity: sha512-ertbob1n5iyh0tkqdaoq4ipsp/5qsr79dzrz8hepxrx10rwwr/iqxdokmbsrcthy1fh5ehisdtpsc93fpxuniq==} engines: {node: '&gt;=12.13'} merge2@1.4.1: resolution: {integrity: sha512-8q7vegmjw4j8tcfvpy8g09ncqwzdbwfeqhe/wzkoizjn/3tgdwtocytxgxa3o8tpzpczccdgv+p2p5y00zjoog==} engines: {node: '&gt;= 8'} micromatch@4.0.7: resolution: {integrity: sha512-lpp/3korzcwbxfeuuzmar6bg2kdehsbe0p2ty3flru4vyrjyz5hi4qzwv0njux3jeuke67yukq1lspzbkdqo/q==} engines: {node: '&gt;=8.6'} minimatch@9.0.5: resolution: {integrity: sha512-g6t0zx48xgozx7587koex9ys2nyy6gmv//p89sete9v9whiapmnf4idkxnw2qtcclitwlb/wfcabatafwhhbow==} engines: {node: '&gt;=16 || 14 &gt;=14.17'} minipass@7.1.2: resolution: {integrity: sha512-qoozs1cbtwyf4bh8fvepdboo9iptmnguezwnc/cmwntv2nvlz7vonwephkyczza0pdoa7dl6e7fl659nx9s2aw==} engines: {node: '&gt;=16 || 14 &gt;=14.17'} ms@2.1.2: resolution: {integrity: sha512-sgkpx+vjmtma6mx27oa4fbfelfczz4s4xqegoxcv68tt+jb3vk/ryakwp0ptkywtmlsm0b+adutevbs1peah2w==} mz@2.7.0: resolution: {integrity: sha512-z81gno7nnymehrgh9leymoe4+yr0wn5mchizmk5cfqcl+ndx08sczguc9/6mhni9iwuflm1z3htcxu2z9fn62q==} nanoid@3.3.7: resolution: {integrity: sha512-esrppjcpiatrimc1u6ungp8xfcz8mqwgqdt1mtbq7naamvxdfvnxbvwv3x2y6cdeucicssdhdqzbhyab8qeo2g==} engines: {node: ^10 || ^12 || ^13.7 || ^14 || &gt;=15.0.1} hasbin: true node-releases@2.0.18: resolution: {integrity: sha512-d9vext4sj7zeoqgx6r5em022wpl+ewpooli+5upwn2jct1aosuqehqp214x33wkwx3jqmvim+tiovododfs40g==} normalize-path@3.0.0: resolution: {integrity: sha512-6ezs5ls3wtcishwp9s2guy8dqkpgi4bvsz3gaqie6ezub0512esztxuwub6c6ikbqky2pnb/md4wyojcrwcwla==} engines: {node: '&gt;=0.10.0'} normalize-range@0.1.2: resolution: {integrity: sha512-bdok/xvkii3nupklnv6p2hxtmnrcboojacybuqnweho665fwrsnrxu+aqpsyvo6lggypspn+lu5cltw4jprkna==} engines: {node: '&gt;=0.10.0'} object-assign@4.1.1: resolution: {integrity: sha512-rjgtqnkunh1sfw8yt6vsu3zd3swmu6szhisey8vx+gru3p6f7fu+jndoxfklelbljsnc3fuqhve4cu5hj+bcug==} engines: {node: '&gt;=0.10.0'} object-hash@3.0.0: resolution: {integrity: sha512-rsn9f68pjh9hqtltssnqyc1xxowe9bju5+213r98cngttag9q9yaotzdbsqvia7anm5wffbzfpwyr2awrklwaw==} engines: {node: '&gt;= 6'} package-json-from-dist@1.0.0: resolution: {integrity: sha512-datvcezn/8wqsgywez1mzhttlp22h8oefprvmlnr4/ega+ijtln/6m5f0dy8uknrc2o9ucu6ssog3qrknt7stw==} path-key@3.1.1: resolution: {integrity: sha512-ojmen0qd+y0jszetoy48r0peq5dwmekilcou6q5f41lfkswxuktyrhgotplnyichm24uhqx+5tqm2inswlhe6q==} engines: {node: '&gt;=8'} path-parse@1.0.7: resolution: {integrity: sha512-ldjzpveeepr+y48z93a0ed0yxb8pabygwo/k5yydygpy2/2esosksjrq7lohxryrvon1ejg6oap8ahvoiqd8sw==} path-scurry@1.11.1: resolution: {integrity: sha512-xa4nw17fs9apqfj9umlijs4orgjm7zzwurwamcgquhszdyth9bokdaycyddczduqyatxw4hfxgaqwtctw/v1ha==} engines: {node: '&gt;=16 || 14 &gt;=14.18'} picocolors@1.0.1: resolution: {integrity: sha512-anp1z8qwhkbmu7mfp5itt+wqkxgwzf7ztyglcdzabysa9vd0xt392u0rvmz9pooabj0uhjkyyo9/upk0hreqew==} picomatch@2.3.1: resolution: {integrity: sha512-ju3tehtnjme2vcgfzuy8exzcdvweqb2a8fsivwasthhawjeevd1o1qd80cu6+zdexxslbssulwjjkcbwqrquva==} engines: {node: '&gt;=8.6'} pify@2.3.0: resolution: {integrity: sha512-udgsay+ftnvv7ki7aaxbqwwnb0ahib0qbo89pzkpkotmgogdbrhdkd+0b2x4utfj/ft1r09r9gtsjujnjotuog==} engines: {node: '&gt;=0.10.0'} pirates@4.0.6: resolution: {integrity: sha512-salsh7weyypid25ldulrry/i+6hapyr6g1ouln39otzkstxknubr9rtxs3/kk50s1g2jtgfwwqdqyplc5/shzg==} engines: {node: '&gt;= 6'} postcss-import@15.1.0: resolution: {integrity: sha512-hpr+j05b2fvyuaxhek1yyi267j/dddhmu6b6civm8hsy1jyjnbxxzkdkdswzjmtlhryrjhndjqqp/49t8falew==} engines: {node: '&gt;=14.0.0'} peerdependencies: postcss: ^8.0.0 postcss-js@4.0.1: resolution: {integrity: sha512-ddlf8peo191hjmtlhfpra8xsizham82mlfnkuhdutvev3tgtp5oj+8qbeqym57slfc74ksbw//4sejma2lrviw==} engines: {node: ^12 || ^14 || &gt;= 16} peerdependencies: postcss: ^8.4.21 postcss-load-config@4.0.2: resolution: {integrity: sha512-bsvhyjgl00wmvopuzavanbeowyqrxkjv64tul427sknprentq6hjwuojromz2vb+q1edmi4ifrappami5vvgmq==} engines: {node: '&gt;= 14'} peerdependencies: postcss: '&gt;=8.0.9' ts-node: '&gt;=9.0.0' peerdependenciesmeta: postcss: optional: true ts-node: optional: true postcss-nested@6.2.0: resolution: {integrity: sha512-hqbt28kulc5ajzg+cztj9kvkb93cfcdlvog1wflf1d+xmmvpglbstkptezfk5+an9hfjocybfcniqys48bpgzq==} engines: {node: '&gt;=12.0'} peerdependencies: postcss: ^8.2.14 postcss-selector-parser@6.1.2: resolution: {integrity: sha512-q8qqfpiz+tho/3zroro0cjjkfpycagtmukxbnefmgujwxg6z/wbeoys9apbbpctsidv+s4swqgu8yfsimriudg==} engines: {node: '&gt;=4'} postcss-value-parser@4.2.0: resolution: {integrity: sha512-1nncs6uurfkvbexg4s8jft9t19m45icnif8zwld5opsz50qnwmfk+h3jv408d4jw/7bttv5axs5iiholavnheq==} postcss@8.4.41: resolution: {integrity: sha512-tesuflq0wkzqavg52pwl6khglkp6xb6hetodoym0wt2uhyxna4k25ezzmgkns3bh1rlvbzcrepply0rhnnohvq==} engines: {node: ^10 || ^12 || &gt;=14} queue-microtask@1.2.3: resolution: {integrity: sha512-nuansa6flkt5jasyqzjok04jztl1ca6aghv5rflw3pgqa+m2chpzqnac8h8i4zfkbs8x5rqkdbha7r4hej3k9a==} read-cache@1.0.0: resolution: {integrity: sha512-owdv/ft7ijogm/i0xvndz1lrranrfew4b2prf3owmqlxlfu3bs8fvhcsrscmk4lr56y9ya+athotpdctxcmpra==} readdirp@3.6.0: resolution: {integrity: sha512-hos089on8rduqdbhvq5z37a0esjsqz6qnrcffsmu3495futdqsm+7bhj29jviosbdeenan5dpu9t3to9vrlmza==} engines: {node: '&gt;=8.10.0'} resolve@1.22.8: resolution: {integrity: sha512-okwepcxqpd6fllvgv1vu0x7bkpmmcnolxzjmf4nczodnqciwraf+cptzn5i6n+rfd2d9i0tzpkng6yk168yiyw==} hasbin: true reusify@1.0.4: resolution: {integrity: sha512-u9nh88a3fc/ekcf1l0/up1iosiuijyth7hbvxvmhygvcfgvt897xguj2uoldei5bg2m7/uwyalvt6fbtcwtyzw==} engines: {iojs: '&gt;=1.0.0', node: '&gt;=0.10.0'} rollup@4.21.0: resolution: {integrity: sha512-vo+s/lfa2lms7rz2qoubi6i5hwzwzxeuictilzlbhi+lantvhhoion2s1jksa5uedq7l3vberd0fxk44ltyjbq==} engines: {node: '&gt;=18.0.0', npm: '&gt;=8.0.0'} hasbin: true run-parallel@1.2.0: resolution: {integrity: sha512-5l4vyzr86lz/ldxztr6jql8afe2s0iflmp26abjslvadxhdhb/c0gush+y39ufci3dzz8olqupmnajomodhqba==} semver@6.3.1: resolution: {integrity: sha512-br7vvdcvho+q2xbewskxs6dje1qrnb7dxzurogb71cwosficbxysiagd+kl0mmq/mprg9yarrkyrqxto6xjmza==} hasbin: true seroval-plugins@1.1.1: resolution: {integrity: sha512-qnsy1+nuj7hscoon7ao4wdaio9p0jrzamp18xhioza6/uo5tktp7scozvj8t293orivi5wychsm4trjo/c/gja==} engines: {node: '&gt;=10'} peerdependencies: seroval: ^1.0 seroval@1.1.1: resolution: {integrity: sha512-rqeo6fzk8mv7hyv4ucj3fd3b6waqft605tlfsce/biaylrpyymc0b+ua5tjkawx3kzmrdi3wslbcalplrqmbvq==} engines: {node: '&gt;=10'} shebang-command@2.0.0: resolution: {integrity: sha512-khxr2zzpytdmrn1qdjrrx/z1rr1kg8dx+gkpk1g4exmvxswmce1htwbwyuzlrayw1/yzp6yudy77ytvbn0dmda==} engines: {node: '&gt;=8'} shebang-regex@3.0.0: resolution: {integrity: sha512-7++dfhtcx3353ubaq8ddr4nuxbetbzc7zqohmtqinhed6bsrxdieyzcvg07z44uydlshwuyxt5m/yhz8ekcb1a==} engines: {node: '&gt;=8'} signal-exit@4.1.0: resolution: {integrity: sha512-bzyz1e88w9o1injbknolvytrwpdl46o1bg0d3xinv+9tkprxrn8juutifldkkmkwgn1m6cfia13sugqoa9korw==} engines: {node: '&gt;=14'} solid-js@1.8.21: resolution: {integrity: sha512-fhugdoo7gva1btpgh/4utwiisde0vsxoqnb6kfphitgkiy959tmcj7nyqawdfscbfnpomgzr8lfz0diww/gflw==} solid-refresh@0.6.3: resolution: {integrity: sha512-f3apsx6hvw9ttm5lylth8q15x6mli/j3dn+o3eqyrtttxidepstwaydozt01/ya+7obcciaggeyxiopgzzqtba==} peerdependencies: solid-js: ^1.3 source-map-js@1.2.0: resolution: {integrity: sha512-itjw8lvsa0txephiroawscksnlf8syvmfzihltqahluxd88pkcd+cxjvhtdwdcr0izwptsm035ihqktuu1qumg==} engines: {node: '&gt;=0.10.0'} string-width@4.2.3: resolution: {integrity: sha512-wkyqrqpjj0sip62erszdgsjmjwsap5ornihhhu6g7jvo/9jib6uyevl+txuoqrng8j/cxktwywuwvstriizz/g==} engines: {node: '&gt;=8'} string-width@5.1.2: resolution: {integrity: sha512-hnlocr3vjcy8beonltcjz5/nxn2afmme6lhrdrebokqmap+xbew8n9txppdoqdgk5qci3ot0gktw6wc7emivqa==} engines: {node: '&gt;=12'} strip-ansi@6.0.1: resolution: {integrity: sha512-y38vpshcqkfrcpfnq9vusxmquuv5oxokpget6agrr3o3gc9alva6jbfusocnbxggzf+/0ooi7krpuusztudu5a==} engines: {node: '&gt;=8'} strip-ansi@7.1.0: resolution: {integrity: sha512-iq6evvi64nqqtryq2kteg2d2uu7lelhtjwsh4yzihzshxlgzms/wic4vodqtlg/ivvirbkg06crznp0qv7hkcq==} engines: {node: '&gt;=12'} sucrase@3.35.0: resolution: {integrity: sha512-8ebvdiu9in/neswxesxdke0dunta1golhufmssxxmd2z2/tmzpdmpvxqgsc+ajgo8y2uyumixasruc/qpoq0ga==} engines: {node: '&gt;=16 || 14 &gt;=14.17'} hasbin: true supports-color@5.5.0: resolution: {integrity: sha512-qjvjwdxit408miiaqcx4ouksgu2eqagzs2ppkm4aqybjm+zewecw4sffntr4umnzma0ey4f5lglrkb0ax0qmow==} engines: {node: '&gt;=4'} supports-preserve-symlinks-flag@1.0.0: resolution: {integrity: sha512-ot0wnxs9fgdkgicepe6rhnk1wa8+mupa6csjer3v8k27q9bb1rte3r1p7hv0z1zyac8s6vvv8diywf681mat0w==} engines: {node: '&gt;= 0.4'} tailwind-merge@2.5.2: resolution: {integrity: sha512-kjebm+pvd+6eawzjl2bi+02/9lflal1gs61+qb7hvtfqq0axwc5lgt8pet1gs0cwkktke6ysptay3cbc5meiig==} tailwindcss-animate@1.0.7: resolution: {integrity: sha512-bl6mph3t7i3ufxuvdexlxy/vufxbk5bbzplh7txi68mwmoknyd1t9qpbhlnytwfa4jgc4zp516i1hyytq/vspa==} peerdependencies: tailwindcss: '&gt;=3.0.0 || insiders' tailwindcss@3.4.10: resolution: {integrity: sha512-kwzkvpm7yjrhdu4srsl9d4ak2wm3a50usvghzo7xy77nqr2v+fireuodgqcbvswwvfgbs2f6e+jc/6wjm1dl0w==} engines: {node: '&gt;=14.0.0'} hasbin: true thenify-all@1.6.0: resolution: {integrity: sha512-rnxqh/qi8/t3thxjdwcstuo4zeqo64+uy/+snvrbx4xn2ox+oz9op+ijnnfqplfra2zuvekcsa2ovwi3t4uvma==} engines: {node: '&gt;=0.8'} thenify@3.3.1: resolution: {integrity: sha512-rvzsiv5ig10hk3enotrhvz0t9em6cyhblkh/yazukqd8hrkkhsfcgicp2kuy0epxndzanbmnllzwpwak+bhesw==} tippy.js@6.3.7: resolution: {integrity: sha512-e1d3op2emgj9drqzdf3kkn0qjgi6zlpys5z6zky1df3kaqabsgzsndephwx+ec+tym41hasnvntlx8tu57fztq==} to-fast-properties@2.0.0: resolution: {integrity: sha512-/oakk0xyrs3dmxryql/ydc+fxfuvyhdlxmhrmv3z915w2hf1tnn1omb354j8vugo/hbrzyd6y3sa7v7gs/ceog==} engines: {node: '&gt;=4'} to-regex-range@5.0.1: resolution: {integrity: sha512-65p7iz6x5yer1cwcgvqxbbiw7uk3goy5didtz4rdvelqhrdjp+li/hx6tyk0neb+2gcynecmjigqradcsnk8sq==} engines: {node: '&gt;=8.0'} ts-interface-checker@0.1.13: resolution: {integrity: sha512-y/arvbn+rrz3jckl9c4kvnftfsm2/mep5fsz5eszsangpslqrpri5m4pkf+mjne52joo90pnpsc3ur3btqw0ga==} typescript@5.5.4: resolution: {integrity: sha512-mtq29skdaeyp7aljrgtpoptvofbwrwls6dprzwjde+c0r4brx/guyhhsecbhmflnblcjipt9nl9yg5tz1weh+q==} engines: {node: '&gt;=14.17'} hasbin: true undici-types@6.19.8: resolution: {integrity: sha512-ve2kp6f/jnbpbfyobghuerc9g1fygn/f8n1lwtwnxcezd6ifqtwuqcnxgetmmq6dlrrc1hrsrbnczpokrrdhjw==} update-browserslist-db@1.1.0: resolution: {integrity: sha512-edraaayk2cue1wof2dkehzxqoqvfoorjfns6neyj01gp2bemrpbainjm2idxe3kcukhwnvhiqcjm6thl2z+hzq==} hasbin: true peerdependencies: browserslist: '&gt;= 4.21.0' util-deprecate@1.0.2: resolution: {integrity: sha512-epd5q1uxyfxjpcrlncc1nhnq3goa6dzbocaiii2tasca7vcj1ujdmagczikxnsuyfd1dak//lteq8xiibrhtcw==} validate-html-nesting@1.2.2: resolution: {integrity: sha512-hgdgqozcsqjmyfk5urgfcweqsssrk63awe0t/imr0bz0qmtnuaihzthw81guu3qx9abli99neuian6p9gvysng==} vite-plugin-solid@2.10.2: resolution: {integrity: sha512-aoetwme2babsxmxdo+buwecc8ifhcks6wqv/1ned+q7vhpap5fmihlcazr+duj04/khx/1ubu0l1/gwp+rmapq==} peerdependencies: '@testing-library/jest-dom': ^5.16.6 || ^5.17.0 || ^6.* solid-js: ^1.7.2 vite: ^3.0.0 || ^4.0.0 || ^5.0.0 peerdependenciesmeta: '@testing-library/jest-dom': optional: true vite@5.4.2: resolution: {integrity: sha512-ddrqtrhp5c1ftfzcsamxjk6vdpkvt+2/mide07gw2ykeht49o0z/vhs3zz8iv/gh8bjjkhwoe5rjanrw5xf/ga==} engines: {node: ^18.0.0 || &gt;=20.0.0} hasbin: true peerdependencies: '@types/node': ^18.0.0 || &gt;=20.0.0 less: '*' lightningcss: ^1.21.0 sass: '*' sass-embedded: '*' stylus: '*' sugarss: '*' terser: ^5.4.0 peerdependenciesmeta: '@types/node': optional: true less: optional: true lightningcss: optional: true sass: optional: true sass-embedded: optional: true stylus: optional: true sugarss: optional: true terser: optional: true vitefu@0.2.5: resolution: {integrity: sha512-sghtmloqaeegnd2evz849zbacbnwqciwrh57t18fxcxozop0uqu0uzlihjblf/ewvzuce0sheqpcdo+evvcg8q==} peerdependencies: vite: ^3.0.0 || ^4.0.0 || ^5.0.0 peerdependenciesmeta: vite: optional: true which@2.0.2: resolution: {integrity: sha512-bli3tl1tw3pvl70l3yq3y64i+awpwxqsgbywkkqmtnbxgrmd+yj7rhw0kuedxzjayxgjew5ogapknmeknmjiba==} engines: {node: '&gt;= 8'} hasbin: true wrap-ansi@7.0.0: resolution: {integrity: sha512-yvgij2kamlstxw6nszjobxfswsn0ycdesmc4p+q21c5zpuz1pl+nfxvdxptdhvmnvoq6xsyg4autyt/fi7d16q==} engines: {node: '&gt;=10'} wrap-ansi@8.1.0: resolution: {integrity: sha512-si7qwi6zumq56besfvagtmzmdgotoxfr+sez11mobfc7tm+vkuckk9bw2uefftgvuboksxmsw0aa2gs8g71ncq==} engines: {node: '&gt;=12'} yallist@3.1.1: resolution: {integrity: sha512-a4ugqawph59moxuynag2ewncqs4i4f43tv3joam+s2vdams9nsk8gpdmlrchpksft7h3k6toounn2pb7roxx4g==} yaml@2.5.0: resolution: {integrity: sha512-2wwlbgbydisqqikopjar3mpgb94erzctrne1fdqguao0pi2jgjme8aw8tdzwzu7vuxcgrdl/4gpqwq7hd5amsw==} engines: {node: '&gt;= 14'} hasbin: true snapshots: '@alloc/quick-lru@5.2.0': {} '@ampproject/remapping@2.3.0': dependencies: '@jridgewell/gen-mapping': 0.3.5 '@jridgewell/trace-mapping': 0.3.25 '@babel/code-frame@7.24.7': dependencies: '@babel/highlight': 7.24.7 picocolors: 1.0.1 '@babel/compat-data@7.25.2': {} '@babel/core@7.25.2': dependencies: '@ampproject/remapping': 2.3.0 '@babel/code-frame': 7.24.7 '@babel/generator': 7.25.0 '@babel/helper-compilation-targets': 7.25.2 '@babel/helper-module-transforms': 7.25.2(@babel/core@7.25.2) '@babel/helpers': 7.25.0 '@babel/parser': 7.25.3 '@babel/template': 7.25.0 '@babel/traverse': 7.25.3 '@babel/types': 7.25.2 convert-source-map: 2.0.0 debug: 4.3.6 gensync: 1.0.0-beta.2 json5: 2.2.3 semver: 6.3.1 transitivepeerdependencies: - supports-color '@babel/generator@7.25.0': dependencies: '@babel/types': 7.25.2 '@jridgewell/gen-mapping': 0.3.5 '@jridgewell/trace-mapping': 0.3.25 jsesc: 2.5.2 '@babel/helper-compilation-targets@7.25.2': dependencies: '@babel/compat-data': 7.25.2 '@babel/helper-validator-option': 7.24.8 browserslist: 4.23.3 lru-cache: 5.1.1 semver: 6.3.1 '@babel/helper-module-imports@7.18.6': dependencies: '@babel/types': 7.25.2 '@babel/helper-module-imports@7.24.7': dependencies: '@babel/traverse': 7.25.3 '@babel/types': 7.25.2 transitivepeerdependencies: - supports-color '@babel/helper-module-transforms@7.25.2(@babel/core@7.25.2)': dependencies: '@babel/core': 7.25.2 '@babel/helper-module-imports': 7.24.7 '@babel/helper-simple-access': 7.24.7 '@babel/helper-validator-identifier': 7.24.7 '@babel/traverse': 7.25.3 transitivepeerdependencies: - supports-color '@babel/helper-plugin-utils@7.24.8': {} '@babel/helper-simple-access@7.24.7': dependencies: '@babel/traverse': 7.25.3 '@babel/types': 7.25.2 transitivepeerdependencies: - supports-color '@babel/helper-string-parser@7.24.8': {} '@babel/helper-validator-identifier@7.24.7': {} '@babel/helper-validator-option@7.24.8': {} '@babel/helpers@7.25.0': dependencies: '@babel/template': 7.25.0 '@babel/types': 7.25.2 '@babel/highlight@7.24.7': dependencies: '@babel/helper-validator-identifier': 7.24.7 chalk: 2.4.2 js-tokens: 4.0.0 picocolors: 1.0.1 '@babel/parser@7.25.3': dependencies: '@babel/types': 7.25.2 '@babel/plugin-syntax-jsx@7.24.7(@babel/core@7.25.2)': dependencies: '@babel/core': 7.25.2 '@babel/helper-plugin-utils': 7.24.8 '@babel/template@7.25.0': dependencies: '@babel/code-frame': 7.24.7 '@babel/parser': 7.25.3 '@babel/types': 7.25.2 '@babel/traverse@7.25.3': dependencies: '@babel/code-frame': 7.24.7 '@babel/generator': 7.25.0 '@babel/parser': 7.25.3 '@babel/template': 7.25.0 '@babel/types': 7.25.2 debug: 4.3.6 globals: 11.12.0 transitivepeerdependencies: - supports-color '@babel/types@7.25.2': dependencies: '@babel/helper-string-parser': 7.24.8 '@babel/helper-validator-identifier': 7.24.7 to-fast-properties: 2.0.0 '@esbuild/aix-ppc64@0.21.5': optional: true '@esbuild/android-arm64@0.21.5': optional: true '@esbuild/android-arm@0.21.5': optional: true '@esbuild/android-x64@0.21.5': optional: true '@esbuild/darwin-arm64@0.21.5': optional: true '@esbuild/darwin-x64@0.21.5': optional: true '@esbuild/freebsd-arm64@0.21.5': optional: true '@esbuild/freebsd-x64@0.21.5': optional: true '@esbuild/linux-arm64@0.21.5': optional: true '@esbuild/linux-arm@0.21.5': optional: true '@esbuild/linux-ia32@0.21.5': optional: true '@esbuild/linux-loong64@0.21.5': optional: true '@esbuild/linux-mips64el@0.21.5': optional: true '@esbuild/linux-ppc64@0.21.5': optional: true '@esbuild/linux-riscv64@0.21.5': optional: true '@esbuild/linux-s390x@0.21.5': optional: true '@esbuild/linux-x64@0.21.5': optional: true '@esbuild/netbsd-x64@0.21.5': optional: true '@esbuild/openbsd-x64@0.21.5': optional: true '@esbuild/sunos-x64@0.21.5': optional: true '@esbuild/win32-arm64@0.21.5': optional: true '@esbuild/win32-ia32@0.21.5': optional: true '@esbuild/win32-x64@0.21.5': optional: true '@isaacs/cliui@8.0.2': dependencies: string-width: 5.1.2 string-width-cjs: string-width@4.2.3 strip-ansi: 7.1.0 strip-ansi-cjs: strip-ansi@6.0.1 wrap-ansi: 8.1.0 wrap-ansi-cjs: wrap-ansi@7.0.0 '@jridgewell/gen-mapping@0.3.5': dependencies: '@jridgewell/set-array': 1.2.1 '@jridgewell/sourcemap-codec': 1.5.0 '@jridgewell/trace-mapping': 0.3.25 '@jridgewell/resolve-uri@3.1.2': {} '@jridgewell/set-array@1.2.1': {} '@jridgewell/sourcemap-codec@1.5.0': {} '@jridgewell/trace-mapping@0.3.25': dependencies: '@jridgewell/resolve-uri': 3.1.2 '@jridgewell/sourcemap-codec': 1.5.0 '@jsr/std__ini@0.225.2': {} '@jsr/std__yaml@1.0.3': {} '@nodelib/fs.scandir@2.1.5': dependencies: '@nodelib/fs.stat': 2.0.5 run-parallel: 1.2.0 '@nodelib/fs.stat@2.0.5': {} '@nodelib/fs.walk@1.2.8': dependencies: '@nodelib/fs.scandir': 2.1.5 fastq: 1.17.1 '@pkgjs/parseargs@0.11.0': optional: true '@popperjs/core@2.11.8': {} '@rollup/rollup-android-arm-eabi@4.21.0': optional: true '@rollup/rollup-android-arm64@4.21.0': optional: true '@rollup/rollup-darwin-arm64@4.21.0': optional: true '@rollup/rollup-darwin-x64@4.21.0': optional: true '@rollup/rollup-linux-arm-gnueabihf@4.21.0': optional: true '@rollup/rollup-linux-arm-musleabihf@4.21.0': optional: true '@rollup/rollup-linux-arm64-gnu@4.21.0': optional: true '@rollup/rollup-linux-arm64-musl@4.21.0': optional: true '@rollup/rollup-linux-powerpc64le-gnu@4.21.0': optional: true '@rollup/rollup-linux-riscv64-gnu@4.21.0': optional: true '@rollup/rollup-linux-s390x-gnu@4.21.0': optional: true '@rollup/rollup-linux-x64-gnu@4.21.0': optional: true '@rollup/rollup-linux-x64-musl@4.21.0': optional: true '@rollup/rollup-win32-arm64-msvc@4.21.0': optional: true '@rollup/rollup-win32-ia32-msvc@4.21.0': optional: true '@rollup/rollup-win32-x64-msvc@4.21.0': optional: true '@tauri-apps/api@1.6.0': {} '@tauri-apps/cli-darwin-arm64@1.6.0': optional: true '@tauri-apps/cli-darwin-x64@1.6.0': optional: true '@tauri-apps/cli-linux-arm-gnueabihf@1.6.0': optional: true '@tauri-apps/cli-linux-arm64-gnu@1.6.0': optional: true '@tauri-apps/cli-linux-arm64-musl@1.6.0': optional: true '@tauri-apps/cli-linux-x64-gnu@1.6.0': optional: true '@tauri-apps/cli-linux-x64-musl@1.6.0': optional: true '@tauri-apps/cli-win32-arm64-msvc@1.6.0': optional: true '@tauri-apps/cli-win32-ia32-msvc@1.6.0': optional: true '@tauri-apps/cli-win32-x64-msvc@1.6.0': optional: true '@tauri-apps/cli@1.6.0': optionaldependencies: '@tauri-apps/cli-darwin-arm64': 1.6.0 '@tauri-apps/cli-darwin-x64': 1.6.0 '@tauri-apps/cli-linux-arm-gnueabihf': 1.6.0 '@tauri-apps/cli-linux-arm64-gnu': 1.6.0 '@tauri-apps/cli-linux-arm64-musl': 1.6.0 '@tauri-apps/cli-linux-x64-gnu': 1.6.0 '@tauri-apps/cli-linux-x64-musl': 1.6.0 '@tauri-apps/cli-win32-arm64-msvc': 1.6.0 '@tauri-apps/cli-win32-ia32-msvc': 1.6.0 '@tauri-apps/cli-win32-x64-msvc': 1.6.0 '@types/babel__core@7.20.5': dependencies: '@babel/parser': 7.25.3 '@babel/types': 7.25.2 '@types/babel__generator': 7.6.8 '@types/babel__template': 7.4.4 '@types/babel__traverse': 7.20.6 '@types/babel__generator@7.6.8': dependencies: '@babel/types': 7.25.2 '@types/babel__template@7.4.4': dependencies: '@babel/parser': 7.25.3 '@babel/types': 7.25.2 '@types/babel__traverse@7.20.6': dependencies: '@babel/types': 7.25.2 '@types/estree@1.0.5': {} '@types/js-yaml@4.0.9': {} '@types/node@20.16.1': dependencies: undici-types: 6.19.8 ansi-regex@5.0.1: {} ansi-regex@6.0.1: {} ansi-styles@3.2.1: dependencies: color-convert: 1.9.3 ansi-styles@4.3.0: dependencies: color-convert: 2.0.1 ansi-styles@6.2.1: {} any-promise@1.3.0: {} anymatch@3.1.3: dependencies: normalize-path: 3.0.0 picomatch: 2.3.1 arg@5.0.2: {} argparse@2.0.1: {} autoprefixer@10.4.20(postcss@8.4.41): dependencies: browserslist: 4.23.3 caniuse-lite: 1.0.30001651 fraction.js: 4.3.7 normalize-range: 0.1.2 picocolors: 1.0.1 postcss: 8.4.41 postcss-value-parser: 4.2.0 babel-plugin-jsx-dom-expressions@0.38.1(@babel/core@7.25.2): dependencies: '@babel/core': 7.25.2 '@babel/helper-module-imports': 7.18.6 '@babel/plugin-syntax-jsx': 7.24.7(@babel/core@7.25.2) '@babel/types': 7.25.2 html-entities: 2.3.3 validate-html-nesting: 1.2.2 babel-preset-solid@1.8.19(@babel/core@7.25.2): dependencies: '@babel/core': 7.25.2 babel-plugin-jsx-dom-expressions: 0.38.1(@babel/core@7.25.2) balanced-match@1.0.2: {} binary-extensions@2.3.0: {} brace-expansion@2.0.1: dependencies: balanced-match: 1.0.2 braces@3.0.3: dependencies: fill-range: 7.1.1 browserslist@4.23.3: dependencies: caniuse-lite: 1.0.30001651 electron-to-chromium: 1.5.12 node-releases: 2.0.18 update-browserslist-db: 1.1.0(browserslist@4.23.3) camelcase-css@2.0.1: {} caniuse-lite@1.0.30001651: {} chalk@2.4.2: dependencies: ansi-styles: 3.2.1 escape-string-regexp: 1.0.5 supports-color: 5.5.0 chokidar@3.6.0: dependencies: anymatch: 3.1.3 braces: 3.0.3 glob-parent: 5.1.2 is-binary-path: 2.1.0 is-glob: 4.0.3 normalize-path: 3.0.0 readdirp: 3.6.0 optionaldependencies: fsevents: 2.3.3 class-variance-authority@0.7.0: dependencies: clsx: 2.0.0 clsx@2.0.0: {} color-convert@1.9.3: dependencies: color-name: 1.1.3 color-convert@2.0.1: dependencies: color-name: 1.1.4 color-name@1.1.3: {} color-name@1.1.4: {} commander@4.1.1: {} convert-source-map@2.0.0: {} cross-spawn@7.0.3: dependencies: path-key: 3.1.1 shebang-command: 2.0.0 which: 2.0.2 cssesc@3.0.0: {} csstype@3.1.3: {} debug@4.3.6: dependencies: ms: 2.1.2 didyoumean@1.2.2: {} dlv@1.1.3: {} eastasianwidth@0.2.0: {} electron-to-chromium@1.5.12: {} emoji-regex@8.0.0: {} emoji-regex@9.2.2: {} esbuild@0.21.5: optionaldependencies: '@esbuild/aix-ppc64': 0.21.5 '@esbuild/android-arm': 0.21.5 '@esbuild/android-arm64': 0.21.5 '@esbuild/android-x64': 0.21.5 '@esbuild/darwin-arm64': 0.21.5 '@esbuild/darwin-x64': 0.21.5 '@esbuild/freebsd-arm64': 0.21.5 '@esbuild/freebsd-x64': 0.21.5 '@esbuild/linux-arm': 0.21.5 '@esbuild/linux-arm64': 0.21.5 '@esbuild/linux-ia32': 0.21.5 '@esbuild/linux-loong64': 0.21.5 '@esbuild/linux-mips64el': 0.21.5 '@esbuild/linux-ppc64': 0.21.5 '@esbuild/linux-riscv64': 0.21.5 '@esbuild/linux-s390x': 0.21.5 '@esbuild/linux-x64': 0.21.5 '@esbuild/netbsd-x64': 0.21.5 '@esbuild/openbsd-x64': 0.21.5 '@esbuild/sunos-x64': 0.21.5 '@esbuild/win32-arm64': 0.21.5 '@esbuild/win32-ia32': 0.21.5 '@esbuild/win32-x64': 0.21.5 escalade@3.1.2: {} escape-string-regexp@1.0.5: {} fast-glob@3.3.2: dependencies: '@nodelib/fs.stat': 2.0.5 '@nodelib/fs.walk': 1.2.8 glob-parent: 5.1.2 merge2: 1.4.1 micromatch: 4.0.7 fastq@1.17.1: dependencies: reusify: 1.0.4 fill-range@7.1.1: dependencies: to-regex-range: 5.0.1 foreground-child@3.3.0: dependencies: cross-spawn: 7.0.3 signal-exit: 4.1.0 fraction.js@4.3.7: {} fsevents@2.3.3: optional: true function-bind@1.1.2: {} gensync@1.0.0-beta.2: {} glob-parent@5.1.2: dependencies: is-glob: 4.0.3 glob-parent@6.0.2: dependencies: is-glob: 4.0.3 glob@10.4.5: dependencies: foreground-child: 3.3.0 jackspeak: 3.4.3 minimatch: 9.0.5 minipass: 7.1.2 package-json-from-dist: 1.0.0 path-scurry: 1.11.1 globals@11.12.0: {} has-flag@3.0.0: {} hasown@2.0.2: dependencies: function-bind: 1.1.2 html-entities@2.3.3: {} is-binary-path@2.1.0: dependencies: binary-extensions: 2.3.0 is-core-module@2.15.0: dependencies: hasown: 2.0.2 is-extglob@2.1.1: {} is-fullwidth-code-point@3.0.0: {} is-glob@4.0.3: dependencies: is-extglob: 2.1.1 is-number@7.0.0: {} is-what@4.1.16: {} isexe@2.0.0: {} jackspeak@3.4.3: dependencies: '@isaacs/cliui': 8.0.2 optionaldependencies: '@pkgjs/parseargs': 0.11.0 jiti@1.21.6: {} js-tokens@4.0.0: {} js-yaml@4.1.0: dependencies: argparse: 2.0.1 jsesc@2.5.2: {} json5@2.2.3: {} lilconfig@2.1.0: {} lilconfig@3.1.2: {} lines-and-columns@1.2.4: {} lru-cache@10.4.3: {} lru-cache@5.1.1: dependencies: yallist: 3.1.1 merge-anything@5.1.7: dependencies: is-what: 4.1.16 merge2@1.4.1: {} micromatch@4.0.7: dependencies: braces: 3.0.3 picomatch: 2.3.1 minimatch@9.0.5: dependencies: brace-expansion: 2.0.1 minipass@7.1.2: {} ms@2.1.2: {} mz@2.7.0: dependencies: any-promise: 1.3.0 object-assign: 4.1.1 thenify-all: 1.6.0 nanoid@3.3.7: {} node-releases@2.0.18: {} normalize-path@3.0.0: {} normalize-range@0.1.2: {} object-assign@4.1.1: {} object-hash@3.0.0: {} package-json-from-dist@1.0.0: {} path-key@3.1.1: {} path-parse@1.0.7: {} path-scurry@1.11.1: dependencies: lru-cache: 10.4.3 minipass: 7.1.2 picocolors@1.0.1: {} picomatch@2.3.1: {} pify@2.3.0: {} pirates@4.0.6: {} postcss-import@15.1.0(postcss@8.4.41): dependencies: postcss: 8.4.41 postcss-value-parser: 4.2.0 read-cache: 1.0.0 resolve: 1.22.8 postcss-js@4.0.1(postcss@8.4.41): dependencies: camelcase-css: 2.0.1 postcss: 8.4.41 postcss-load-config@4.0.2(postcss@8.4.41): dependencies: lilconfig: 3.1.2 postcss: 8.4.41 yaml: 2.5.0 postcss-nested@6.2.0(postcss@8.4.41): dependencies: postcss: 8.4.41 postcss-selector-parser: 6.1.2 postcss-selector-parser@6.1.2: dependencies: cssesc: 3.0.0 util-deprecate: 1.0.2 postcss-value-parser@4.2.0: {} postcss@8.4.41: dependencies: nanoid: 3.3.7 picocolors: 1.0.1 source-map-js: 1.2.0 queue-microtask@1.2.3: {} read-cache@1.0.0: dependencies: pify: 2.3.0 readdirp@3.6.0: dependencies: picomatch: 2.3.1 resolve@1.22.8: dependencies: is-core-module: 2.15.0 path-parse: 1.0.7 supports-preserve-symlinks-flag: 1.0.0 reusify@1.0.4: {} rollup@4.21.0: dependencies: '@types/estree': 1.0.5 optionaldependencies: '@rollup/rollup-android-arm-eabi': 4.21.0 '@rollup/rollup-android-arm64': 4.21.0 '@rollup/rollup-darwin-arm64': 4.21.0 '@rollup/rollup-darwin-x64': 4.21.0 '@rollup/rollup-linux-arm-gnueabihf': 4.21.0 '@rollup/rollup-linux-arm-musleabihf': 4.21.0 '@rollup/rollup-linux-arm64-gnu': 4.21.0 '@rollup/rollup-linux-arm64-musl': 4.21.0 '@rollup/rollup-linux-powerpc64le-gnu': 4.21.0 '@rollup/rollup-linux-riscv64-gnu': 4.21.0 '@rollup/rollup-linux-s390x-gnu': 4.21.0 '@rollup/rollup-linux-x64-gnu': 4.21.0 '@rollup/rollup-linux-x64-musl': 4.21.0 '@rollup/rollup-win32-arm64-msvc': 4.21.0 '@rollup/rollup-win32-ia32-msvc': 4.21.0 '@rollup/rollup-win32-x64-msvc': 4.21.0 fsevents: 2.3.3 run-parallel@1.2.0: dependencies: queue-microtask: 1.2.3 semver@6.3.1: {} seroval-plugins@1.1.1(seroval@1.1.1): dependencies: seroval: 1.1.1 seroval@1.1.1: {} shebang-command@2.0.0: dependencies: shebang-regex: 3.0.0 shebang-regex@3.0.0: {} signal-exit@4.1.0: {} solid-js@1.8.21: dependencies: csstype: 3.1.3 seroval: 1.1.1 seroval-plugins: 1.1.1(seroval@1.1.1) solid-refresh@0.6.3(solid-js@1.8.21): dependencies: '@babel/generator': 7.25.0 '@babel/helper-module-imports': 7.24.7 '@babel/types': 7.25.2 solid-js: 1.8.21 transitivepeerdependencies: - supports-color source-map-js@1.2.0: {} string-width@4.2.3: dependencies: emoji-regex: 8.0.0 is-fullwidth-code-point: 3.0.0 strip-ansi: 6.0.1 string-width@5.1.2: dependencies: eastasianwidth: 0.2.0 emoji-regex: 9.2.2 strip-ansi: 7.1.0 strip-ansi@6.0.1: dependencies: ansi-regex: 5.0.1 strip-ansi@7.1.0: dependencies: ansi-regex: 6.0.1 sucrase@3.35.0: dependencies: '@jridgewell/gen-mapping': 0.3.5 commander: 4.1.1 glob: 10.4.5 lines-and-columns: 1.2.4 mz: 2.7.0 pirates: 4.0.6 ts-interface-checker: 0.1.13 supports-color@5.5.0: dependencies: has-flag: 3.0.0 supports-preserve-symlinks-flag@1.0.0: {} tailwind-merge@2.5.2: {} tailwindcss-animate@1.0.7(tailwindcss@3.4.10): dependencies: tailwindcss: 3.4.10 tailwindcss@3.4.10: dependencies: '@alloc/quick-lru': 5.2.0 arg: 5.0.2 chokidar: 3.6.0 didyoumean: 1.2.2 dlv: 1.1.3 fast-glob: 3.3.2 glob-parent: 6.0.2 is-glob: 4.0.3 jiti: 1.21.6 lilconfig: 2.1.0 micromatch: 4.0.7 normalize-path: 3.0.0 object-hash: 3.0.0 picocolors: 1.0.1 postcss: 8.4.41 postcss-import: 15.1.0(postcss@8.4.41) postcss-js: 4.0.1(postcss@8.4.41) postcss-load-config: 4.0.2(postcss@8.4.41) postcss-nested: 6.2.0(postcss@8.4.41) postcss-selector-parser: 6.1.2 resolve: 1.22.8 sucrase: 3.35.0 transitivepeerdependencies: - ts-node thenify-all@1.6.0: dependencies: thenify: 3.3.1 thenify@3.3.1: dependencies: any-promise: 1.3.0 tippy.js@6.3.7: dependencies: '@popperjs/core': 2.11.8 to-fast-properties@2.0.0: {} to-regex-range@5.0.1: dependencies: is-number: 7.0.0 ts-interface-checker@0.1.13: {} typescript@5.5.4: {} undici-types@6.19.8: {} update-browserslist-db@1.1.0(browserslist@4.23.3): dependencies: browserslist: 4.23.3 escalade: 3.1.2 picocolors: 1.0.1 util-deprecate@1.0.2: {} validate-html-nesting@1.2.2: {} vite-plugin-solid@2.10.2(solid-js@1.8.21)(vite@5.4.2): dependencies: '@babel/core': 7.25.2 '@types/babel__core': 7.20.5 babel-preset-solid: 1.8.19(@babel/core@7.25.2) merge-anything: 5.1.7 solid-js: 1.8.21 solid-refresh: 0.6.3(solid-js@1.8.21) vite: 5.4.2(@types/node@20.16.1) vitefu: 0.2.5(vite@5.4.2) transitivepeerdependencies: - supports-color vite@5.4.2(@types/node@20.16.1): dependencies: '@types/node': 20.16.1 esbuild: 0.21.5 postcss: 8.4.41 rollup: 4.21.0 optionaldependencies: fsevents: 2.3.3 vitefu@0.2.5(vite@5.4.2): dependencies: vite: 5.4.2(@types/node@20.16.1) which@2.0.2: dependencies: isexe: 2.0.0 wrap-ansi@7.0.0: dependencies: ansi-styles: 4.3.0 string-width: 4.2.3 strip-ansi: 6.0.1 wrap-ansi@8.1.0: dependencies: ansi-styles: 6.2.1 string-width: 5.1.2 strip-ansi: 7.1.0 yallist@3.1.1: {} yaml@2.5.0: {}</file><file name="loader/index.html">&lt;!doctype html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="utf-8" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt; &lt;meta name="theme-color" content="#000000" /&gt; &lt;link rel="icon" type="image/png" href="/src/assets/icon.png" /&gt; &lt;title&gt;pengu loader&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="root"&gt;&lt;/div&gt; &lt;script src="/src/index.tsx" type="module"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt;</file><file name="loader/src/index.tsx">/* @refresh reload */ import { render } 'solid-js/web' import app './app' // @ts-ignore window.appversion = __version__ // @ts-ignore window.ismac = __platform__ === 'darwin' render(() =&gt; &lt;app /&gt;, document.getelementbyid('root') htmlelement)</file><file name="loader/src/App.css">@tailwind base; @tailwind components; @tailwind utilities; @layer base { :root { --background: 20 14.3% 4.1%; --foreground: 0 0% 95%; --card: 33 36 41; --card-foreground: 0 0% 95%; --popover: 0 0% 9%; --popover-foreground: 0 0% 95%; --primary: 34 197 94; --primary-foreground: 144.9 80.4% 10%; --secondary: 240 3.7% 15.9%; --secondary-foreground: 0 0% 98%; --muted: 0 0% 15%; --muted-foreground: 240 5% 64.9%; --accent: 12 6.5% 15.1%; --accent-foreground: 0 0% 98%; --destructive: 0 62.8% 30.6%; --destructive-foreground: 0 85.7% 97.3%; --border: 240 3.7% 15.9%; --input: 240 3.7% 15.9%; --ring: 142.4 71.8% 29.2%; --chart-1: 220 70% 50%; --chart-2: 160 60% 45%; --chart-3: 30 80% 55%; --chart-4: 280 65% 60%; --chart-5: 340 75% 55%; --radius: 0.5rem; } } @layer base { * { @apply border-border; } body { @apply bg-background text-foreground select-none; font-feature-settings: "rlig" 1, ss"calt" 1; } } :root { font-synthesis: none; text-rendering: optimizelegibility; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; -webkit-text-size-adjust: 100%; } body { background-color: #212429; position: relative; } body::before { content: ''; position: absolute; /* background-color: #0002; */ background-image: url(./assets/bg-mask.svg); background-size: cover; width: 100vw; height: 100vh; top: 0; z-index: -1; } body::after { content: ''; position: absolute; width: 100vw; height: 100vh; top: 0; z-index: -1; border: solid 1px #484a4e20; } .pengu-activ { z-index: 2; transition: ease-in-out .3s; pointer-events: none; } .pengu-status { z-index: 1; transition: ease-in-out .2s; } .active .pengu-activ { transform: translatex(5rem) rotate(360deg); } .active .pengu-status { transform: translatex(-2.2rem); } ::-webkit-scrollbar { width: 6px; } ::-webkit-scrollbar-track { background: transparent; border-radius: 4px; } ::-webkit-scrollbar-thumb { @apply bg-gray-500 rounded-md; }</file><file name="loader/src/vite-env.d.ts">/// &lt;reference types="vite/client" /&gt; declare interface window { ismac: boolean appversion: string }</file><file name="loader/src/App.tsx">import { createsignal, onmount, show } 'solid-js' import { config } './lib/config' import { welcomepage } './pages/welcomepage' import { appbar } './components/appbar' import { mainpage } './pages/mainpage' import './app.css' import 'tippy.js/dist/tippy.css' function app() { const [ready, setready] = createsignal(false) const [welcome, setwelcome] = createsignal(true) onmount(async () =&gt; { setwelcome(!await config.load()) setready(true) }) return ( &lt;div class="h-screen flex flex-col"&gt; &lt;div class="blur-[140px] h-[10rem] max-w-[40rem] absolute top-[10rem] z-10 pointer-events-none w-[-webkit-fill-available]"&gt; &lt;div class="w-full h-full bg-[linear-gradient(97.62deg,rgba(0,71,225,0.22),rgba(26,214,255,0.32),rgba(0,220,130,0.42))]"&gt; &lt;/div&gt; &lt;/div&gt; &lt;show when={ready()}&gt; &lt;appbar ishome={!welcome()} /&gt; &lt;show when={!welcome()} fallback={&lt;welcomepage ondone={() =&gt; setwelcome(false)} /&gt;} &gt; &lt;mainpage /&gt; &lt;/show&gt; &lt;/show&gt; &lt;/div&gt; ) } export default app</file><file name="loader/src/pages/WelcomePage.tsx">import { component, createsignal } 'solid-js' import { button, combobox, checkbox } '../components/ui' import { usei18n } '../lib/i18n' import { useconfig } '../lib/config' export const welcomepage: component&lt;{ ondone: () =&gt; void }&gt; = (props) =&gt; { const i18n = usei18n() const config = useconfig() const [accepted, setaccepted] = createsignal(false) const selectlang = async (id: string) =&gt; { i18n.switchto(id) await config.app.language(id) } return ( &lt;div class="flex flex-col justify-center items-center my-auto"&gt; &lt;div class="mb-8"&gt; &lt;h2 class="text-4xl font-semibold text-center"&gt;{i18n.t('welcome')}&lt;/h2&gt; &lt;/div&gt; &lt;div class="flex flex-col gap-8 max-w-60"&gt; &lt;div class="gap-2"&gt; &lt;p class="text-sm my-2 pl-2"&gt;{i18n.t('choose_lang')}&lt;/p&gt; &lt;combobox items={i18n.languages} selected={config.app.language()} onselect={selectlang} /&gt; &lt;/div&gt; &lt;label class="flex space-x-2"&gt; &lt;checkbox checked={accepted()} onclick={() =&gt; setaccepted(v =&gt; !v)} /&gt; &lt;div class="grid gap-1.5 leading-none"&gt; &lt;h2 class="text-sm font-medium leading-none"&gt;{i18n.t('accept_tos')}&lt;/h2&gt; &lt;p class="text-sm text-muted-foreground"&gt;{i18n.t('tos_content')}&lt;/p&gt; &lt;/div&gt; &lt;/label&gt; &lt;div class="mt-4"&gt; &lt;button class="w-full" onclick={props.ondone} disabled={!accepted()}&gt; {i18n.t('get_started')} &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ) }</file><file name="loader/src/pages/SplashPage.tsx">import { component } 'solid-js' import { loadericon } '~/components/icons' export const splashpage: component = () =&gt; { return ( &lt;div class="flex justify-center items-center h-screen"&gt; &lt;div class="flex flex-col items-center gap-4"&gt; &lt;img class="size-32 rounded-full pointer-events-none" src="/pengu-xl.jpg" /&gt; {/* &lt;h2 class="text-3xl font-semibold text-white"&gt;pengu loader&lt;/h2&gt; */} &lt;p class="text-lg text-slate-200 flex items-center"&gt; build unmatched &lt;img class="mx-1 size-6 inline-block" src="/lol-logo.png" /&gt; client &lt;/p&gt; &lt;span class="animate-spin"&gt; &lt;loadericon thickness={1} /&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; ) }</file><file name="loader/src/pages/MainPage.tsx">import { component, match, show, switch } 'solid-js' import { activator } '../components/activator' import { settings } '../components/settings' import { plugingallery } '../components/plugingallery' import { pluginstore } '../components/pluginstore' import { useroot } '~/lib/root' export const mainpage: component = () =&gt; { const { isstore } = useroot() return ( &lt;div class="flex flex-col flex-1 overflow-hidden"&gt; &lt;div class="flex-1 overflow-y-auto container"&gt; &lt;switch&gt; &lt;match when={isstore()} children={pluginstore} /&gt; &lt;match when={!isstore()} children={plugingallery} /&gt; &lt;/switch&gt; &lt;/div&gt; &lt;show when={!isstore()} children={activator} /&gt; &lt;settings /&gt; &lt;/div&gt; ) }</file><file name="loader/src/components/Icons.tsx">import { component, jsxelement, children } 'solid-js' interface iconprops { size?: number class?: string thickness?: number } const svg: component&lt;iconprops &amp; { children: jsxelement }&gt; = (props) =&gt; { const c = children(() =&gt; props.children) const size = props.size ?? 24 const thickness = props.thickness ?? 2 return ( &lt;svg class={props.class} xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewbox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width={thickness} stroke-linecap="round" stroke-linejoin="round" &gt; {c()} &lt;/svg&gt; ) } export const homeicon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m5 12l-2 0l9 -9l9 9l-2 0" /&gt; &lt;path d="m5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7" /&gt; &lt;path d="m10 12h4v4h-4z" /&gt; &lt;/svg&gt; ) export const pluginicon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m9.785 6l8.215 8.215l-2.054 2.054a5.81 5.81 0 1 1 -8.215 -8.215l2.054 -2.054z" /&gt; &lt;path d="m4 20l3.5 -3.5" /&gt; &lt;path d="m15 4l-3.5 3.5" /&gt; &lt;path d="m20 9l-3.5 3.5" /&gt; &lt;/svg&gt; ) export const storeicon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m4 4m0 4a4 4 0 0 1 4 -4h8a4 4 0 0 1 4 4v8a4 4 0 0 1 -4 4h-8a4 4 0 0 1 -4 -4z" /&gt; &lt;path d="m9 8a3 3 0 0 0 6 0" /&gt; &lt;/svg&gt; ) export const settingsicon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m19.875 6.27a2.225 2.225 0 0 1 1.125 1.948v7.284c0 .809 -.443 1.555 -1.158 1.948l-6.75 4.27a2.269 2.269 0 0 1 -2.184 0l-6.75 -4.27a2.225 2.225 0 0 1 -1.158 -1.948v-7.285c0 -.809 .443 -1.554 1.158 -1.947l6.75 -3.98a2.33 2.33 0 0 1 2.25 0l6.75 3.98h-.033z" /&gt; &lt;path d="m12 12m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0" /&gt; &lt;/svg&gt; ) export const reloadicon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m19.933 13.041a8 8 0 1 1 -9.925 -8.788c3.899 -1 7.935 1.007 9.425 4.747" /&gt; &lt;path d="m20 4v5h-5" /&gt; &lt;/svg&gt; ) export const whirlicon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m14 12a2 2 0 1 0 -4 0a2 2 0 0 0 4 0z" /&gt; &lt;path d="m12 21c-3.314 0 -6 -2.462 -6 -5.5s2.686 -5.5 6 -5.5" /&gt; &lt;path d="m21 12c0 3.314 -2.462 6 -5.5 6s-5.5 -2.686 -5.5 -6" /&gt; &lt;path d="m12 14c3.314 0 6 -2.462 6 -5.5s-2.686 -5.5 -6 -5.5" /&gt; &lt;path d="m14 12c0 -3.314 -2.462 -6 -5.5 -6s-5.5 2.686 -5.5 6" /&gt; &lt;/svg&gt; ) export const powericon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m7 6a7.75 7.75 0 1 0 10 0" /&gt; &lt;path d="m12 4l0 8" /&gt; &lt;/svg&gt; ) export const rechargingicon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m10 20.777a8.942 8.942 0 0 1 -2.48 -.969" /&gt; &lt;path d="m14 3.223a9.003 9.003 0 0 1 0 17.554" /&gt; &lt;path d="m4.579 17.093a8.961 8.961 0 0 1 -1.227 -2.592" /&gt; &lt;path d="m3.124 10.5c.16 -.95 .468 -1.85 .9 -2.675l.169 -.305" /&gt; &lt;path d="m6.907 4.579a8.954 8.954 0 0 1 3.093 -1.356" /&gt; &lt;path d="m12 9l-2 3h4l-2 3" /&gt; &lt;/svg&gt; ) export const bolticon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m13 3l0 7l6 0l-8 11l0 -7l-6 0l8 -11" /&gt; &lt;/svg&gt; ) export const loadericon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m12 6l0 -3" /&gt; &lt;path d="m16.25 7.75l2.15 -2.15" /&gt; &lt;path d="m18 12l3 0" /&gt; &lt;path d="m16.25 16.25l2.15 2.15" /&gt; &lt;path d="m12 18l0 3" /&gt; &lt;path d="m7.75 16.25l-2.15 2.15" /&gt; &lt;path d="m6 12l-3 0" /&gt; &lt;path d="m7.75 7.75l-2.15 -2.15" /&gt; &lt;/svg&gt; ) export const linkicon: component&lt;iconprops&gt; = (props) =&gt; ( &lt;svg {...props}&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none" /&gt; &lt;path d="m9 15l6 -6" /&gt; &lt;path d="m11 6l.463 -.536a5 5 0 0 1 7.071 7.072l-.534 .464" /&gt; &lt;path d="m13 18l-.397 .534a5.068 5.068 0 0 1 -7.127 0a4.972 4.972 0 0 1 0 -7.071l.524 -.463" /&gt; &lt;/svg&gt; ) export const discordicon: component&lt;iconprops&gt; = (props) =&gt; { return ( &lt;svg {...props}&gt; &lt;path fill="currentcolor" stroke="none" d="m20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277c.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zm8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9555-2.4189 2.157-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.9555 2.4189-2.1569 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9554-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.946 2.4189-2.1568 2.4189z" /&gt; &lt;/svg&gt; ) } export const githubicon: component&lt;iconprops&gt; = (props) =&gt; { return ( &lt;svg {...props}&gt; &lt;path fill="currentcolor" stroke="none" d="m12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61c4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57c20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" /&gt; &lt;/svg&gt; ) }</file><file name="loader/src/components/Activator.tsx">import { component, createsignal, onmount } 'solid-js' import { dynamic } 'solid-js/web' import { coremodule } '../lib/core-module' import { dialog, event } '@tauri-apps/api' import { bolticon, powericon } './icons' export const activator: component = () =&gt; { const [loading, setloading] = createsignal(true) const [active, setactive] = createsignal(false) const activate = async () =&gt; { (!loading()) { setloading(true) try { (!await coremodule.checkleaguedir()) { await dialog.message('please select valid lol client folder settings.', { type: 'warning' }) return } (!await coremodule.exists()) { await dialog.message('failed perform activation, core module found.', { type: 'warning' }) return } const nextactive = !active() const { activated, error } = await coremodule.doactivate(nextactive) (error) { await dialog.message(`failed perform activation, got error:\n${error}`, { type: 'warning' }) } else (activated === nextactive) { setactive(activated) } } finally { setloading(false) } } } onmount(async () =&gt; { setactive(await coremodule.isactivated()) setloading(false) (window.ismac) { event.listen('active-status', (e) =&gt; { setactive(boolean(e.payload)) }) } }) return ( &lt;div class="fixed bottom-6 right-0 z-10 translate-x-28 hover:translate-x-0 transition-transform" &gt; &lt;div class="flex items-center justify-between pl-3 shadow-lg w-44 h-14 rounded-l-full border border-neutral-700/30 border-r-0 cursor-pointer aria-disabled::cursor-not-allowed group bg-card aria-checked:bg-primary hover:shadow-xl transition-colors ease-out duration-300" aria-disabled={loading()} aria-checked={active()} onclick={activate} &gt; &lt;div class="flex items-center justify-center size-8 text-primary rounded-full group-hover:bg-primary aria-checked:bg-muted group-hover:text-accent group-hover:aria-checked:bg-muted group-hover:aria-checked:text-primary" aria-checked={active()}&gt; &lt;span class="group-hover:animate-pulse"&gt; &lt;dynamic component={active() ? bolticon : powericon} thickness={2.5} /&gt; &lt;/span&gt; &lt;/div&gt; &lt;div class="flex-1 px-6 text-lg text-center font-semibold text-primary aria-checked:text-muted" aria-checked={active()} &gt;{active() ? 'ready' : 'activate'}&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ) }</file><file name="loader/src/components/Appbar.tsx">import { component, createsignal, jsx, onmount, show, splitprops } 'solid-js' import { appwindow } '@tauri-apps/api/window' import { twmerge } 'tailwind-merge' import { settingsicon, storeicon } './icons' import { useroot } '../lib/root' import { usetippy } '../lib/utils' import icon '../assets/icon-sm.png' const command: component&lt;jsx.htmlattributes&lt;htmlspanelement&gt;&gt; = (props) =&gt; { const [local, rest] = splitprops(props, ['class']) return ( &lt;span class={twmerge("flex justify-center items-center w-12 h-full hover:bg-foreground/15", local.class)} {...rest} /&gt; ) } export const appbar: component&lt;{ ishome: boolean }&gt; = (props) =&gt; { const { settings, setstore } = useroot() const [focus, setfocus] = createsignal(true) const minimize = () =&gt; appwindow.minimize() const close = () =&gt; { (window.ismac) { appwindow.hide() } else { appwindow.close() } } onmount(async () =&gt; { setfocus(await appwindow.isfocused()) appwindow.onfocuschanged(e =&gt; setfocus(e.payload)) }) return ( &lt;div data-tauri-drag-region class="flex items-center justify-between h-10 aria-busy:bg-neutral-700 aria-busy:opacity-85" aria-busy={!focus()} &gt; &lt;div class="flex items-center px-[10px] h-full pointer-events-none"&gt; &lt;img src={icon} class="size-5 rounded-sm" /&gt; &lt;span class="px-2 text-sm"&gt;pengu loader&lt;/span&gt; &lt;span class="text-sm text-foreground/50"&gt;v{window.appversion}&lt;/span&gt; &lt;/div&gt; &lt;div class="flex justify-center h-full text-foreground/80"&gt; &lt;show when={props.ishome}&gt; &lt;command onclick={() =&gt; setstore(true)} ref={usetippy('plugin store')}&gt; &lt;storeicon size={16} /&gt; &lt;/command&gt; &lt;command onclick={settings.show} ref={usetippy('settings')}&gt; &lt;settingsicon size={16} /&gt; &lt;/command&gt; &lt;/show&gt; &lt;command onclick={minimize}&gt; &lt;svg width="10" height="10" viewbox="0 0 10.2 1" fill="currentcolor"&gt; &lt;rect x="0" y="50%" width="10.2" height="1" /&gt; &lt;/svg&gt; &lt;/command&gt; &lt;command onclick={close} class="hover:text-white hover:bg-red-600"&gt; &lt;svg width="10" height="10" viewbox="0 0 10 10" fill="currentcolor"&gt; &lt;polygon points="10.2,0.7 9.5,0 5.1,4.4 0.7,0 0,0.7 4.4,5.1 0,9.5 0.7,10.2 5.1,5.8 9.5,10.2 10.2,9.5 5.8,5.1" /&gt; &lt;/svg&gt; &lt;/command&gt; &lt;/div&gt; &lt;/div&gt; ) }</file><file name="loader/src/components/PluginStore.tsx">import { component, createsignal, onmount } 'solid-js' import { useroot } '~/lib/root' import { storemanager } '~/lib/store' export const pluginstore: component = () =&gt; { const { setstore } = useroot() // const [loading, setloading] = createsignal(true) // onmount(async () =&gt; { // const plugins = await storemanager.fetchplugins() // }) return ( &lt;div class="h-full flex flex-col p-4"&gt; &lt;div class="flex-1 flex flex-col items-center"&gt; &lt;div class="m-auto text-center space-y-4"&gt; &lt;p class="text-lg m-auto"&gt;plugin store coming soon!&lt;/p&gt; &lt;button class="inline-flex gap-1 items-center text-sm border border-foreground/10 rounded-sm px-3 py-1 hover:bg-foreground hover:text-background" tabindex={-1} onclick={() =&gt; setstore(false)} &gt;go back&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ) }</file><file name="loader/src/components/PluginGallery.tsx">import { component, for, createsignal, onmount, switch, match, show, createeffect } 'solid-js' import { type plugininfo, pluginmanager } '../lib/plugins' import { loadericon, reloadicon, storeicon } './icons' import { checkbox } './ui' import { useconfig } '~/lib/config' import { useroot } '~/lib/root' const plugincard: component&lt;plugininfo&gt; = (props) =&gt; { const [enabled, setenabled] = createsignal(pluginmanager.isenabled(props.hash)) const toggle = () =&gt; { pluginmanager.togglestate(props.hash).then(setenabled) } return ( &lt;label draggable="false" class="flex flex-col gap-2 overflow-hidden shadow-md rounded-md border-solid bg-card border-[1px] border-neutral-600 hover:border-neutral-400"&gt; {/* &lt;div class="aspect-video relative overflow-hidden cursor-pointer aria-[disabled=true]:grayscale" aria-disabled={!enabled()}&gt; &lt;a href="/overlays/lol?select=arenaaugments"&gt; &lt;img src="..." alt="" /&gt; &lt;/a&gt; &lt;/div&gt; */} &lt;div class="flex flex-col p-3 gap-2 items-stretch"&gt; &lt;div class="flex items-center space-x-2"&gt; &lt;checkbox checked={enabled()} onclick={toggle} /&gt; &lt;h3 class="font-semibold leading-7 text-base text-ellipsis whitespace-nowrap overflow-hidden"&gt;{props.name}&lt;/h3&gt; &lt;/div&gt; {/* &lt;ul class="flex items-center gap-1 flex-1"&gt; &lt;li class="rounded-sm px-1 bg-slate-300 leading-3"&gt; &lt;span class="text-xs leading-5 font-semibold"&gt;utility&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; */} &lt;div class="text-sm leading-5 text-muted-foreground break-words"&gt;@plugins/{props.path}&lt;/div&gt; &lt;/div&gt; &lt;/label&gt; ) } export const plugingallery: component = () =&gt; { const config = useconfig() const { setstore } = useroot() const [loading, setloading] = createsignal(false) const [plugins, setplugins] = createsignal(array&lt;plugininfo&gt;(), { equals: false }) const revealplugins = () =&gt; { pluginmanager.openfolder() } const reload = () =&gt; { setplugins([]) setloading(true) promise.all([ pluginmanager.getplugins() .then(setplugins) .catch(() =&gt; { }), new promise((r) =&gt; settimeout(r, 500)) ]) .finally(() =&gt; setloading(false)) } onmount(reload) createeffect(() =&gt; { // watch dir changes config.app.plugins_dir() reload() }) return ( &lt;div class="h-full"&gt; &lt;switch&gt; &lt;match when={loading()}&gt; &lt;div class="text-accent-foreground m-auto flex flex-col items-center justify-center gap-2 h-full"&gt; &lt;loadericon class="animate-spin" /&gt; &lt;p&gt;loading...&lt;/p&gt; &lt;/div&gt; &lt;/match&gt; &lt;match when={!loading()}&gt; &lt;div class="grid p-4"&gt; &lt;h1 class="text-foreground/80 text-sm"&gt;installed plugins ({plugins().length})&lt;/h1&gt; &lt;show when={plugins().length &gt; 0} fallback={&lt;h3 class="text-center my-8 w-full"&gt;you plugins!&lt;/h3&gt;} &gt; &lt;div class="grid grid-cols-3 gap-x-4 my-4 gap-y-6"&gt; &lt;for each={plugins()}&gt; {plugin =&gt; &lt;plugincard {...plugin} /&gt;} &lt;/for&gt; &lt;/div&gt; &lt;/show&gt; &lt;div class="flex justify-evenly items-center w-full py-8"&gt; &lt;div class="flex flex-col items-center space-y-4"&gt; &lt;p class="text-sm text-secondary-foreground/70"&gt;don't see plugins?&lt;/p&gt; &lt;div class="flex gap-1"&gt; &lt;button class="inline-flex gap-1 items-center text-sm border border-foreground/10 rounded-sm px-3 py-1 hover:bg-foreground hover:text-background" tabindex={-1} onclick={reload} &gt; &lt;reloadicon size={14} /&gt; reload &lt;/button&gt; &lt;button class="inline-flex gap-1 items-center text-sm border border-foreground/10 rounded-sm px-3 py-1 hover:bg-foreground hover:text-background" tabindex={-1} onclick={revealplugins} &gt; open folder &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="flex flex-col items-center space-y-4"&gt; &lt;p class="text-sm text-secondary-foreground/70"&gt;more plugins?&lt;/p&gt; &lt;button class="inline-flex gap-1 items-center text-sm border border-foreground/10 rounded-sm px-3 py-1 hover:bg-foreground hover:text-background" tabindex={-1} onclick={() =&gt; setstore(true)} &gt; &lt;storeicon size={14} /&gt; get store &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/match&gt; &lt;/switch&gt; &lt;/div&gt; ) }</file><file name="loader/src/components/ui/Checkbox.tsx">import type { component } 'solid-js' export type checkboxprops = { checked?: boolean disabled?: boolean onchange?: (checked: boolean) =&gt; void onclick?: () =&gt; void } export const checkbox: component&lt;checkboxprops&gt; = (props) =&gt; { const click = () =&gt; { (!props.disabled) { props.onclick?.() props.onchange?.(!(props.checked === true)) } } return ( &lt;button class="size-4 shrink-0 border-2 border-primary/40 flex items-center justify-center rounded-sm cursor-default hover:border-primary aria-checked:bg-primary aria-checked:border-primary disabled:bg-muted disabled:opacity-50 disabled:hover:border-primary/40" disabled={props.disabled} aria-checked={props.checked} onclick={click} &gt; &lt;span class="text-accent invisible aria-checked:visible" aria-checked={props.checked} &gt; &lt;svg width="10" height="8" fill="currentcolor" xmlns="http://www.w3.org/2000/svg"&gt; &lt;path fill-rule="evenodd" clip-rule="evenodd" d="m9.143 1.433a.5.5 0 0 1 .007.707l4.04 7.346a.5.5 0 0 1-.74-.029l.82 4.355a.5.5 0 0 1 .063-.704l.639-.534a.5.5 0 0 1 .704.062l1.536 1.835l7.842.857a.5.5 0 0 1 8.549.85l.594.583z" /&gt; &lt;/svg&gt; &lt;/span&gt; &lt;/button&gt; ) }</file><file name="loader/src/components/ui/RadioButton.tsx">import { component } 'solid-js' export type radiobuttonprops = { checked?: boolean disabled?: boolean onclick?: () =&gt; void } export const radiobutton: component&lt;radiobuttonprops&gt; = (props) =&gt; { const click = () =&gt; { (!props.disabled) { props.onclick?.() } } return ( &lt;button role="radio" type="button" class="shrink-0 size-4 flex cursor-default rounded-full border-2 border-primary/40 hover:border-primary aria-checked:border-primary aria-checked:bg-primary" onclick={click} aria-checked={props.checked} aria-disabled={props.disabled} &gt; &lt;span class="block mx-auto my-auto rounded-md size-3 border-2 border-black invisible aria-checked:visible" aria-checked={props.checked} &gt; &lt;/span&gt; &lt;/button&gt; ) }</file><file name="loader/src/components/ui/index.ts">export { button } './button' export { checkbox } './checkbox' export { combobox } './combobox' export { radiobutton } './radiobutton'</file><file name="loader/src/components/ui/Button.tsx">import { component, jsx, splitprops } 'solid-js' import { twmerge } 'tailwind-merge' import { cva } 'class-variance-authority' const buttonvariants = cva( [ 'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors', 'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2', 'disabled:pointer-events-none disabled:opacity-50', ], { variants: { variant: { default: 'bg-primary text-primary-foreground hover:bg-primary/90', outline: 'border border-foreground/20 hover:bg-foreground hover:text-secondary', secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80', link: 'text-primary underline-offset-4 hover:underline', }, size: { default: 'h-10 px-4 py-2', sm: 'h-9 rounded-md px-3', lg: 'h-11 rounded-md px-8' } }, defaultvariants: { variant: 'default', size: 'default', } } ) interface props extends jsx.htmlattributes&lt;htmlbuttonelement&gt; { disabled?: boolean variant?: 'default' | 'outline' | 'link' size?: 'default' | 'sm' | 'lg' } export const button: component&lt;props&gt; = (props) =&gt; { const [local, rest] = splitprops(props, ['class', 'variant', 'size']) return ( &lt;button class={twmerge(buttonvariants({ variant: local.variant, size: local.size }), local.class)} {...rest} /&gt; ) }</file><file name="loader/src/components/ui/ComboBox.tsx">import { component, for, show, creatememo, createsignal } 'solid-js' const comboboxitem: component&lt;{ text: string selected: boolean onclick: () =&gt; void }&gt; = (props) =&gt; { return ( &lt;div onclick={props.onclick} class="relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent" role="option" &gt; {props.text} &lt;show when={props.selected}&gt; &lt;svg width="15" height="15" viewbox="0 0 15 15" fill="none" class="ml-auto h-4 w-4"&gt; &lt;path d="m11.4669 3.72684c11.7558 3.91574 11.8369 4.30308 11.648 4.59198l7.39799 11.092c7.29783 11.2452 7.13556 11.3467 6.95402 11.3699c6.77247 11.3931 6.58989 11.3355 6.45446 11.2124l3.70446 8.71241c3.44905 8.48022 3.43023 8.08494 3.66242 7.82953c3.89461 7.57412 4.28989 7.55529 4.5453 7.78749l6.75292 9.79441l10.6018 3.90792c10.7907 3.61902 11.178 3.53795 11.4669 3.72684z" fill="currentcolor" fill-rule="evenodd" clip-rule="evenodd"&gt;&lt;/path&gt; &lt;/svg&gt; &lt;/show&gt; &lt;/div&gt; ) } interface item { id: string name: string selected?: boolean } interface props { items: array&lt;item&gt; selected?: string | number onselect?: (id: string, index: number) =&gt; void } export const combobox: component&lt;props&gt; = (props) =&gt; { const [opened, setopened] = createsignal(false) const selected = creatememo(() =&gt; { (typeof props.selected === 'number') { return math.min(props.selected, props.items.length) } else (typeof props.selected === 'string') { (let = 0; &lt; props.items.length; i++) { (props.items[i].id === props.selected) { return } } } return 0 }) const select = (id: string, index: number) =&gt; { setopened(false) props.onselect?.(id, index) } return ( &lt;div class="relative min-w-48"&gt; &lt;button onclick={() =&gt; setopened(v =&gt; !v)} class="relative inline-flex items-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2 w-full justify-between" role="combobox" aria-expanded={opened()} type="button" &gt; &lt;span&gt; {props.items[selected()]?.name ?? ''} &lt;/span&gt; &lt;svg width="15" height="15" viewbox="0 0 15 15" fill="none" class="ml-2 h-4 w-4 shrink-0 opacity-50" &gt; &lt;path d="m4.93179 5.43179c4.75605 5.60753 4.75605 5.89245 4.93179 6.06819c5.10753 6.24392 5.39245 6.24392 5.56819 6.06819l7.49999 4.13638l9.43179 6.06819c9.60753 6.24392 9.89245 6.24392 10.0682 6.06819c10.2439 5.89245 10.2439 5.60753 10.0682 5.43179l7.81819 3.18179c7.73379 3.0974 7.61933 3.04999 7.49999 3.04999c7.38064 3.04999 7.26618 3.0974 7.18179 3.18179l4.93179 5.43179zm10.0682 9.56819c10.2439 9.39245 10.2439 9.10753 10.0682 8.93179c9.89245 8.75606 9.60753 8.75606 9.43179 8.93179l7.49999 10.8636l5.56819 8.93179c5.39245 8.75606 5.10753 8.75606 4.93179 8.93179c4.75605 9.10753 4.75605 9.39245 4.93179 9.56819l7.18179 11.8182c7.35753 11.9939 7.64245 11.9939 7.81819 11.8182l10.0682 9.56819z" fill="currentcolor" fill-rule="evenodd" clip-rule="evenodd" &gt;&lt;/path&gt; &lt;/svg&gt; &lt;/button&gt; &lt;show when={opened()}&gt; &lt;div class="absolute top-full left-0 z-50 mt-1 w-full"&gt; &lt;div role="dialog" class="rounded-md border bg-popover text-popover-foreground shadow-md outline-none" tabindex="-1" &gt; &lt;div class="flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground"&gt; &lt;div class="overflow-hidden p-1 text-foreground" role="presentation"&gt; &lt;div role="group"&gt; &lt;for each={props.items}&gt; {(item, index) =&gt; &lt;comboboxitem text={item.name} selected={selected() === index()} onclick={() =&gt; select(item.id, index())} /&gt;} &lt;/for&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/show&gt; &lt;/div&gt; ) }</file><file name="loader/src/components/settings/templates.tsx">import { children, component, show } 'solid-js' import { checkbox, checkboxprops } '../ui/checkbox' import { radiobutton, radiobuttonprops } '../ui/radiobutton' export const optionset: component&lt;{ name: string disabled?: boolean children: }&gt; = (props) =&gt; { const c = children(() =&gt; props.children) return ( &lt;div class="aria-disabled:pointer-events-none aria-disabled:opacity-50" aria-disabled={props.disabled}&gt; &lt;h3 class="font-semibold text-neutral-400 text-sm mb-2"&gt;{props.name}&lt;/h3&gt; &lt;div class="space-y-4"&gt; {c()} &lt;/div&gt; &lt;/div&gt; ) } export const checkoption: component&lt;checkboxprops &amp; { caption: string message?: string }&gt; = (props) =&gt; { return ( &lt;label class="flex mb-4 space-x-4 aria-disabled:pointer-events-none aria-disabled:opacity-60" aria-disabled={props.disabled}&gt; &lt;div class="mt-1"&gt; &lt;checkbox {...props} /&gt; &lt;/div&gt; &lt;div class="flex flex-col justify-start"&gt; &lt;h2 class="text-neutral-200"&gt;{props.caption}&lt;/h2&gt; &lt;show when={props.message}&gt; &lt;p class="text-neutral-400 text-sm"&gt;{props.message}&lt;/p&gt; &lt;/show&gt; &lt;/div&gt; &lt;/label&gt; ) } export const radiooption: component&lt;radiobuttonprops &amp; { caption: string message: string }&gt; = (props) =&gt; { return ( &lt;label class="flex mb-4 space-x-4 aria-disabled:pointer-events-none aria-disabled:opacity-60" aria-disabled={props.disabled}&gt; &lt;div class="mt-1"&gt; &lt;radiobutton {...props} /&gt; &lt;/div&gt; &lt;div class="flex flex-col justify-start"&gt; &lt;h2 class="text-neutral-200"&gt;{props.caption}&lt;/h2&gt; &lt;p class="text-neutral-400 text-sm"&gt;{props.message}&lt;/p&gt; &lt;/div&gt; &lt;/label&gt; ) }</file><file name="loader/src/components/settings/Tab.Pengu.tsx">import { component, createsignal, onmount, show } 'solid-js' import { dialog } '@tauri-apps/api' import { config, useconfig } '~/lib/config' import { leagueclient } '~/lib/league-client' import { checkoption, optionset, radiooption } './templates' import { activationmode, coremodule } '~/lib/core-module' import { startup } '~/lib/startup' const launchsettings: component = () =&gt; { const [startup, setsatrtup] = createsignal(false) const togglestartup = async () =&gt; { let enable = !await startup.isenabled() await startup.setenable(enable) setsatrtup(enable) } onmount(async () =&gt; { setsatrtup(await startup.isenabled()) }) return ( &lt;optionset name="launch settings"&gt; &lt;checkoption caption="run startup" message="automatically run pengu computer starts." checked={startup()} onclick={togglestartup} /&gt; &lt;/optionset&gt; ) } export const tabpengu: component = () =&gt; { const { app } = useconfig() const changepluginsdir = async () =&gt; { const dir = await dialog.open({ directory: true, defaultpath: config.basepath(), }) (typeof dir === 'string') { await app.plugins_dir(dir) } } const setactivationmode = async (mode: activationmode) =&gt; { (await coremodule.isactivated()) { await dialog.message('please deactivate pengu changing activation mode.', { type: 'warning' }) } else { await app.activation_mode(mode) } } const changeleaguedir = async () =&gt; { const dir = await dialog.open({ directory: true }) (typeof dir === 'string') { (await leagueclient.validatedir(dir)) { await app.league_dir(dir) } else { await dialog.message('your selected path valid.', { type: 'warning' }) } } } return ( &lt;div class="space-y-4"&gt; &lt;optionset name="plugins folder"&gt; &lt;span class="block text-base text-neutral-200 px-3 py-1 hover:bg-neutral-400/20 rounded-md" onclick={changepluginsdir}&gt; {app.plugins_dir() || './plugins'} &lt;/span&gt; &lt;/optionset&gt; &lt;show when={!window.ismac}&gt; &lt;optionset name="lol client location" disabled={app.activation_mode() === activationmode.universal}&gt; &lt;span class="block text-base text-neutral-200 px-3 py-1 hover:bg-neutral-400/20 rounded-md" onclick={changeleaguedir}&gt; {app.league_dir() || '(not selected)'} &lt;/span&gt; &lt;/optionset&gt; &lt;/show&gt; &lt;show when={window.ismac}&gt; &lt;launchsettings /&gt; &lt;/show&gt; &lt;optionset name="activation mode"&gt; &lt;show when={!window.ismac}&gt; &lt;radiooption caption="universal" message="apply league clients, including live pbe." checked={app.activation_mode() === activationmode.universal} onclick={() =&gt; setactivationmode(activationmode.universal)} /&gt; &lt;radiooption caption="targeted" message="apply specific league client choose. use get access denied universal mode, except tencent server." checked={app.activation_mode() === activationmode.targeted} onclick={() =&gt; setactivationmode(activationmode.targeted)} /&gt; &lt;/show&gt; &lt;show when={window.ismac}&gt; &lt;radiooption caption="on-demand" message="apply specific league client launch riot client. keep pengu running background." disabled checked /&gt; &lt;/show&gt; &lt;/optionset&gt; &lt;/div&gt; ) }</file><file name="loader/src/components/settings/index.tsx">import { component, creatememo, createsignal, } 'solid-js' import { dynamic } 'solid-js/web' import { useroot } '~/lib/root' import { tabclient } './tab.client' import { tabpengu } './tab.pengu' import { tababout } './tab.about' const tabs: array&lt;[string, any]&gt; = [ ['pengu loader', tabpengu], ['league client', tabclient], ['about', tababout], ] export const settings: component = () =&gt; { const { settings } = useroot() const [tabindex, settabindex] = createsignal(0) const currentab = creatememo(() =&gt; tabs[tabindex()][1]) const currentabname = creatememo(() =&gt; tabs[tabindex()][0]) return ( &lt;div class="h-screen fixed inset-0 bg-[#0006] z-50 flex justify-center items-center aria-hidden:hidden" aria-hidden={!settings.visible()} &gt; &lt;div data-tauri-drag-region class="absolute top-0 w-full h-10" /&gt; &lt;div class="border-[1px] border-foreground/15 bg-card rounded-[12px] relative flex w-[800px] h-[460px]"&gt; &lt;span class="absolute top-2 right-2 flex justify-center items-center w-8 h-8 text-slate-300 hover:text-white hover:bg-neutral-500/20 rounded-lg" onclick={settings.hide}&gt; &lt;svg width="10" height="10" viewbox="0 0 10 10" fill="currentcolor"&gt; &lt;polygon points="10.2,0.7 9.5,0 5.1,4.4 0.7,0 0,0.7 4.4,5.1 0,9.5 0.7,10.2 5.1,5.8 9.5,10.2 10.2,9.5 5.8,5.1" /&gt; &lt;/svg&gt; &lt;/span&gt; &lt;div class="flex flex-col bg-black/10 p-4 w-[210px] py-8"&gt; &lt;h1 class="text-neutral-400 text-lg font-bold mx-4"&gt;settings&lt;/h1&gt; &lt;nav class="flex flex-col mt-5 text-neutral-300 space-y-1"&gt; &lt;for each={tabs}&gt; {([name], index) =&gt; ( &lt;a class="px-4 py-1.5 rounded-md hover:bg-neutral-500/10 data-[active=true]:text-white data-[active=true]:bg-neutral-500/20" data-active={tabindex() === index()} onclick={() =&gt; settabindex(index)} &gt;{name}&lt;/a&gt; )} &lt;/for&gt; &lt;/nav&gt; &lt;/div&gt; &lt;div class="flex flex-col flex-1 p-4 py-8 pr-1 pb-2"&gt; &lt;h1 class="text-white text-lg font-bold mx-4"&gt;{currentabname()}&lt;/h1&gt; &lt;div class="flex flex-col mt-5 space-y-2 pl-4 pr-8 pb-4 flex-auto h-0 overflow-y-auto"&gt; &lt;dynamic component={currentab()} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ) }</file><file name="loader/src/components/settings/Tab.About.tsx">import { component } 'solid-js' import { button } '../ui/button' import { discordicon, githubicon, linkicon } '../icons' import { shell } '@tauri-apps/api' const links = { home: 'https://pengu.lol', github: 'https://github.com/penguloader/penguloader/', discord: 'https://chat.pengu.lol/' } export const tababout: component = () =&gt; { return ( &lt;div&gt; &lt;div class="flex flex-col space-y-4"&gt; &lt;p class="text-base font-semibold leading-none text-neutral-300"&gt;pengu loader v{window.appversion}&lt;/p&gt; &lt;div class="flex items-center space-x-4 text-neutral-200"&gt; &lt;button variant="outline" size="sm" class="flex items-center gap-x-2" onclick={() =&gt; shell.open(links.home)}&gt;&lt;linkicon size={16} /&gt;pengu.lol&lt;/button&gt; &lt;button variant="outline" size="sm" class="flex items-center gap-x-2" onclick={() =&gt; shell.open(links.discord)}&gt;&lt;discordicon size={16} /&gt; discord&lt;/button&gt; &lt;button variant="outline" size="sm" class="flex items-center gap-x-2" onclick={() =&gt; shell.open(links.github)}&gt;&lt;githubicon size={16} /&gt; github&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ) }</file><file name="loader/src/components/settings/Tab.Client.tsx">import { component } 'solid-js' import { useconfig } '~/lib/config' import { checkoption, optionset } './templates' export const tabclient: component = () =&gt; { const { client } = useconfig() return ( &lt;div class="space-y-4"&gt; &lt;p class="text-sm text-neutral-400"&gt;*these options work within client, restart take effect.&lt;/p&gt; &lt;optionset name="hot keys"&gt; &lt;checkoption caption="enable hot keys" message="allow pengu catch hot keys press client perform functions below." checked={client.use_hotkeys()} onchange={client.use_hotkeys} /&gt; &lt;div class="space-y-2 ml-8 aria-disabled:opacity-50" aria-disabled={!client.use_hotkeys()}&gt; &lt;div class="flex items-center space-x-2"&gt; &lt;kbd class="px-2 py-0.5 rounded-sm text-xs bg-neutral-500/30"&gt;ctrl shift r&lt;/kbd&gt; &lt;p class="text-sm text-neutral-400"&gt;reload client&lt;/p&gt; &lt;/div&gt; &lt;div class="flex items-center space-x-2"&gt; &lt;kbd class="px-2 py-0.5 rounded-sm text-xs bg-neutral-500/30"&gt;ctrl shift enter&lt;/kbd&gt; &lt;p class="text-sm text-neutral-400"&gt;restart ux&lt;/p&gt; &lt;/div&gt; &lt;div class="flex items-center space-x-2 aria-disabled:line-through" aria-disabled={!client.use_devtools()}&gt; &lt;kbd class="px-2 py-0.5 rounded-sm text-xs bg-neutral-500/30"&gt;ctrl shift i&lt;/kbd&gt; &lt;span&gt;/&lt;/span&gt; &lt;kbd class="px-2 py-0.5 rounded-sm text-xs bg-neutral-500/30"&gt;f12&lt;/kbd&gt; &lt;p class="text-sm text-neutral-400"&gt;open chrome devtools&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/optionset&gt; &lt;optionset name="tweaks"&gt; &lt;checkoption caption="optimized client" message="enable caching disable unnecessary things client. option cause connection issues." checked={client.optimized_client()} onchange={client.optimized_client} /&gt; &lt;checkoption caption="super potato mode" message="disable animations transitions, also reduce input lag client." checked={client.super_potato()} onchange={client.super_potato} /&gt; &lt;checkoption caption="silent mode" message="suppress notifications flashing foreground window matchmaking found." checked={client.silent_mode()} onchange={client.silent_mode} /&gt; &lt;/optionset&gt; &lt;optionset name="developer"&gt; &lt;checkoption caption="developer tools" message="allow open chrome devtools debug ux plugins." checked={client.use_devtools()} onchange={client.use_devtools} /&gt; &lt;checkoption caption="insecure mode" message="disable web security features like cors csp." checked={client.insecure_mode()} onchange={client.insecure_mode} /&gt; &lt;checkoption caption="riotclient api" message="allow access riotclient api via 'riotclient' domain." checked={client.use_riotclient()} onchange={client.use_riotclient} /&gt; &lt;checkoption caption="allow proxy" message="allow ux requests traffic network proxy." checked={client.use_proxy()} onchange={client.use_proxy} /&gt; &lt;/optionset&gt; &lt;/div&gt; ) }</file><file name="loader/src/lib/store.ts">import yaml 'js-yaml' interface iplugin { name: string slug: string description: string images: string[] repo: string tags: string[] theme: boolean auto_update: boolean } interface iregistry { name: string version: string plugins: iplugin } export const storemanager = new class { async fetchplugins(): promise&lt;iplugin&gt; { const res = await fetch('https://raw.githack.com/penguloader/plugin-store/main/registry/plugins.yml') const registry = &lt;iregistry&gt;await res.text().then(t =&gt; yaml.load(t)) return registry.plugins } }</file><file name="loader/src/lib/datatstore.ts">import { exists, readbinaryfile } '@tauri-apps/api/fs' import { config } './config' export const datastore = new class { async json(): promise&lt;object&gt; { const path = await config.basepath('datastore') (await exists(path)) { try { const data = await readbinaryfile(path) this.transform(data) return this.decode(data) } catch { } } return {} } private decode(data: uint8array) { (data.length &gt;= 2) { const decoder = new textdecoder() const json = decoder.decode(data) return json.stringify(json) } else { return {} } } private transform(data: uint8array) { const key = 'a5dgy6lz9fpg9kgnih1mz' (let = 0; &lt; data.length; i++) { data[i] ^= key.charcodeat(i % key.length) } } }</file><file name="loader/src/lib/utils.ts">import { createsignal, oncleanup, onmount } 'solid-js' import tippy, { type instance tippyinstance } 'tippy.js' export function ismac() { return /mac/i.test(navigator.platform) } // fnv1a 32-bit export function gethash(str: string) { const data = new textencoder().encode(str) let hash = 0x811c9dc5 (const byte data) { hash ^= byte hash += (hash &lt;&lt; 1) + (hash &lt;&lt; 4) + (hash &lt;&lt; 7) + (hash &lt;&lt; 8) + (hash &lt;&lt; 24) } return hash &gt;&gt;&gt; 0 } export function usetippy(tooltip: string) { let instance: tippyinstance const [ref, setref] = createsignal&lt;htmlelement&gt;(null!) onmount(() =&gt; { instance = tippy(ref(), { content: tooltip, arrow: false, }) }) oncleanup(() =&gt; { instance?.destroy() }) return setref }</file><file name="loader/src/lib/config.ts">import { accessor, createroot, createsignal } 'solid-js' import { fs, invoke } '@tauri-apps/api' import { activationmode } './core-module' import { inimap } '@std/ini' const defaultconfig = { app: { language: 'en', plugins_dir: '', league_dir: '', disabled_plugins: '', activation_mode: activationmode.universal, }, client: { use_hotkeys: true, optimized_client: true, silent_mode: false, super_potato: false, insecure_mode: false, use_devtools: false, use_riotclient: false, use_proxy: false, } } /// ts awesome! type configsection = keyof typeof defaultconfig type configkey&lt;s extends configsection&gt; = keyof typeof defaultconfig[s] type configvalue&lt;s extends configsection, k extends configkey&lt;s&gt;&gt; = typeof defaultconfig[s][k] /** * parse string value based default value. */ function parsevalue(val?: string, def?: any) { (val != null) { (typeof def === 'boolean') { val = val.trim().tolowercase() return val === '1' || val === 'true' } else (typeof def === 'number') { const num = parseint(val.trim()) (!isnan(num) &amp;&amp; !isfinite(num)) { return num } } else { return val } } return def } export const config = new class { private basedir = '.' private configpath = 'config' private ini = new inimap({ pretty: true }) /** * get base path exec dir. * function support relative paths. * use tauri's join() due async issue. */ basepath(...paths: string[]) { return this.basedir + '/' + paths.join('/') } /** * load config data file. * must call first ui operations. * @returns boolean value indicates config file already exists. */ async load(): promise&lt;boolean&gt; { const base = await invoke&lt;string&gt;('plugin:config|get_base_dir') this.basedir = base.replace(/\\/g, '/') this.configpath = `${this.basedir}/config` (await fs.exists(this.configpath)) { const content = await fs.readtextfile(this.configpath) this.ini.parse(content, (key, value, section) =&gt; { // ensure keys default config (section &amp;&amp; section defaultconfig) { const sec = (&lt;any&gt;defaultconfig)[section] record&lt;string, any&gt; (key sec) { return parsevalue(value, sec[key]) } } return value }) return true } return false } /** * save config data file. */ async save() { const content = this.ini.tostring() .replace(/([^\n])\n\[/g, '$1\n\n[') .trimstart() await fs.writetextfile(this.configpath, content) } /** * get intermidiate data. */ get&lt;s extends configsection, k extends configkey&lt;s&gt;&gt;(section: s, key: k, def?: configvalue&lt;s, k&gt;): configvalue&lt;s, k&gt; { return &lt;any&gt;this.ini.get(section, &lt;string&gt;key) ?? def } /** * set intermidiate data. */ set&lt;s extends configsection, k extends configkey&lt;s&gt;&gt;(section: s, key: k, value: configvalue&lt;s, k&gt;) { this.ini.set(section, &lt;string&gt;key, value) } } interface configentry&lt;t&gt; extends accessor&lt;t&gt; { // (): (value: t): promise&lt;void&gt; (setter: (prev: t) =&gt; t): promise&lt;void&gt; } type transformentry&lt;t&gt; = { [k keyof t]: t[k] extends object ? transformentry&lt;t[k]&gt; : configentry&lt;t[k]&gt; } function defineentry(section: string, key: string, def: any) { const [get, set] = createsignal() return function (value?: any) { (arguments.length === 0 || value == null) { let val = get() (val === undefined) { // @ts-ignore val = config.get(section, key, def) set(() =&gt; val) } return val } else { (typeof value === 'function') { value = value(get()) } // @ts-ignore config.set&lt;t&gt;(section, key, value!) set(() =&gt; value!) return config.save() } } } const _config = createroot(() =&gt; { const base = defaultconfig const config: record&lt;string, object&gt; = {} (const section defaultconfig) { const sec: record&lt;string, any&gt; = {} (const key base[section]) { const def = base[section][key] sec[key] = defineentry(section, key, def) } config[section] = sec } return config transformentry&lt;typeof defaultconfig&gt; }) export const useconfig = () =&gt; _config</file><file name="loader/src/lib/startup.ts">import { invoke } '@tauri-apps/api' export const startup = new class { async isenabled() { return await invoke&lt;boolean&gt;('plugin:startup|is_enabled') } async setenable(enable: boolean) { await invoke&lt;boolean&gt;('plugin:startup|set_enable', { enable: enable }) } }</file><file name="loader/src/lib/i18n.ts">import { createroot } 'solid-js' import { createstore } 'solid-js/store' import translations '../../translations.json' import { useconfig } './config' const en = translations.languages[0] type translationkey = keyof typeof en.translations type translationmap = record&lt;translationkey, string&gt; const _i18n = createroot(() =&gt; { const [current, set] = createstore&lt;translationmap&gt;({ ...en.translations }) const languages = translations.languages.map((x) =&gt; ({ id: x.id, name: x.name, })) const switchto = (id: string) =&gt; { (const lang translations.languages) { (lang.id === id) { set({ ...lang.translations }) } } } const text = (key: translationkey): string =&gt; { (key current) { return current[key] } return `{{${key}}}` } return { languages, switchto, t: text, } }) export const usei18n = () =&gt; { _i18n.switchto(useconfig().app.language()) return _i18n }</file><file name="loader/src/lib/league-client.ts">import { exists, readtextfile } '@tauri-apps/api/fs' import { join } '@tauri-apps/api/path' interface riotclientinstalls { associated_client: record&lt;string, string&gt; rc_default: string rc_live: string } export const leagueclient = new class { /** * validate league folder, must contain lcux exe. */ async validatedir(dir: string): promise&lt;boolean&gt; { (dir &amp;&amp; typeof dir === 'string') { const uxpath = await join(dir, 'leagueclientux.exe') return await exists(uxpath) } return false } async correctdir() { } /** * find league riotclient manifest. */ async findleaguepath(): promise&lt;string | null&gt; { const jsonpath = 'c:\\programdata\\riot games\\riotclientinstalls.json' try { (await exists(jsonpath)) { const json = await readtextfile(jsonpath) const data = &lt;riotclientinstalls&gt;json.parse(json) let rcpath = '' (data.rc_live) rcpath = await join(data.rc_live, '..') else (!data.rc_default) rcpath = await join(data.rc_default, '..') let lcdir = await join(rcpath, '..', 'league legends') (await this.validatedir(lcdir)) // found return await join(lcdir) let lcpbedir = await join(rcpath, '..', 'league legends (pbe)') (await this.validatedir(lcpbedir)) // found pbe return await join(lcpbedir) (typeof data.associated_client.count === 'object') { (let k data.associated_client) { (/\(pbe\)/i.test(k)) lcpbedir = k.replace(/[\\\/]$/, '') else lcdir = k.replace(/[\\\/]$/, '') } (await this.validatedir(lcdir)) // found return lcdir else (await this.validatedir(lcpbedir)) // found pbe return lcpbedir } } } catch { } return null } }</file><file name="loader/src/lib/core-module.ts">import { invoke } '@tauri-apps/api' import { config } './config' import { leagueclient } './league-client' export enum activationmode { universal = 0, targeted, ondemand, } export const coremodule = new class { private usesymlink(): boolean { return config.get('app', 'activation_mode') === activationmode.targeted } /** * check league dir required not. * symlink mode must activate. */ async checkleaguedir(): promise&lt;boolean&gt; { (this.usesymlink()) { const leaguedir = config.get('app', 'league_dir') (!await leagueclient.validatedir(leaguedir)) { return false } } return true } /** * check core module exists not. */ async exists(): promise&lt;boolean&gt; { return await invoke&lt;boolean&gt;('plugin:config|core_exists') } /** * check core module activated not. */ async isactivated(): promise&lt;boolean&gt; { (window.ismac) { return await invoke&lt;boolean&gt;('plugin:macos|cmd_is_active') } return await invoke&lt;boolean&gt;('plugin:windows|core_is_activated', { symlink: this.usesymlink() }) } /** * perform activation. * @returns boolean indicates new active state, * action successful error message empty. */ async doactivate(active: boolean): promise&lt;{ error: string, activated: boolean }&gt; { let error = '' (window.ismac) { await invoke('plugin:macos|cmd_set_active', { active: active, }) } else { error = await invoke&lt;string&gt;('plugin:windows|core_do_activate', { active: active, symlink: this.usesymlink(), }) } return { error: error, activated: await this.isactivated(), } } }</file><file name="loader/src/lib/plugins.ts">import { join } '@tauri-apps/api/path' import { exists, readtextfile, readdir, createdir } '@tauri-apps/api/fs' import { shell } './shell' import { config } './config' import { gethash } './utils' export interface plugininfo { name: string description?: string author?: string link?: string path: string entrypath: string hash: number } export const pluginmanager = new class { private disabledset = new set&lt;number&gt;() private getdir() { let path = config.get('app', 'plugins_dir', '') (!path || path.startswith('.')) { path = config.basepath('plugins') } return path } async openfolder() { const dir = this.getdir() (!await exists(dir)) { await createdir(dir, { recursive: true }) } await shell.expandfolder(dir) } /** * get plugins. */ async getplugins() { const dir = this.getdir() const plugins = array&lt;plugininfo&gt;() this.disabledset = this.fetchdisabledset() function push(name: string, _path: string, entry: string) { const dir2 = dir.replace(/\\/g, '/') const url = entry.replace(/\\/g, '/') const shortpath = url.replace(dir2, '').substring(1) const hash = gethash(shortpath.tolowercase()) plugins.push({ name: name, path: shortpath, entrypath: entry, hash: hash, }) } (await exists(dir)) { const ref = { entry: '' } (const file await readdir(dir)) { (file.children) { // scan @author folder (file.name!.startswith('@')) { (let subdir await readdir(file.path)) { // subfolder plugin contains index.js (subdir.children &amp;&amp; this.allowedname(subdir.name) &amp;&amp; await this.hasindex(subdir.path, ref)) { const name = `${file.name}/${subdir.name}` push(name, subdir.path, ref.entry) } } } // subfolder plugin contains index.js else (this.allowedname(file.name) &amp;&amp; await this.hasindex(file.path, ref)) { push(file.name!, file.path, ref.entry) } } // top-level file plugin else (this.allowedname(file.name) &amp;&amp; await this.isindex(file.path)) { const name = file.name!.substring(0, file.name!.lastindexof('.')) push(name, file.path, file.path) } } // parse metadata (const plugin plugins) { await this.parsepluginentry(plugin) } } return plugins } isenabled(hash: number) { return !this.disabledset.has(hash) } async togglestate(hash: number) { (this.disabledset.has(hash)) { this.disabledset.delete(hash) } else { this.disabledset.add(hash) } const value = [...this.disabledset].map(x =&gt; x.tostring(16)).join() config.set('app', 'disabled_plugins', value) await config.save() return this.isenabled(hash) } private allowedname(name?: string) { return typeof name === 'string' &amp;&amp; !name.startswith('_') &amp;&amp; !name.startswith('.') } private async isindex(path: string, ref?: { entry: string }) { (path.endswith('.js') &amp;&amp; await exists(path) || await exists(path += '_')) { (typeof ref === 'object') { ref.entry = path } return true } return false } private async hasindex(dir: string, ref: { entry: string }) { const path = await join(dir, 'index.js') return await this.isindex(path, ref) } private async parsepluginentry(plugin: plugininfo) { (await exists(plugin.entrypath)) { const content = await readtextfile(plugin.entrypath) const description = this.gettagvalue(content, 'description') const author = this.gettagvalue(content, 'author') const link = this.gettagvalue(content, 'link') (description) plugin.description = description (author) plugin.author = author.includes('#') ? author : '@' + author (link.startswith('https://')) plugin.link = link } } // parse @tag jsdoc private gettagvalue(jsdoc: string, tag: string) { const regex = new regexp(`@${tag}\\s+(.+)`) const match = regex.exec(jsdoc) (match) { return match[1].trim() } return '' } private fetchdisabledset() { const set = new set&lt;number&gt;() const rawset = &lt;string&gt;config.get('app', 'disabled_plugins', '') const hashes = rawset.split(',') (const hash hashes) { const num = parseint(hash.trim(), 16) (num) set.add(num) } return set } }</file><file name="loader/src/lib/shell.ts">import { invoke, shell } '@tauri-apps/api' export const shell = { /** * expand folder file explorer. * @param path absolute path folder. */ async expandfolder(path: string) { await invoke('plugin:shell|expand_folder', { path: path }) }, /** * reveal file file explorer. * @param path absolute path file. */ async revealfile(path: string) { await invoke('plugin:shell|reveal_file', { path: path }) }, /** * open external link. * @param url url. */ async openlink(url: string) { (typeof url === 'string' &amp;&amp; url.startswith('https://')) { await shell.open(url) } }, }</file><file name="loader/src/lib/root.ts">import { createroot, createsignal } 'solid-js' function usesettings() { const [visible, setvisible] = createsignal(false) const show = () =&gt; setvisible(true) const hide = () =&gt; setvisible(false) return { visible, show, hide, } } const _root = createroot(() =&gt; { const [ready, setready] = createsignal(false) const [isstore, setstore] = createsignal(false) const settings = usesettings() return { ready, setready, isstore, setstore, settings, } }) export const useroot = () =&gt; _root</file><file name="loader/src-tauri/Cargo.toml">[package] name = "pengu-loader" version = "1.2.0" description = "pengu loader app" edition = "2021" license = "mit" repository = "https://github.com/penguloader/penguloader" homepage = "https://pengu.lol" categories = ["application"] keywords = ["pengu", "pengu-loader", "league-client", "league-of-legends"] # see keys definitions https://doc.rust-lang.org/cargo/reference/manifest.html [build-dependencies] tauri-build = { version = "1", features = [] } [dependencies] libc = "0.2" tauri = { version = "1", features = [ "window-hide", "system-tray", "dialog-all", "window-close", "window-minimize", "window-set-title", "window-set-focus", "window-unminimize", "window-show", "window-start-dragging", "fs-write-file", "fs-rename-file", "fs-exists", "fs-read-file", "fs-create-dir", "fs-read-dir", "path-all", "shell-open", ] } serde = { version = "1", features = ["derive"] } serde_json = "1" named-lock = "0.4" [target."cfg(target_os = \"windows\")".dependencies] winreg = "0.52" is_elevated = "0.1" runas = "1.2" [target."cfg(target_os = \"macos\")".dependencies] objc = "0.2" base64 = "0.22" native-tls = "0.2" tungstenite = { version = "0.23", features = ["default", "native-tls"] } auto-launch = "0.5" [dependencies.sysinfo] version = "0.31" default-features = false features = ["system"] [features] # feature used production builds dev server specified, remove!! custom-protocol = ["tauri/custom-protocol"]</file><file name="loader/src-tauri/tauri.conf.json">{ "build": { "beforedevcommand": "pnpm dev", "beforebuildcommand": "pnpm build", "devpath": "http://localhost:1420", "distdir": "../dist" }, "package": { "productname": "pengu loader", "version": "1.2.0" }, "tauri": { "allowlist": { "all": false, "dialog": { "all": true }, "fs": { "all": false, "copyfile": false, "createdir": true, "exists": true, "readdir": true, "readfile": true, "removedir": false, "removefile": false, "renamefile": true, "writefile": true, "scope": [ "**" ] }, "path": { "all": true }, "shell": { "all": false, "open": true }, "window": { "all": false, "center": false, "close": true, "create": false, "hide": true, "maximize": false, "minimize": true, "print": false, "requestuserattention": false, "setalwaysontop": false, "setclosable": false, "setcontentprotected": false, "setcursorgrab": false, "setcursoricon": false, "setcursorposition": false, "setcursorvisible": false, "setdecorations": false, "setfocus": true, "setfullscreen": false, "seticon": false, "setignorecursorevents": false, "setmaxsize": false, "setmaximizable": false, "setminsize": false, "setminimizable": false, "setposition": false, "setresizable": false, "setsize": false, "setskiptaskbar": false, "settitle": true, "show": true, "startdragging": true, "unmaximize": false, "unminimize": true } }, "systemtray": { "title": "pengu loader", "iconpath": "icons/icon.png", "iconastemplate": false }, "security": { "csp": null }, "bundle": { "active": true, "targets": "all", "identifier": "com.pengu.lol", "icon": [ "icons/32x32.png", "icons/128x128.png", "icons/128x128@2x.png", "icons/icon.icns", "icons/icon.ico" ], "windows": { "allowdowngrades": true, "certificatethumbprint": null, "digestalgorithm": null, "nsis": null, "timestampurl": null, "tsp": false, "webviewfixedruntimepath": null, "webviewinstallmode": { "type": "embedbootstrapper" }, "wix": null } } } }</file><file name="loader/src-tauri/build.rs">fn main() { tauri_build::build() }</file><file name="loader/src-tauri/Cargo.lock"># file automatically @generated cargo. # intended manual editing. version = 3 [[package]] name = "addr2line" version = "0.21.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb" dependencies = [ "gimli", ] [[package]] name = "adler" version = "1.0.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe" [[package]] name = "aho-corasick" version = "1.1.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916" dependencies = [ "memchr", ] [[package]] name = "alloc-no-stdlib" version = "2.0.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "cc7bb162ec39d46ab1ca8c77bf72e890535becd1751bb45f64c597edb4c8c6b3" [[package]] name = "alloc-stdlib" version = "0.2.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "94fb8275041c72129eb51b7d0322c29b8387a0386127718b096429201a5d6ece" dependencies = [ "alloc-no-stdlib", ] [[package]] name = "android-tzdata" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0" [[package]] name = "android_system_properties" version = "0.1.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311" dependencies = [ "libc", ] [[package]] name = "anyhow" version = "1.0.82" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f538837af36e6f6a9be0faa67f9a314f8119e4e4b5867c6ab40ed60360142519" [[package]] name = "atk" version = "0.15.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "2c3d816ce6f0e2909a96830d6911c2aff044370b1ef92d7f267b43bae5addedd" dependencies = [ "atk-sys", "bitflags 1.3.2", "glib", "libc", ] [[package]] name = "atk-sys" version = "0.15.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "58aeb089fb698e06db8089971c7ee317ab9644bade33383f63631437b03aafb6" dependencies = [ "glib-sys", "gobject-sys", "libc", "system-deps 6.2.2", ] [[package]] name = "auto-launch" version = "0.5.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1f012b8cc0c850f34117ec8252a44418f2e34a2cf501de89e29b241ae5f79471" dependencies = [ "dirs", "thiserror", "winreg 0.10.1", ] [[package]] name = "autocfg" version = "1.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f1fdabc7756949593fe60f30ec81974b613357de856987752631dea1e3394c80" [[package]] name = "backtrace" version = "0.3.71" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "26b05800d2e817c8b3b4b54abd461726265fa9789ae34330622f2db9ee696f9d" dependencies = [ "addr2line", "cc", "cfg-if", "libc", "miniz_oxide", "object", "rustc-demangle", ] [[package]] name = "base64" version = "0.13.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8" [[package]] name = "base64" version = "0.21.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567" [[package]] name = "base64" version = "0.22.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9475866fec1451be56a3c2400fd081ff546538961565ccb5b7142cbd22bc7a51" [[package]] name = "bitflags" version = "1.3.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a" [[package]] name = "bitflags" version = "2.5.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1" [[package]] name = "block" version = "0.1.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a" [[package]] name = "block-buffer" version = "0.10.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71" dependencies = [ "generic-array", ] [[package]] name = "brotli" version = "3.5.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d640d25bc63c50fb1f0b545ffd80207d2e10a4c965530809b40ba3386825c391" dependencies = [ "alloc-no-stdlib", "alloc-stdlib", "brotli-decompressor", ] [[package]] name = "brotli-decompressor" version = "2.5.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4e2e4afe60d7dd600fdd3de8d0f08c2b7ec039712e3b6137ff98b7004e82de4f" dependencies = [ "alloc-no-stdlib", "alloc-stdlib", ] [[package]] name = "bstr" version = "1.9.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "05efc5cfd9110c8416e471df0e96702d58690178e206e61b7173706673c93706" dependencies = [ "memchr", "serde", ] [[package]] name = "bumpalo" version = "3.16.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c" [[package]] name = "bytemuck" version = "1.15.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5d6d68c57235a3a081186990eca2867354726650f42f7516ca50c28d6281fd15" [[package]] name = "byteorder" version = "1.5.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b" [[package]] name = "bytes" version = "1.6.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9" [[package]] name = "cairo-rs" version = "0.15.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c76ee391b03d35510d9fa917357c7f1855bd9a6659c95a1b392e33f49b3369bc" dependencies = [ "bitflags 1.3.2", "cairo-sys-rs", "glib", "libc", "thiserror", ] [[package]] name = "cairo-sys-rs" version = "0.15.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3c55d429bef56ac9172d25fecb85dc8068307d17acd74b377866b7a1ef25d3c8" dependencies = [ "glib-sys", "libc", "system-deps 6.2.2", ] [[package]] name = "cargo_toml" version = "0.15.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "599aa35200ffff8f04c1925aa1acc92fa2e08874379ef42e210a80e527e60838" dependencies = [ "serde", "toml 0.7.8", ] [[package]] name = "cc" version = "1.0.95" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d32a725bc159af97c3e629873bb9f88fb8cf8a4867175f76dc987815ea07c83b" [[package]] name = "cesu8" version = "1.1.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c" [[package]] name = "cfb" version = "0.7.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d38f2da7a0a2c4ccf0065be06397cc26a81f4e528be095826eee9d4adbb8c60f" dependencies = [ "byteorder", "fnv", "uuid", ] [[package]] name = "cfg-expr" version = "0.9.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3431df59f28accaf4cb4eed4a9acc66bea3f3c3753aa6cdc2f024174ef232af7" dependencies = [ "smallvec", ] [[package]] name = "cfg-expr" version = "0.15.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d067ad48b8650848b989a59a86c6c36a995d02d2bf778d45c3c5d57bc2718f02" dependencies = [ "smallvec", "target-lexicon", ] [[package]] name = "cfg-if" version = "1.0.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd" [[package]] name = "chrono" version = "0.4.38" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401" dependencies = [ "android-tzdata", "iana-time-zone", "num-traits", "serde", "windows-targets 0.52.5", ] [[package]] name = "cocoa" version = "0.24.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f425db7937052c684daec3bd6375c8abe2d146dca4b8b143d6db777c39138f3a" dependencies = [ "bitflags 1.3.2", "block", "cocoa-foundation", "core-foundation", "core-graphics", "foreign-types", "libc", "objc", ] [[package]] name = "cocoa-foundation" version = "0.1.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8c6234cbb2e4c785b456c0644748b1ac416dd045799740356f8363dfe00c93f7" dependencies = [ "bitflags 1.3.2", "block", "core-foundation", "core-graphics-types", "libc", "objc", ] [[package]] name = "color_quant" version = "1.1.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b" [[package]] name = "combine" version = "4.6.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ba5a308b75df32fe02788e748662718f03fde005016435c444eea572398219fd" dependencies = [ "bytes", "memchr", ] [[package]] name = "convert_case" version = "0.4.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e" [[package]] name = "core-foundation" version = "0.9.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f" dependencies = [ "core-foundation-sys", "libc", ] [[package]] name = "core-foundation-sys" version = "0.8.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b" [[package]] name = "core-graphics" version = "0.22.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "2581bbab3b8ffc6fcbd550bf46c355135d16e9ff2a6ea032ad6b9bf1d7efe4fb" dependencies = [ "bitflags 1.3.2", "core-foundation", "core-graphics-types", "foreign-types", "libc", ] [[package]] name = "core-graphics-types" version = "0.1.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "45390e6114f68f718cc7a830514a96f903cccd70d02a8f6d9f643ac4ba45afaf" dependencies = [ "bitflags 1.3.2", "core-foundation", "libc", ] [[package]] name = "cpufeatures" version = "0.2.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504" dependencies = [ "libc", ] [[package]] name = "crc32fast" version = "1.4.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b3855a8a784b474f333699ef2bbca9db2c4a1f6d9088a90a2d25b1eb53111eaa" dependencies = [ "cfg-if", ] [[package]] name = "crossbeam-channel" version = "0.5.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ab3db02a9c5b5121e1e42fbdb1aeb65f5e02624cc58c43f2884c6ccac0b82f95" dependencies = [ "crossbeam-utils", ] [[package]] name = "crossbeam-deque" version = "0.8.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d" dependencies = [ "crossbeam-epoch", "crossbeam-utils", ] [[package]] name = "crossbeam-epoch" version = "0.9.18" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e" dependencies = [ "crossbeam-utils", ] [[package]] name = "crossbeam-utils" version = "0.8.19" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "248e3bacc7dc6baa3b21e405ee045c3047101a49145e7e9eca583ab4c2ca5345" [[package]] name = "crypto-common" version = "0.1.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3" dependencies = [ "generic-array", "typenum", ] [[package]] name = "cssparser" version = "0.27.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "754b69d351cdc2d8ee09ae203db831e005560fc6030da058f86ad60c92a9cb0a" dependencies = [ "cssparser-macros", "dtoa-short", "itoa 0.4.8", "matches", "phf 0.8.0", "proc-macro2", "quote", "smallvec", "syn 1.0.109", ] [[package]] name = "cssparser-macros" version = "0.6.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "13b588ba4ac1a99f7f2964d24b3d896ddc6bf847ee3855dbd4366f058cfcd331" dependencies = [ "quote", "syn 2.0.60", ] [[package]] name = "ctor" version = "0.2.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "edb49164822f3ee45b17acd4a208cfc1251410cf0cad9a833234c9890774dd9f" dependencies = [ "quote", "syn 2.0.60", ] [[package]] name = "darling" version = "0.20.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "54e36fcd13ed84ffdfda6f5be89b31287cbb80c439841fe69e04841435464391" dependencies = [ "darling_core", "darling_macro", ] [[package]] name = "darling_core" version = "0.20.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9c2cf1c23a687a1feeb728783b993c4e1ad83d99f351801977dd809b48d0a70f" dependencies = [ "fnv", "ident_case", "proc-macro2", "quote", "strsim", "syn 2.0.60", ] [[package]] name = "darling_macro" version = "0.20.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a668eda54683121533a393014d8692171709ff57a7d61f187b6e782719f8933f" dependencies = [ "darling_core", "quote", "syn 2.0.60", ] [[package]] name = "data-encoding" version = "2.6.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e8566979429cf69b49a5c740c60791108e86440e8be149bbea4fe54d2c32d6e2" [[package]] name = "deranged" version = "0.3.11" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4" dependencies = [ "powerfmt", "serde", ] [[package]] name = "derive_more" version = "0.99.17" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321" dependencies = [ "convert_case", "proc-macro2", "quote", "rustc_version", "syn 1.0.109", ] [[package]] name = "digest" version = "0.10.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292" dependencies = [ "block-buffer", "crypto-common", ] [[package]] name = "dirs" version = "4.0.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059" dependencies = [ "dirs-sys", ] [[package]] name = "dirs-next" version = "2.0.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1" dependencies = [ "cfg-if", "dirs-sys-next", ] [[package]] name = "dirs-sys" version = "0.3.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6" dependencies = [ "libc", "redox_users", "winapi", ] [[package]] name = "dirs-sys-next" version = "0.1.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d" dependencies = [ "libc", "redox_users", "winapi", ] [[package]] name = "dispatch" version = "0.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b" [[package]] name = "dtoa" version = "1.0.9" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "dcbb2bf8e87535c23f7a8a321e364ce21462d0ff10cb6407820e8e96dfff6653" [[package]] name = "dtoa-short" version = "0.3.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "dbaceec3c6e4211c79e7b1800fb9680527106beb2f9c51904a3210c03a448c74" dependencies = [ "dtoa", ] [[package]] name = "dunce" version = "1.0.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "56ce8c6da7551ec6c462cbaf3bfbc75131ebbfa1c944aeaa9dab51ca1c5f0c3b" [[package]] name = "either" version = "1.11.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a47c1c47d2f5964e29c61246e81db715514cd532db6b5116a25ea3c03d6780a2" [[package]] name = "embed-resource" version = "2.4.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c6985554d0688b687c5cb73898a34fbe3ad6c24c58c238a4d91d5e840670ee9d" dependencies = [ "cc", "memchr", "rustc_version", "toml 0.8.12", "vswhom", "winreg 0.52.0", ] [[package]] name = "embed_plist" version = "1.2.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4ef6b89e5b37196644d8796de5268852ff179b44e96276cf4290264843743bb7" [[package]] name = "encoding_rs" version = "0.8.34" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b45de904aa0b010bce2ab45264d0631681847fa7b6f2eaa7dab7619943bc4f59" dependencies = [ "cfg-if", ] [[package]] name = "equivalent" version = "1.0.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5" [[package]] name = "errno" version = "0.3.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245" dependencies = [ "libc", "windows-sys 0.52.0", ] [[package]] name = "fastrand" version = "2.1.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a" [[package]] name = "fdeflate" version = "0.3.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4f9bfee30e4dedf0ab8b422f03af778d9612b63f502710fc500a334ebe2de645" dependencies = [ "simd-adler32", ] [[package]] name = "field-offset" version = "0.3.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "38e2275cc4e4fc009b0669731a1e5ab7ebf11f469eaede2bab9309a5b4d6057f" dependencies = [ "memoffset", "rustc_version", ] [[package]] name = "filetime" version = "0.2.23" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1ee447700ac8aa0b2f2bd7bc4462ad686ba06baa6727ac149a2d6277f0d240fd" dependencies = [ "cfg-if", "libc", "redox_syscall 0.4.1", "windows-sys 0.52.0", ] [[package]] name = "flate2" version = "1.0.30" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5f54427cfd1c7829e2a139fcefea601bf088ebca651d2bf53ebc600eac295dae" dependencies = [ "crc32fast", "miniz_oxide", ] [[package]] name = "fnv" version = "1.0.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1" [[package]] name = "foreign-types" version = "0.3.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1" dependencies = [ "foreign-types-shared", ] [[package]] name = "foreign-types-shared" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b" [[package]] name = "form_urlencoded" version = "1.2.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456" dependencies = [ "percent-encoding", ] [[package]] name = "futf" version = "0.1.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "df420e2e84819663797d1ec6544b13c5be84629e7bb00dc960d6917db2987843" dependencies = [ "mac", "new_debug_unreachable", ] [[package]] name = "futures-channel" version = "0.3.30" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78" dependencies = [ "futures-core", ] [[package]] name = "futures-core" version = "0.3.30" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d" [[package]] name = "futures-executor" version = "0.3.30" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a576fc72ae164fca6b9db127eaa9a9dda0d61316034f33a0a0d4eda41f02b01d" dependencies = [ "futures-core", "futures-task", "futures-util", ] [[package]] name = "futures-io" version = "0.3.30" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1" [[package]] name = "futures-macro" version = "0.3.30" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "87750cf4b7a4c0625b1529e4c543c2182106e4dedc60a2a6455e00d212c489ac" dependencies = [ "proc-macro2", "quote", "syn 2.0.60", ] [[package]] name = "futures-task" version = "0.3.30" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004" [[package]] name = "futures-util" version = "0.3.30" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48" dependencies = [ "futures-core", "futures-macro", "futures-task", "pin-project-lite", "pin-utils", "slab", ] [[package]] name = "fxhash" version = "0.2.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c" dependencies = [ "byteorder", ] [[package]] name = "gdk" version = "0.15.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a6e05c1f572ab0e1f15be94217f0dc29088c248b14f792a5ff0af0d84bcda9e8" dependencies = [ "bitflags 1.3.2", "cairo-rs", "gdk-pixbuf", "gdk-sys", "gio", "glib", "libc", "pango", ] [[package]] name = "gdk-pixbuf" version = "0.15.11" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ad38dd9cc8b099cceecdf41375bb6d481b1b5a7cd5cd603e10a69a9383f8619a" dependencies = [ "bitflags 1.3.2", "gdk-pixbuf-sys", "gio", "glib", "libc", ] [[package]] name = "gdk-pixbuf-sys" version = "0.15.10" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "140b2f5378256527150350a8346dbdb08fadc13453a7a2d73aecd5fab3c402a7" dependencies = [ "gio-sys", "glib-sys", "gobject-sys", "libc", "system-deps 6.2.2", ] [[package]] name = "gdk-sys" version = "0.15.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "32e7a08c1e8f06f4177fb7e51a777b8c1689f743a7bc11ea91d44d2226073a88" dependencies = [ "cairo-sys-rs", "gdk-pixbuf-sys", "gio-sys", "glib-sys", "gobject-sys", "libc", "pango-sys", "pkg-config", "system-deps 6.2.2", ] [[package]] name = "gdkwayland-sys" version = "0.15.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "cca49a59ad8cfdf36ef7330fe7bdfbe1d34323220cc16a0de2679ee773aee2c2" dependencies = [ "gdk-sys", "glib-sys", "gobject-sys", "libc", "pkg-config", "system-deps 6.2.2", ] [[package]] name = "gdkx11-sys" version = "0.15.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b4b7f8c7a84b407aa9b143877e267e848ff34106578b64d1e0a24bf550716178" dependencies = [ "gdk-sys", "glib-sys", "libc", "system-deps 6.2.2", "x11", ] [[package]] name = "generator" version = "0.7.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5cc16584ff22b460a382b7feec54b23d2908d858152e5739a120b949293bd74e" dependencies = [ "cc", "libc", "log", "rustversion", "windows 0.48.0", ] [[package]] name = "generic-array" version = "0.14.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a" dependencies = [ "typenum", "version_check", ] [[package]] name = "getrandom" version = "0.1.16" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce" dependencies = [ "cfg-if", "libc", "wasi 0.9.0+wasi-snapshot-preview1", ] [[package]] name = "getrandom" version = "0.2.14" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "94b22e06ecb0110981051723910cbf0b5f5e09a2062dd7663334ee79a9d1286c" dependencies = [ "cfg-if", "libc", "wasi 0.11.0+wasi-snapshot-preview1", ] [[package]] name = "gimli" version = "0.28.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253" [[package]] name = "gio" version = "0.15.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "68fdbc90312d462781a395f7a16d96a2b379bb6ef8cd6310a2df272771c4283b" dependencies = [ "bitflags 1.3.2", "futures-channel", "futures-core", "futures-io", "gio-sys", "glib", "libc", "once_cell", "thiserror", ] [[package]] name = "gio-sys" version = "0.15.10" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "32157a475271e2c4a023382e9cab31c4584ee30a97da41d3c4e9fdd605abcf8d" dependencies = [ "glib-sys", "gobject-sys", "libc", "system-deps 6.2.2", "winapi", ] [[package]] name = "glib" version = "0.15.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "edb0306fbad0ab5428b0ca674a23893db909a98582969c9b537be4ced78c505d" dependencies = [ "bitflags 1.3.2", "futures-channel", "futures-core", "futures-executor", "futures-task", "glib-macros", "glib-sys", "gobject-sys", "libc", "once_cell", "smallvec", "thiserror", ] [[package]] name = "glib-macros" version = "0.15.13" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "10c6ae9f6fa26f4fb2ac16b528d138d971ead56141de489f8111e259b9df3c4a" dependencies = [ "anyhow", "heck 0.4.1", "proc-macro-crate", "proc-macro-error", "proc-macro2", "quote", "syn 1.0.109", ] [[package]] name = "glib-sys" version = "0.15.10" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ef4b192f8e65e9cf76cbf4ea71fa8e3be4a0e18ffe3d68b8da6836974cc5bad4" dependencies = [ "libc", "system-deps 6.2.2", ] [[package]] name = "glob" version = "0.3.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b" [[package]] name = "globset" version = "0.4.14" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "57da3b9b5b85bd66f31093f8c408b90a74431672542466497dcbdfdc02034be1" dependencies = [ "aho-corasick", "bstr", "log", "regex-automata 0.4.6", "regex-syntax 0.8.3", ] [[package]] name = "gobject-sys" version = "0.15.10" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "0d57ce44246becd17153bd035ab4d32cfee096a657fc01f2231c9278378d1e0a" dependencies = [ "glib-sys", "libc", "system-deps 6.2.2", ] [[package]] name = "gtk" version = "0.15.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "92e3004a2d5d6d8b5057d2b57b3712c9529b62e82c77f25c1fecde1fd5c23bd0" dependencies = [ "atk", "bitflags 1.3.2", "cairo-rs", "field-offset", "futures-channel", "gdk", "gdk-pixbuf", "gio", "glib", "gtk-sys", "gtk3-macros", "libc", "once_cell", "pango", "pkg-config", ] [[package]] name = "gtk-sys" version = "0.15.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d5bc2f0587cba247f60246a0ca11fe25fb733eabc3de12d1965fc07efab87c84" dependencies = [ "atk-sys", "cairo-sys-rs", "gdk-pixbuf-sys", "gdk-sys", "gio-sys", "glib-sys", "gobject-sys", "libc", "pango-sys", "system-deps 6.2.2", ] [[package]] name = "gtk3-macros" version = "0.15.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "684c0456c086e8e7e9af73ec5b84e35938df394712054550e81558d21c44ab0d" dependencies = [ "anyhow", "proc-macro-crate", "proc-macro-error", "proc-macro2", "quote", "syn 1.0.109", ] [[package]] name = "hashbrown" version = "0.12.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888" [[package]] name = "hashbrown" version = "0.14.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1" [[package]] name = "heck" version = "0.3.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c" dependencies = [ "unicode-segmentation", ] [[package]] name = "heck" version = "0.4.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8" [[package]] name = "heck" version = "0.5.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea" [[package]] name = "hermit-abi" version = "0.3.9" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024" [[package]] name = "hex" version = "0.4.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70" [[package]] name = "home" version = "0.5.9" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5" dependencies = [ "windows-sys 0.52.0", ] [[package]] name = "html5ever" version = "0.26.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "bea68cab48b8459f17cf1c944c67ddc572d272d9f2b274140f223ecb1da4a3b7" dependencies = [ "log", "mac", "markup5ever", "proc-macro2", "quote", "syn 1.0.109", ] [[package]] name = "http" version = "0.2.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1" dependencies = [ "bytes", "fnv", "itoa 1.0.11", ] [[package]] name = "http" version = "1.1.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "21b9ddb458710bc376481b842f5da65cdf31522de232c1ca8146abce2a358258" dependencies = [ "bytes", "fnv", "itoa 1.0.11", ] [[package]] name = "http-range" version = "0.1.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "21dec9db110f5f872ed9699c3ecf50cf16f423502706ba5c72462e28d3157573" [[package]] name = "httparse" version = "1.9.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "0fcc0b4a115bf80b728eb8ea024ad5bd707b615bfed49e0665b6e0f86fd082d9" [[package]] name = "iana-time-zone" version = "0.1.60" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141" dependencies = [ "android_system_properties", "core-foundation-sys", "iana-time-zone-haiku", "js-sys", "wasm-bindgen", "windows-core 0.52.0", ] [[package]] name = "iana-time-zone-haiku" version = "0.1.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f" dependencies = [ "cc", ] [[package]] name = "ico" version = "0.3.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e3804960be0bb5e4edb1e1ad67afd321a9ecfd875c3e65c099468fd2717d7cae" dependencies = [ "byteorder", "png", ] [[package]] name = "ident_case" version = "1.0.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39" [[package]] name = "idna" version = "0.5.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6" dependencies = [ "unicode-bidi", "unicode-normalization", ] [[package]] name = "ignore" version = "0.4.22" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b46810df39e66e925525d6e38ce1e7f6e1d208f72dc39757880fcb66e2c58af1" dependencies = [ "crossbeam-deque", "globset", "log", "memchr", "regex-automata 0.4.6", "same-file", "walkdir", "winapi-util", ] [[package]] name = "image" version = "0.24.9" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5690139d2f55868e080017335e4b94cb7414274c74f1669c84fb5feba2c9f69d" dependencies = [ "bytemuck", "byteorder", "color_quant", "num-traits", ] [[package]] name = "indexmap" version = "1.9.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99" dependencies = [ "autocfg", "hashbrown 0.12.3", "serde", ] [[package]] name = "indexmap" version = "2.2.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26" dependencies = [ "equivalent", "hashbrown 0.14.5", "serde", ] [[package]] name = "infer" version = "0.13.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f551f8c3a39f68f986517db0d1759de85881894fdc7db798bd2a9df9cb04b7fc" dependencies = [ "cfb", ] [[package]] name = "instant" version = "0.1.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c" dependencies = [ "cfg-if", ] [[package]] name = "is_elevated" version = "0.1.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5299060ff5db63e788015dcb9525ad9b84f4fd9717ed2cbdeba5018cbf42f9b5" dependencies = [ "winapi", ] [[package]] name = "itoa" version = "0.4.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b71991ff56294aa922b450139ee08b3bfc70982c6b2c7562771375cf73542dd4" [[package]] name = "itoa" version = "1.0.11" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b" [[package]] name = "javascriptcore-rs" version = "0.16.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "bf053e7843f2812ff03ef5afe34bb9c06ffee120385caad4f6b9967fcd37d41c" dependencies = [ "bitflags 1.3.2", "glib", "javascriptcore-rs-sys", ] [[package]] name = "javascriptcore-rs-sys" version = "0.4.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "905fbb87419c5cde6e3269537e4ea7d46431f3008c5d057e915ef3f115e7793c" dependencies = [ "glib-sys", "gobject-sys", "libc", "system-deps 5.0.0", ] [[package]] name = "jni" version = "0.20.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "039022cdf4d7b1cf548d31f60ae783138e5fd42013f6271049d7df7afadef96c" dependencies = [ "cesu8", "combine", "jni-sys", "log", "thiserror", "walkdir", ] [[package]] name = "jni-sys" version = "0.3.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130" [[package]] name = "js-sys" version = "0.3.69" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d" dependencies = [ "wasm-bindgen", ] [[package]] name = "json-patch" version = "1.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "55ff1e1486799e3f64129f8ccad108b38290df9cd7015cd31bed17239f0789d6" dependencies = [ "serde", "serde_json", "thiserror", "treediff", ] [[package]] name = "kuchikiki" version = "0.8.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f29e4755b7b995046f510a7520c42b2fed58b77bd94d5a87a8eb43d2fd126da8" dependencies = [ "cssparser", "html5ever", "indexmap 1.9.3", "matches", "selectors", ] [[package]] name = "lazy_static" version = "1.4.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646" [[package]] name = "libappindicator" version = "0.7.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "db2d3cb96d092b4824cb306c9e544c856a4cb6210c1081945187f7f1924b47e8" dependencies = [ "glib", "gtk", "gtk-sys", "libappindicator-sys", "log", ] [[package]] name = "libappindicator-sys" version = "0.7.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f1b3b6681973cea8cc3bce7391e6d7d5502720b80a581c9a95c9cbaf592826aa" dependencies = [ "gtk-sys", "libloading", "once_cell", ] [[package]] name = "libc" version = "0.2.154" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ae743338b92ff9146ce83992f766a31066a91a8c84a45e0e9f21e7cf6de6d346" [[package]] name = "libloading" version = "0.7.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f" dependencies = [ "cfg-if", "winapi", ] [[package]] name = "libredox" version = "0.1.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d" dependencies = [ "bitflags 2.5.0", "libc", ] [[package]] name = "line-wrap" version = "0.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "dd1bc4d24ad230d21fb898d1116b1801d7adfc449d42026475862ab48b11e70e" [[package]] name = "linux-raw-sys" version = "0.4.13" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "01cda141df6706de531b6c46c3a33ecca755538219bd484262fa09410c13539c" [[package]] name = "lock_api" version = "0.4.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17" dependencies = [ "autocfg", "scopeguard", ] [[package]] name = "log" version = "0.4.21" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c" [[package]] name = "loom" version = "0.5.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ff50ecb28bb86013e935fb6683ab1f6d3a20016f123c76fd4c27470076ac30f5" dependencies = [ "cfg-if", "generator", "scoped-tls", "serde", "serde_json", "tracing", "tracing-subscriber", ] [[package]] name = "mac" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4" [[package]] name = "malloc_buf" version = "0.0.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb" dependencies = [ "libc", ] [[package]] name = "markup5ever" version = "0.11.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "7a2629bb1404f3d34c2e921f21fd34ba00b206124c81f65c50b43b6aaefeb016" dependencies = [ "log", "phf 0.10.1", "phf_codegen 0.10.0", "string_cache", "string_cache_codegen", "tendril", ] [[package]] name = "matchers" version = "0.1.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558" dependencies = [ "regex-automata 0.1.10", ] [[package]] name = "matches" version = "0.1.10" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "2532096657941c2fea9c289d370a250971c689d4f143798ff67113ec042024a5" [[package]] name = "memchr" version = "2.7.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6c8640c5d730cb13ebd907d8d04b52f55ac9a2eec55b440c8892f40d56c76c1d" [[package]] name = "memoffset" version = "0.9.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "488016bfae457b036d996092f6cb448677611ce4449e970ceaf42695203f218a" dependencies = [ "autocfg", ] [[package]] name = "miniz_oxide" version = "0.7.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9d811f3e15f28568be3407c8e7fdb6514c1cda3cb30683f15b6a1a1dc4ea14a7" dependencies = [ "adler", "simd-adler32", ] [[package]] name = "named-lock" version = "0.4.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "988ce9f7411c058a1d6788e60897a949dcdf5aa66202d789da045a03b4e4f406" dependencies = [ "libc", "once_cell", "parking_lot", "thiserror", "windows 0.53.0", ] [[package]] name = "native-tls" version = "0.2.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a8614eb2c83d59d1c8cc974dd3f920198647674a0a035e1af1fa58707e317466" dependencies = [ "libc", "log", "openssl", "openssl-probe", "openssl-sys", "schannel", "security-framework", "security-framework-sys", "tempfile", ] [[package]] name = "ndk" version = "0.6.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "2032c77e030ddee34a6787a64166008da93f6a352b629261d0fee232b8742dd4" dependencies = [ "bitflags 1.3.2", "jni-sys", "ndk-sys", "num_enum", "thiserror", ] [[package]] name = "ndk-context" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "27b02d87554356db9e9a873add8782d4ea6e3e58ea071a9adb9a2e8ddb884a8b" [[package]] name = "ndk-sys" version = "0.3.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6e5a6ae77c8ee183dcbbba6150e2e6b9f3f4196a7666c02a715a95692ec1fa97" dependencies = [ "jni-sys", ] [[package]] name = "new_debug_unreachable" version = "1.0.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "650eef8c711430f1a879fdd01d4745a7deea475becfb90269c06775983bbf086" [[package]] name = "nodrop" version = "0.1.14" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb" [[package]] name = "ntapi" version = "0.4.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e8a3895c6391c39d7fe7ebc444a87eb2991b2a0bc718fdabd071eec617fc68e4" dependencies = [ "winapi", ] [[package]] name = "nu-ansi-term" version = "0.46.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84" dependencies = [ "overload", "winapi", ] [[package]] name = "num-conv" version = "0.1.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9" [[package]] name = "num-traits" version = "0.2.18" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "da0df0e5185db44f69b44f26786fe401b6c293d1907744beaa7fa62b2e5a517a" dependencies = [ "autocfg", ] [[package]] name = "num_cpus" version = "1.16.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43" dependencies = [ "hermit-abi", "libc", ] [[package]] name = "num_enum" version = "0.5.11" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1f646caf906c20226733ed5b1374287eb97e3c2a5c227ce668c1f2ce20ae57c9" dependencies = [ "num_enum_derive", ] [[package]] name = "num_enum_derive" version = "0.5.11" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "dcbff9bc912032c62bf65ef1d5aea88983b420f4f839db1e9b0c281a25c9c799" dependencies = [ "proc-macro-crate", "proc-macro2", "quote", "syn 1.0.109", ] [[package]] name = "objc" version = "0.2.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1" dependencies = [ "malloc_buf", "objc_exception", ] [[package]] name = "objc-foundation" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1add1b659e36c9607c7aab864a76c7a4c2760cd0cd2e120f3fb8b952c7e22bf9" dependencies = [ "block", "objc", "objc_id", ] [[package]] name = "objc_exception" version = "0.1.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4" dependencies = [ "cc", ] [[package]] name = "objc_id" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c92d4ddb4bd7b50d730c215ff871754d0da6b2178849f8a2a2ab69712d0c073b" dependencies = [ "objc", ] [[package]] name = "object" version = "0.32.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441" dependencies = [ "memchr", ] [[package]] name = "once_cell" version = "1.19.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92" [[package]] name = "open" version = "3.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "2078c0039e6a54a0c42c28faa984e115fb4c2d5bf2208f77d1961002df8576f8" dependencies = [ "pathdiff", "windows-sys 0.42.0", ] [[package]] name = "openssl" version = "0.10.66" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9529f4786b70a3e8c61e11179af17ab6188ad8d0ded78c5529441ed39d4bd9c1" dependencies = [ "bitflags 2.5.0", "cfg-if", "foreign-types", "libc", "once_cell", "openssl-macros", "openssl-sys", ] [[package]] name = "openssl-macros" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c" dependencies = [ "proc-macro2", "quote", "syn 2.0.60", ] [[package]] name = "openssl-probe" version = "0.1.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf" [[package]] name = "openssl-sys" version = "0.9.103" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "7f9e8deee91df40a943c71b917e5874b951d32a802526c85721ce3b776c929d6" dependencies = [ "cc", "libc", "pkg-config", "vcpkg", ] [[package]] name = "overload" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39" [[package]] name = "pango" version = "0.15.10" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "22e4045548659aee5313bde6c582b0d83a627b7904dd20dc2d9ef0895d414e4f" dependencies = [ "bitflags 1.3.2", "glib", "libc", "once_cell", "pango-sys", ] [[package]] name = "pango-sys" version = "0.15.10" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d2a00081cde4661982ed91d80ef437c20eacaf6aa1a5962c0279ae194662c3aa" dependencies = [ "glib-sys", "gobject-sys", "libc", "system-deps 6.2.2", ] [[package]] name = "parking_lot" version = "0.12.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "7e4af0ca4f6caed20e900d564c242b8e5d4903fdacf31d3daf527b66fe6f42fb" dependencies = [ "lock_api", "parking_lot_core", ] [[package]] name = "parking_lot_core" version = "0.9.10" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8" dependencies = [ "cfg-if", "libc", "redox_syscall 0.5.1", "smallvec", "windows-targets 0.52.5", ] [[package]] name = "pathdiff" version = "0.2.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8835116a5c179084a830efb3adc117ab007512b535bc1a21c991d3b32a6b44dd" [[package]] name = "pengu-loader" version = "1.2.0" dependencies = [ "auto-launch", "base64 0.22.0", "is_elevated", "libc", "named-lock", "native-tls", "objc", "runas", "serde", "serde_json", "sysinfo", "tauri", "tauri-build", "tungstenite", "winreg 0.52.0", ] [[package]] name = "percent-encoding" version = "2.3.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e" [[package]] name = "phf" version = "0.8.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3dfb61232e34fcb633f43d12c58f83c1df82962dcdfa565a4e866ffc17dafe12" dependencies = [ "phf_macros 0.8.0", "phf_shared 0.8.0", "proc-macro-hack", ] [[package]] name = "phf" version = "0.10.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "fabbf1ead8a5bcbc20f5f8b939ee3f5b0f6f281b6ad3468b84656b658b455259" dependencies = [ "phf_shared 0.10.0", ] [[package]] name = "phf" version = "0.11.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ade2d8b8f33c7333b51bcf0428d37e217e9f32192ae4772156f65063b8ce03dc" dependencies = [ "phf_macros 0.11.2", "phf_shared 0.11.2", ] [[package]] name = "phf_codegen" version = "0.8.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "cbffee61585b0411840d3ece935cce9cb6321f01c45477d30066498cd5e1a815" dependencies = [ "phf_generator 0.8.0", "phf_shared 0.8.0", ] [[package]] name = "phf_codegen" version = "0.10.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4fb1c3a8bc4dd4e5cfce29b44ffc14bedd2ee294559a294e2a4d4c9e9a6a13cd" dependencies = [ "phf_generator 0.10.0", "phf_shared 0.10.0", ] [[package]] name = "phf_generator" version = "0.8.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "17367f0cc86f2d25802b2c26ee58a7b23faeccf78a396094c13dced0d0182526" dependencies = [ "phf_shared 0.8.0", "rand 0.7.3", ] [[package]] name = "phf_generator" version = "0.10.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5d5285893bb5eb82e6aaf5d59ee909a06a16737a8970984dd7746ba9283498d6" dependencies = [ "phf_shared 0.10.0", "rand 0.8.5", ] [[package]] name = "phf_generator" version = "0.11.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "48e4cc64c2ad9ebe670cb8fd69dd50ae301650392e81c05f9bfcb2d5bdbc24b0" dependencies = [ "phf_shared 0.11.2", "rand 0.8.5", ] [[package]] name = "phf_macros" version = "0.8.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "7f6fde18ff429ffc8fe78e2bf7f8b7a5a5a6e2a8b58bc5a9ac69198bbda9189c" dependencies = [ "phf_generator 0.8.0", "phf_shared 0.8.0", "proc-macro-hack", "proc-macro2", "quote", "syn 1.0.109", ] [[package]] name = "phf_macros" version = "0.11.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3444646e286606587e49f3bcf1679b8cef1dc2c5ecc29ddacaffc305180d464b" dependencies = [ "phf_generator 0.11.2", "phf_shared 0.11.2", "proc-macro2", "quote", "syn 2.0.60", ] [[package]] name = "phf_shared" version = "0.8.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c00cf8b9eafe68dde5e9eaa2cef8ee84a9336a47d566ec55ca16589633b65af7" dependencies = [ "siphasher", ] [[package]] name = "phf_shared" version = "0.10.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b6796ad771acdc0123d2a88dc428b5e38ef24456743ddb1744ed628f9815c096" dependencies = [ "siphasher", ] [[package]] name = "phf_shared" version = "0.11.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "90fcb95eef784c2ac79119d1dd819e162b5da872ce6f3c3abe1e8ca1c082f72b" dependencies = [ "siphasher", ] [[package]] name = "pin-project-lite" version = "0.2.14" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02" [[package]] name = "pin-utils" version = "0.1.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184" [[package]] name = "pkg-config" version = "0.3.30" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec" [[package]] name = "plist" version = "1.6.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d9d34169e64b3c7a80c8621a48adaf44e0cf62c78a9b25dd9dd35f1881a17cf9" dependencies = [ "base64 0.21.7", "indexmap 2.2.6", "line-wrap", "quick-xml", "serde", "time", ] [[package]] name = "png" version = "0.17.13" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "06e4b0d3d1312775e782c86c91a111aa1f910cbb65e1337f9975b5f9a554b5e1" dependencies = [ "bitflags 1.3.2", "crc32fast", "fdeflate", "flate2", "miniz_oxide", ] [[package]] name = "powerfmt" version = "0.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391" [[package]] name = "ppv-lite86" version = "0.2.17" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de" [[package]] name = "precomputed-hash" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c" [[package]] name = "proc-macro-crate" version = "1.3.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919" dependencies = [ "once_cell", "toml_edit 0.19.15", ] [[package]] name = "proc-macro-error" version = "1.0.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c" dependencies = [ "proc-macro-error-attr", "proc-macro2", "quote", "syn 1.0.109", "version_check", ] [[package]] name = "proc-macro-error-attr" version = "1.0.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869" dependencies = [ "proc-macro2", "quote", "version_check", ] [[package]] name = "proc-macro-hack" version = "0.5.20+deprecated" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "dc375e1527247fe1a97d8b7156678dfe7c1af2fc075c9a4db3690ecd2a148068" [[package]] name = "proc-macro2" version = "1.0.81" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3d1597b0c024618f09a9c3b8655b7e430397a36d23fdafec26d6965e9eec3eba" dependencies = [ "unicode-ident", ] [[package]] name = "quick-xml" version = "0.31.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1004a344b30a54e2ee58d66a71b32d2db2feb0a31f9a2d302bf0536f15de2a33" dependencies = [ "memchr", ] [[package]] name = "quote" version = "1.0.36" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7" dependencies = [ "proc-macro2", ] [[package]] name = "rand" version = "0.7.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03" dependencies = [ "getrandom 0.1.16", "libc", "rand_chacha 0.2.2", "rand_core 0.5.1", "rand_hc", "rand_pcg", ] [[package]] name = "rand" version = "0.8.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404" dependencies = [ "libc", "rand_chacha 0.3.1", "rand_core 0.6.4", ] [[package]] name = "rand_chacha" version = "0.2.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402" dependencies = [ "ppv-lite86", "rand_core 0.5.1", ] [[package]] name = "rand_chacha" version = "0.3.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88" dependencies = [ "ppv-lite86", "rand_core 0.6.4", ] [[package]] name = "rand_core" version = "0.5.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19" dependencies = [ "getrandom 0.1.16", ] [[package]] name = "rand_core" version = "0.6.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c" dependencies = [ "getrandom 0.2.14", ] [[package]] name = "rand_hc" version = "0.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c" dependencies = [ "rand_core 0.5.1", ] [[package]] name = "rand_pcg" version = "0.2.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "16abd0c1b639e9eb4d7c50c0b8100b0d0f849be2349829c740fe8e6eb4816429" dependencies = [ "rand_core 0.5.1", ] [[package]] name = "raw-window-handle" version = "0.5.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f2ff9a1f06a88b01621b7ae906ef0211290d1c8a168a15542486a8f61c0833b9" [[package]] name = "redox_syscall" version = "0.4.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa" dependencies = [ "bitflags 1.3.2", ] [[package]] name = "redox_syscall" version = "0.5.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "469052894dcb553421e483e4209ee581a45100d31b4018de03e5a7ad86374a7e" dependencies = [ "bitflags 2.5.0", ] [[package]] name = "redox_users" version = "0.4.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "bd283d9651eeda4b2a83a43c1c91b266c40fd76ecd39a50a8c630ae69dc72891" dependencies = [ "getrandom 0.2.14", "libredox", "thiserror", ] [[package]] name = "regex" version = "1.10.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c" dependencies = [ "aho-corasick", "memchr", "regex-automata 0.4.6", "regex-syntax 0.8.3", ] [[package]] name = "regex-automata" version = "0.1.10" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132" dependencies = [ "regex-syntax 0.6.29", ] [[package]] name = "regex-automata" version = "0.4.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea" dependencies = [ "aho-corasick", "memchr", "regex-syntax 0.8.3", ] [[package]] name = "regex-syntax" version = "0.6.29" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1" [[package]] name = "regex-syntax" version = "0.8.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56" [[package]] name = "rfd" version = "0.10.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "0149778bd99b6959285b0933288206090c50e2327f47a9c463bfdbf45c8823ea" dependencies = [ "block", "dispatch", "glib-sys", "gobject-sys", "gtk-sys", "js-sys", "lazy_static", "log", "objc", "objc-foundation", "objc_id", "raw-window-handle", "wasm-bindgen", "wasm-bindgen-futures", "web-sys", "windows 0.37.0", ] [[package]] name = "runas" version = "1.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b96d6b6c505282b007a9b009f2aa38b2fd0359b81a0430ceacc60f69ade4c6a0" dependencies = [ "libc", "security-framework-sys", "which", "windows-sys 0.48.0", ] [[package]] name = "rustc-demangle" version = "0.1.23" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76" [[package]] name = "rustc_version" version = "0.4.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366" dependencies = [ "semver", ] [[package]] name = "rustix" version = "0.38.34" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f" dependencies = [ "bitflags 2.5.0", "errno", "libc", "linux-raw-sys", "windows-sys 0.52.0", ] [[package]] name = "rustversion" version = "1.0.15" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "80af6f9131f277a45a3fba6ce8e2258037bb0477a67e610d3c1fe046ab31de47" [[package]] name = "ryu" version = "1.0.17" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e86697c916019a8588c99b5fac3cead74ec0b4b819707a682fd4d23fa0ce1ba1" [[package]] name = "same-file" version = "1.0.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502" dependencies = [ "winapi-util", ] [[package]] name = "schannel" version = "0.1.23" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "fbc91545643bcf3a0bbb6569265615222618bdf33ce4ffbbd13c4bbd4c093534" dependencies = [ "windows-sys 0.52.0", ] [[package]] name = "scoped-tls" version = "1.0.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294" [[package]] name = "scopeguard" version = "1.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49" [[package]] name = "security-framework" version = "2.11.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c627723fd09706bacdb5cf41499e95098555af3c3c29d014dc3c458ef6be11c0" dependencies = [ "bitflags 2.5.0", "core-foundation", "core-foundation-sys", "libc", "security-framework-sys", ] [[package]] name = "security-framework-sys" version = "2.11.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "317936bbbd05227752583946b9e66d7ce3b489f84e11a94a510b4437fef407d7" dependencies = [ "core-foundation-sys", "libc", ] [[package]] name = "selectors" version = "0.22.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "df320f1889ac4ba6bc0cdc9c9af7af4bd64bb927bccdf32d81140dc1f9be12fe" dependencies = [ "bitflags 1.3.2", "cssparser", "derive_more", "fxhash", "log", "matches", "phf 0.8.0", "phf_codegen 0.8.0", "precomputed-hash", "servo_arc", "smallvec", "thin-slice", ] [[package]] name = "semver" version = "1.0.22" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "92d43fe69e652f3df9bdc2b85b2854a0825b86e4fb76bc44d945137d053639ca" dependencies = [ "serde", ] [[package]] name = "serde" version = "1.0.199" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "0c9f6e76df036c77cd94996771fb40db98187f096dd0b9af39c6c6e452ba966a" dependencies = [ "serde_derive", ] [[package]] name = "serde_derive" version = "1.0.199" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "11bd257a6541e141e42ca6d24ae26f7714887b47e89aa739099104c7e4d3b7fc" dependencies = [ "proc-macro2", "quote", "syn 2.0.60", ] [[package]] name = "serde_json" version = "1.0.116" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3e17db7126d17feb94eb3fad46bf1a96b034e8aacbc2e775fe81505f8b0b2813" dependencies = [ "indexmap 2.2.6", "itoa 1.0.11", "ryu", "serde", ] [[package]] name = "serde_repr" version = "0.1.19" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6c64451ba24fc7a6a2d60fc75dd9c83c90903b19028d4eff35e88fc1e86564e9" dependencies = [ "proc-macro2", "quote", "syn 2.0.60", ] [[package]] name = "serde_spanned" version = "0.6.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "eb3622f419d1296904700073ea6cc23ad690adbd66f13ea683df73298736f0c1" dependencies = [ "serde", ] [[package]] name = "serde_with" version = "3.8.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "0ad483d2ab0149d5a5ebcd9972a3852711e0153d863bf5a5d0391d28883c4a20" dependencies = [ "base64 0.22.0", "chrono", "hex", "indexmap 1.9.3", "indexmap 2.2.6", "serde", "serde_derive", "serde_json", "serde_with_macros", "time", ] [[package]] name = "serde_with_macros" version = "3.8.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "65569b702f41443e8bc8bbb1c5779bd0450bbe723b56198980e80ec45780bce2" dependencies = [ "darling", "proc-macro2", "quote", "syn 2.0.60", ] [[package]] name = "serialize-to-javascript" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c9823f2d3b6a81d98228151fdeaf848206a7855a7a042bbf9bf870449a66cafb" dependencies = [ "serde", "serde_json", "serialize-to-javascript-impl", ] [[package]] name = "serialize-to-javascript-impl" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "74064874e9f6a15f04c1f3cb627902d0e6b410abbf36668afa873c61889f1763" dependencies = [ "proc-macro2", "quote", "syn 1.0.109", ] [[package]] name = "servo_arc" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d98238b800e0d1576d8b6e3de32827c2d74bee68bb97748dcf5071fb53965432" dependencies = [ "nodrop", "stable_deref_trait", ] [[package]] name = "sha1" version = "0.10.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba" dependencies = [ "cfg-if", "cpufeatures", "digest", ] [[package]] name = "sha2" version = "0.10.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8" dependencies = [ "cfg-if", "cpufeatures", "digest", ] [[package]] name = "sharded-slab" version = "0.1.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6" dependencies = [ "lazy_static", ] [[package]] name = "simd-adler32" version = "0.3.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe" [[package]] name = "siphasher" version = "0.3.11" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d" [[package]] name = "slab" version = "0.4.9" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67" dependencies = [ "autocfg", ] [[package]] name = "smallvec" version = "1.13.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67" [[package]] name = "soup2" version = "0.2.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b2b4d76501d8ba387cf0fefbe055c3e0a59891d09f0f995ae4e4b16f6b60f3c0" dependencies = [ "bitflags 1.3.2", "gio", "glib", "libc", "once_cell", "soup2-sys", ] [[package]] name = "soup2-sys" version = "0.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "009ef427103fcb17f802871647a7fa6c60cbb654b4c4e4c0ac60a31c5f6dc9cf" dependencies = [ "bitflags 1.3.2", "gio-sys", "glib-sys", "gobject-sys", "libc", "system-deps 5.0.0", ] [[package]] name = "stable_deref_trait" version = "1.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3" [[package]] name = "state" version = "0.5.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "dbe866e1e51e8260c9eed836a042a5e7f6726bb2b411dffeaa712e19c388f23b" dependencies = [ "loom", ] [[package]] name = "string_cache" version = "0.8.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f91138e76242f575eb1d3b38b4f1362f10d3a43f47d182a5b359af488a02293b" dependencies = [ "new_debug_unreachable", "once_cell", "parking_lot", "phf_shared 0.10.0", "precomputed-hash", "serde", ] [[package]] name = "string_cache_codegen" version = "0.5.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6bb30289b722be4ff74a408c3cc27edeaad656e06cb1fe8fa9231fa59c728988" dependencies = [ "phf_generator 0.10.0", "phf_shared 0.10.0", "proc-macro2", "quote", ] [[package]] name = "strsim" version = "0.10.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623" [[package]] name = "syn" version = "1.0.109" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237" dependencies = [ "proc-macro2", "quote", "unicode-ident", ] [[package]] name = "syn" version = "2.0.60" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "909518bc7b1c9b779f1bbf07f2929d35af9f0f37e47c6e9ef7f9dddc1e1821f3" dependencies = [ "proc-macro2", "quote", "unicode-ident", ] [[package]] name = "sysinfo" version = "0.31.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d4115055da5f572fff541dd0c4e61b0262977f453cc9fe04be83aba25a89bdab" dependencies = [ "core-foundation-sys", "libc", "memchr", "ntapi", "windows 0.57.0", ] [[package]] name = "system-deps" version = "5.0.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "18db855554db7bd0e73e06cf7ba3df39f97812cb11d3f75e71c39bf45171797e" dependencies = [ "cfg-expr 0.9.1", "heck 0.3.3", "pkg-config", "toml 0.5.11", "version-compare 0.0.11", ] [[package]] name = "system-deps" version = "6.2.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a3e535eb8dded36d55ec13eddacd30dec501792ff23a0b1682c38601b8cf2349" dependencies = [ "cfg-expr 0.15.8", "heck 0.5.0", "pkg-config", "toml 0.8.12", "version-compare 0.2.0", ] [[package]] name = "tao" version = "0.16.9" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "575c856fc21e551074869dcfaad8f706412bd5b803dfa0fbf6881c4ff4bfafab" dependencies = [ "bitflags 1.3.2", "cairo-rs", "cc", "cocoa", "core-foundation", "core-graphics", "crossbeam-channel", "dirs-next", "dispatch", "gdk", "gdk-pixbuf", "gdk-sys", "gdkwayland-sys", "gdkx11-sys", "gio", "glib", "glib-sys", "gtk", "image", "instant", "jni", "lazy_static", "libappindicator", "libc", "log", "ndk", "ndk-context", "ndk-sys", "objc", "once_cell", "parking_lot", "png", "raw-window-handle", "scopeguard", "serde", "tao-macros", "unicode-segmentation", "uuid", "windows 0.39.0", "windows-implement 0.39.0", "x11-dl", ] [[package]] name = "tao-macros" version = "0.1.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ec114582505d158b669b136e6851f85840c109819d77c42bb7c0709f727d18c2" dependencies = [ "proc-macro2", "quote", "syn 1.0.109", ] [[package]] name = "tar" version = "0.4.40" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b16afcea1f22891c49a00c751c7b63b2233284064f11a200fc624137c51e2ddb" dependencies = [ "filetime", "libc", "xattr", ] [[package]] name = "target-lexicon" version = "0.12.14" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e1fc403891a21bcfb7c37834ba66a547a8f402146eba7265b5a6d88059c9ff2f" [[package]] name = "tauri" version = "1.6.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "047aefcc7721bfb8024a9bc39d4719112262610502de7a224fa62c4570cd78d4" dependencies = [ "anyhow", "cocoa", "dirs-next", "dunce", "embed_plist", "encoding_rs", "flate2", "futures-util", "glib", "glob", "gtk", "heck 0.5.0", "http 0.2.12", "ignore", "objc", "once_cell", "open", "percent-encoding", "rand 0.8.5", "raw-window-handle", "regex", "rfd", "semver", "serde", "serde_json", "serde_repr", "serialize-to-javascript", "state", "tar", "tauri-macros", "tauri-runtime", "tauri-runtime-wry", "tauri-utils", "tempfile", "thiserror", "tokio", "url", "uuid", "webkit2gtk", "webview2-com", "windows 0.39.0", ] [[package]] name = "tauri-build" version = "1.5.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e9914a4715e0b75d9f387a285c7e26b5bbfeb1249ad9f842675a82481565c532" dependencies = [ "anyhow", "cargo_toml", "dirs-next", "heck 0.4.1", "json-patch", "semver", "serde", "serde_json", "tauri-utils", "tauri-winres", "walkdir", ] [[package]] name = "tauri-codegen" version = "1.4.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a1554c5857f65dbc377cefb6b97c8ac77b1cb2a90d30d3448114d5d6b48a77fc" dependencies = [ "base64 0.21.7", "brotli", "ico", "json-patch", "plist", "png", "proc-macro2", "quote", "regex", "semver", "serde", "serde_json", "sha2", "tauri-utils", "thiserror", "time", "uuid", "walkdir", ] [[package]] name = "tauri-macros" version = "1.4.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "277abf361a3a6993ec16bcbb179de0d6518009b851090a01adfea12ac89fa875" dependencies = [ "heck 0.4.1", "proc-macro2", "quote", "syn 1.0.109", "tauri-codegen", "tauri-utils", ] [[package]] name = "tauri-runtime" version = "0.14.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "cf2d0652aa2891ff3e9caa2401405257ea29ab8372cce01f186a5825f1bd0e76" dependencies = [ "gtk", "http 0.2.12", "http-range", "rand 0.8.5", "raw-window-handle", "serde", "serde_json", "tauri-utils", "thiserror", "url", "uuid", "webview2-com", "windows 0.39.0", ] [[package]] name = "tauri-runtime-wry" version = "0.14.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "067c56fc153b3caf406d7cd6de4486c80d1d66c0f414f39e94cb2f5543f6445f" dependencies = [ "cocoa", "gtk", "percent-encoding", "rand 0.8.5", "raw-window-handle", "tauri-runtime", "tauri-utils", "uuid", "webkit2gtk", "webview2-com", "windows 0.39.0", "wry", ] [[package]] name = "tauri-utils" version = "1.5.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "75ad0bbb31fccd1f4c56275d0a5c3abdf1f59999f72cb4ef8b79b4ed42082a21" dependencies = [ "brotli", "ctor", "dunce", "glob", "heck 0.4.1", "html5ever", "infer", "json-patch", "kuchikiki", "log", "memchr", "phf 0.11.2", "proc-macro2", "quote", "semver", "serde", "serde_json", "serde_with", "thiserror", "url", "walkdir", "windows-version", ] [[package]] name = "tauri-winres" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5993dc129e544393574288923d1ec447c857f3f644187f4fbf7d9a875fbfc4fb" dependencies = [ "embed-resource", "toml 0.7.8", ] [[package]] name = "tempfile" version = "3.10.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1" dependencies = [ "cfg-if", "fastrand", "rustix", "windows-sys 0.52.0", ] [[package]] name = "tendril" version = "0.4.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d24a120c5fc464a3458240ee02c299ebcb9d67b5249c8848b09d639dca8d7bb0" dependencies = [ "futf", "mac", "utf-8", ] [[package]] name = "thin-slice" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8eaa81235c7058867fa8c0e7314f33dcce9c215f535d1913822a2b3f5e289f3c" [[package]] name = "thiserror" version = "1.0.59" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f0126ad08bff79f29fc3ae6a55cc72352056dfff61e3ff8bb7129476d44b23aa" dependencies = [ "thiserror-impl", ] [[package]] name = "thiserror-impl" version = "1.0.59" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d1cd413b5d558b4c5bf3680e324a6fa5014e7b7c067a51e69dbdf47eb7148b66" dependencies = [ "proc-macro2", "quote", "syn 2.0.60", ] [[package]] name = "thread_local" version = "1.1.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c" dependencies = [ "cfg-if", "once_cell", ] [[package]] name = "time" version = "0.3.36" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5dfd88e563464686c916c7e46e623e520ddc6d79fa6641390f2e3fa86e83e885" dependencies = [ "deranged", "itoa 1.0.11", "num-conv", "powerfmt", "serde", "time-core", "time-macros", ] [[package]] name = "time-core" version = "0.1.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3" [[package]] name = "time-macros" version = "0.2.18" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3f252a68540fde3a3877aeea552b832b40ab9a69e318efd078774a01ddee1ccf" dependencies = [ "num-conv", "time-core", ] [[package]] name = "tinyvec" version = "1.6.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50" dependencies = [ "tinyvec_macros", ] [[package]] name = "tinyvec_macros" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20" [[package]] name = "tokio" version = "1.37.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1adbebffeca75fcfd058afa480fb6c0b81e165a0323f9c9d39c9697e37c46787" dependencies = [ "backtrace", "bytes", "num_cpus", "pin-project-lite", ] [[package]] name = "toml" version = "0.5.11" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234" dependencies = [ "serde", ] [[package]] name = "toml" version = "0.7.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "dd79e69d3b627db300ff956027cc6c3798cef26d22526befdfcd12feeb6d2257" dependencies = [ "serde", "serde_spanned", "toml_datetime", "toml_edit 0.19.15", ] [[package]] name = "toml" version = "0.8.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e9dd1545e8208b4a5af1aa9bbd0b4cf7e9ea08fabc5d0a5c67fcaafa17433aa3" dependencies = [ "serde", "serde_spanned", "toml_datetime", "toml_edit 0.22.12", ] [[package]] name = "toml_datetime" version = "0.6.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1" dependencies = [ "serde", ] [[package]] name = "toml_edit" version = "0.19.15" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421" dependencies = [ "indexmap 2.2.6", "serde", "serde_spanned", "toml_datetime", "winnow 0.5.40", ] [[package]] name = "toml_edit" version = "0.22.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d3328d4f68a705b2a4498da1d580585d39a6510f98318a2cec3018a7ec61ddef" dependencies = [ "indexmap 2.2.6", "serde", "serde_spanned", "toml_datetime", "winnow 0.6.7", ] [[package]] name = "tracing" version = "0.1.40" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef" dependencies = [ "pin-project-lite", "tracing-attributes", "tracing-core", ] [[package]] name = "tracing-attributes" version = "0.1.27" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7" dependencies = [ "proc-macro2", "quote", "syn 2.0.60", ] [[package]] name = "tracing-core" version = "0.1.32" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54" dependencies = [ "once_cell", "valuable", ] [[package]] name = "tracing-log" version = "0.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3" dependencies = [ "log", "once_cell", "tracing-core", ] [[package]] name = "tracing-subscriber" version = "0.3.18" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ad0f048c97dbd9faa9b7df56362b8ebcaa52adb06b498c050d2f4e32f90a7a8b" dependencies = [ "matchers", "nu-ansi-term", "once_cell", "regex", "sharded-slab", "smallvec", "thread_local", "tracing", "tracing-core", "tracing-log", ] [[package]] name = "treediff" version = "4.0.3" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4d127780145176e2b5d16611cc25a900150e86e9fd79d3bde6ff3a37359c9cb5" dependencies = [ "serde_json", ] [[package]] name = "tungstenite" version = "0.23.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6e2e2ce1e47ed2994fd43b04c8f618008d4cabdd5ee34027cf14f9d918edd9c8" dependencies = [ "byteorder", "bytes", "data-encoding", "http 1.1.0", "httparse", "log", "native-tls", "rand 0.8.5", "sha1", "thiserror", "utf-8", ] [[package]] name = "typenum" version = "1.17.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825" [[package]] name = "unicode-bidi" version = "0.3.15" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75" [[package]] name = "unicode-ident" version = "1.0.12" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b" [[package]] name = "unicode-normalization" version = "0.1.23" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a56d1686db2308d901306f92a263857ef59ea39678a5458e7cb17f01415101f5" dependencies = [ "tinyvec", ] [[package]] name = "unicode-segmentation" version = "1.11.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202" [[package]] name = "url" version = "2.5.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "31e6302e3bb753d46e83516cae55ae196fc0c309407cf11ab35cc51a4c2a4633" dependencies = [ "form_urlencoded", "idna", "percent-encoding", "serde", ] [[package]] name = "utf-8" version = "0.7.6" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "09cc8ee72d2a9becf2f2febe0205bbed8fc6615b7cb429ad062dc7b7ddd036a9" [[package]] name = "uuid" version = "1.8.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a183cf7feeba97b4dd1c0d46788634f6221d87fa961b305bed08c851829efcc0" dependencies = [ "getrandom 0.2.14", ] [[package]] name = "valuable" version = "0.1.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d" [[package]] name = "vcpkg" version = "0.2.15" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426" [[package]] name = "version-compare" version = "0.0.11" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "1c18c859eead79d8b95d09e4678566e8d70105c4e7b251f707a03df32442661b" [[package]] name = "version-compare" version = "0.2.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "852e951cb7832cb45cb1169900d19760cfa39b82bc0ea9c0e5a14ae88411c98b" [[package]] name = "version_check" version = "0.9.4" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f" [[package]] name = "vswhom" version = "0.1.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "be979b7f07507105799e854203b470ff7c78a1639e330a58f183b5fea574608b" dependencies = [ "libc", "vswhom-sys", ] [[package]] name = "vswhom-sys" version = "0.1.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d3b17ae1f6c8a2b28506cd96d412eebf83b4a0ff2cbefeeb952f2f9dfa44ba18" dependencies = [ "cc", "libc", ] [[package]] name = "walkdir" version = "2.5.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b" dependencies = [ "same-file", "winapi-util", ] [[package]] name = "wasi" version = "0.9.0+wasi-snapshot-preview1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519" [[package]] name = "wasi" version = "0.11.0+wasi-snapshot-preview1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423" [[package]] name = "wasm-bindgen" version = "0.2.92" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8" dependencies = [ "cfg-if", "wasm-bindgen-macro", ] [[package]] name = "wasm-bindgen-backend" version = "0.2.92" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da" dependencies = [ "bumpalo", "log", "once_cell", "proc-macro2", "quote", "syn 2.0.60", "wasm-bindgen-shared", ] [[package]] name = "wasm-bindgen-futures" version = "0.4.42" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "76bc14366121efc8dbb487ab05bcc9d346b3b5ec0eaa76e46594cabbe51762c0" dependencies = [ "cfg-if", "js-sys", "wasm-bindgen", "web-sys", ] [[package]] name = "wasm-bindgen-macro" version = "0.2.92" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726" dependencies = [ "quote", "wasm-bindgen-macro-support", ] [[package]] name = "wasm-bindgen-macro-support" version = "0.2.92" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7" dependencies = [ "proc-macro2", "quote", "syn 2.0.60", "wasm-bindgen-backend", "wasm-bindgen-shared", ] [[package]] name = "wasm-bindgen-shared" version = "0.2.92" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96" [[package]] name = "web-sys" version = "0.3.69" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "77afa9a11836342370f4817622a2f0f418b134426d91a82dfb48f532d2ec13ef" dependencies = [ "js-sys", "wasm-bindgen", ] [[package]] name = "webkit2gtk" version = "0.18.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b8f859735e4a452aeb28c6c56a852967a8a76c8eb1cc32dbf931ad28a13d6370" dependencies = [ "bitflags 1.3.2", "cairo-rs", "gdk", "gdk-sys", "gio", "gio-sys", "glib", "glib-sys", "gobject-sys", "gtk", "gtk-sys", "javascriptcore-rs", "libc", "once_cell", "soup2", "webkit2gtk-sys", ] [[package]] name = "webkit2gtk-sys" version = "0.18.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4d76ca6ecc47aeba01ec61e480139dda143796abcae6f83bcddf50d6b5b1dcf3" dependencies = [ "atk-sys", "bitflags 1.3.2", "cairo-sys-rs", "gdk-pixbuf-sys", "gdk-sys", "gio-sys", "glib-sys", "gobject-sys", "gtk-sys", "javascriptcore-rs-sys", "libc", "pango-sys", "pkg-config", "soup2-sys", "system-deps 6.2.2", ] [[package]] name = "webview2-com" version = "0.19.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "b4a769c9f1a64a8734bde70caafac2b96cada12cd4aefa49196b3a386b8b4178" dependencies = [ "webview2-com-macros", "webview2-com-sys", "windows 0.39.0", "windows-implement 0.39.0", ] [[package]] name = "webview2-com-macros" version = "0.6.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "eaebe196c01691db62e9e4ca52c5ef1e4fd837dcae27dae3ada599b5a8fd05ac" dependencies = [ "proc-macro2", "quote", "syn 1.0.109", ] [[package]] name = "webview2-com-sys" version = "0.19.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "aac48ef20ddf657755fdcda8dfed2a7b4fc7e4581acce6fe9b88c3d64f29dee7" dependencies = [ "regex", "serde", "serde_json", "thiserror", "windows 0.39.0", "windows-bindgen", "windows-metadata", ] [[package]] name = "which" version = "4.4.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7" dependencies = [ "either", "home", "once_cell", "rustix", ] [[package]] name = "winapi" version = "0.3.9" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419" dependencies = [ "winapi-i686-pc-windows-gnu", "winapi-x86_64-pc-windows-gnu", ] [[package]] name = "winapi-i686-pc-windows-gnu" version = "0.4.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6" [[package]] name = "winapi-util" version = "0.1.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b" dependencies = [ "windows-sys 0.52.0", ] [[package]] name = "winapi-x86_64-pc-windows-gnu" version = "0.4.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f" [[package]] name = "windows" version = "0.37.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "57b543186b344cc61c85b5aab0d2e3adf4e0f99bc076eff9aa5927bcc0b8a647" dependencies = [ "windows_aarch64_msvc 0.37.0", "windows_i686_gnu 0.37.0", "windows_i686_msvc 0.37.0", "windows_x86_64_gnu 0.37.0", "windows_x86_64_msvc 0.37.0", ] [[package]] name = "windows" version = "0.39.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f1c4bd0a50ac6020f65184721f758dba47bb9fbc2133df715ec74a237b26794a" dependencies = [ "windows-implement 0.39.0", "windows_aarch64_msvc 0.39.0", "windows_i686_gnu 0.39.0", "windows_i686_msvc 0.39.0", "windows_x86_64_gnu 0.39.0", "windows_x86_64_msvc 0.39.0", ] [[package]] name = "windows" version = "0.48.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e686886bc078bc1b0b600cac0147aadb815089b6e4da64016cbd754b6342700f" dependencies = [ "windows-targets 0.48.5", ] [[package]] name = "windows" version = "0.53.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "efc5cf48f83140dcaab716eeaea345f9e93d0018fb81162753a3f76c3397b538" dependencies = [ "windows-core 0.53.0", "windows-targets 0.52.5", ] [[package]] name = "windows" version = "0.57.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "12342cb4d8e3b046f3d80effd474a7a02447231330ef77d71daa6fbc40681143" dependencies = [ "windows-core 0.57.0", "windows-targets 0.52.5", ] [[package]] name = "windows-bindgen" version = "0.39.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "68003dbd0e38abc0fb85b939240f4bce37c43a5981d3df37ccbaaa981b47cb41" dependencies = [ "windows-metadata", "windows-tokens", ] [[package]] name = "windows-core" version = "0.52.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9" dependencies = [ "windows-targets 0.52.5", ] [[package]] name = "windows-core" version = "0.53.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9dcc5b895a6377f1ab9fa55acedab1fd5ac0db66ad1e6c7f47e28a22e446a5dd" dependencies = [ "windows-result", "windows-targets 0.52.5", ] [[package]] name = "windows-core" version = "0.57.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d2ed2439a290666cd67ecce2b0ffaad89c2a56b976b736e6ece670297897832d" dependencies = [ "windows-implement 0.57.0", "windows-interface", "windows-result", "windows-targets 0.52.5", ] [[package]] name = "windows-implement" version = "0.39.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ba01f98f509cb5dc05f4e5fc95e535f78260f15fea8fe1a8abdd08f774f1cee7" dependencies = [ "syn 1.0.109", "windows-tokens", ] [[package]] name = "windows-implement" version = "0.57.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9107ddc059d5b6fbfbffdfa7a7fe3e22a226def0b2608f72e9d552763d3e1ad7" dependencies = [ "proc-macro2", "quote", "syn 2.0.60", ] [[package]] name = "windows-interface" version = "0.57.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "29bee4b38ea3cde66011baa44dba677c432a78593e202392d1e9070cf2a7fca7" dependencies = [ "proc-macro2", "quote", "syn 2.0.60", ] [[package]] name = "windows-metadata" version = "0.39.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9ee5e275231f07c6e240d14f34e1b635bf1faa1c76c57cfd59a5cdb9848e4278" [[package]] name = "windows-result" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "749f0da9cc72d82e600d8d2e44cadd0b9eedb9038f71a1c58556ac1c5791813b" dependencies = [ "windows-targets 0.52.5", ] [[package]] name = "windows-sys" version = "0.42.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7" dependencies = [ "windows_aarch64_gnullvm 0.42.2", "windows_aarch64_msvc 0.42.2", "windows_i686_gnu 0.42.2", "windows_i686_msvc 0.42.2", "windows_x86_64_gnu 0.42.2", "windows_x86_64_gnullvm 0.42.2", "windows_x86_64_msvc 0.42.2", ] [[package]] name = "windows-sys" version = "0.48.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9" dependencies = [ "windows-targets 0.48.5", ] [[package]] name = "windows-sys" version = "0.52.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d" dependencies = [ "windows-targets 0.52.5", ] [[package]] name = "windows-targets" version = "0.48.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c" dependencies = [ "windows_aarch64_gnullvm 0.48.5", "windows_aarch64_msvc 0.48.5", "windows_i686_gnu 0.48.5", "windows_i686_msvc 0.48.5", "windows_x86_64_gnu 0.48.5", "windows_x86_64_gnullvm 0.48.5", "windows_x86_64_msvc 0.48.5", ] [[package]] name = "windows-targets" version = "0.52.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb" dependencies = [ "windows_aarch64_gnullvm 0.52.5", "windows_aarch64_msvc 0.52.5", "windows_i686_gnu 0.52.5", "windows_i686_gnullvm", "windows_i686_msvc 0.52.5", "windows_x86_64_gnu 0.52.5", "windows_x86_64_gnullvm 0.52.5", "windows_x86_64_msvc 0.52.5", ] [[package]] name = "windows-tokens" version = "0.39.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f838de2fe15fe6bac988e74b798f26499a8b21a9d97edec321e79b28d1d7f597" [[package]] name = "windows-version" version = "0.1.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6998aa457c9ba8ff2fb9f13e9d2a930dabcea28f1d0ab94d687d8b3654844515" dependencies = [ "windows-targets 0.52.5", ] [[package]] name = "windows_aarch64_gnullvm" version = "0.42.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8" [[package]] name = "windows_aarch64_gnullvm" version = "0.48.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8" [[package]] name = "windows_aarch64_gnullvm" version = "0.52.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263" [[package]] name = "windows_aarch64_msvc" version = "0.37.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "2623277cb2d1c216ba3b578c0f3cf9cdebeddb6e66b1b218bb33596ea7769c3a" [[package]] name = "windows_aarch64_msvc" version = "0.39.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ec7711666096bd4096ffa835238905bb33fb87267910e154b18b44eaabb340f2" [[package]] name = "windows_aarch64_msvc" version = "0.42.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43" [[package]] name = "windows_aarch64_msvc" version = "0.48.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc" [[package]] name = "windows_aarch64_msvc" version = "0.52.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6" [[package]] name = "windows_i686_gnu" version = "0.37.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "d3925fd0b0b804730d44d4b6278c50f9699703ec49bcd628020f46f4ba07d9e1" [[package]] name = "windows_i686_gnu" version = "0.39.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "763fc57100a5f7042e3057e7e8d9bdd7860d330070251a73d003563a3bb49e1b" [[package]] name = "windows_i686_gnu" version = "0.42.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f" [[package]] name = "windows_i686_gnu" version = "0.48.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e" [[package]] name = "windows_i686_gnu" version = "0.52.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670" [[package]] name = "windows_i686_gnullvm" version = "0.52.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9" [[package]] name = "windows_i686_msvc" version = "0.37.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ce907ac74fe331b524c1298683efbf598bb031bc84d5e274db2083696d07c57c" [[package]] name = "windows_i686_msvc" version = "0.39.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "7bc7cbfe58828921e10a9f446fcaaf649204dcfe6c1ddd712c5eebae6bda1106" [[package]] name = "windows_i686_msvc" version = "0.42.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060" [[package]] name = "windows_i686_msvc" version = "0.48.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406" [[package]] name = "windows_i686_msvc" version = "0.52.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf" [[package]] name = "windows_x86_64_gnu" version = "0.37.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "2babfba0828f2e6b32457d5341427dcbb577ceef556273229959ac23a10af33d" [[package]] name = "windows_x86_64_gnu" version = "0.39.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "6868c165637d653ae1e8dc4d82c25d4f97dd6605eaa8d784b5c6e0ab2a252b65" [[package]] name = "windows_x86_64_gnu" version = "0.42.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36" [[package]] name = "windows_x86_64_gnu" version = "0.48.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e" [[package]] name = "windows_x86_64_gnu" version = "0.52.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9" [[package]] name = "windows_x86_64_gnullvm" version = "0.42.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3" [[package]] name = "windows_x86_64_gnullvm" version = "0.48.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc" [[package]] name = "windows_x86_64_gnullvm" version = "0.52.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596" [[package]] name = "windows_x86_64_msvc" version = "0.37.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f4dd6dc7df2d84cf7b33822ed5b86318fb1781948e9663bacd047fc9dd52259d" [[package]] name = "windows_x86_64_msvc" version = "0.39.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "5e4d40883ae9cae962787ca76ba76390ffa29214667a111db9e0a1ad8377e809" [[package]] name = "windows_x86_64_msvc" version = "0.42.2" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0" [[package]] name = "windows_x86_64_msvc" version = "0.48.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538" [[package]] name = "windows_x86_64_msvc" version = "0.52.5" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0" [[package]] name = "winnow" version = "0.5.40" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876" dependencies = [ "memchr", ] [[package]] name = "winnow" version = "0.6.7" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "14b9415ee827af173ebb3f15f9083df5a122eb93572ec28741fb153356ea2578" dependencies = [ "memchr", ] [[package]] name = "winreg" version = "0.10.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "80d0f4e272c85def139476380b12f9ac60926689dd2e01d4923222f40580869d" dependencies = [ "winapi", ] [[package]] name = "winreg" version = "0.52.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a277a57398d4bfa075df44f501a17cfdf8542d224f0d36095a2adc7aee4ef0a5" dependencies = [ "cfg-if", "windows-sys 0.48.0", ] [[package]] name = "wry" version = "0.24.8" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "a04e72739ee84a218e3dbf8625888eadc874285637003ed21ab96a1bbbb538ec" dependencies = [ "base64 0.13.1", "block", "cocoa", "core-graphics", "crossbeam-channel", "dunce", "gdk", "gio", "glib", "gtk", "html5ever", "http 0.2.12", "kuchikiki", "libc", "log", "objc", "objc_id", "once_cell", "serde", "serde_json", "sha2", "soup2", "tao", "thiserror", "url", "webkit2gtk", "webkit2gtk-sys", "webview2-com", "windows 0.39.0", "windows-implement 0.39.0", ] [[package]] name = "x11" version = "2.21.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "502da5464ccd04011667b11c435cb992822c2c0dbde1770c988480d312a0db2e" dependencies = [ "libc", "pkg-config", ] [[package]] name = "x11-dl" version = "2.21.0" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "38735924fedd5314a6e548792904ed8c6de6636285cb9fec04d5b1db85c1516f" dependencies = [ "libc", "once_cell", "pkg-config", ] [[package]] name = "xattr" version = "1.3.1" source = "registry+https://github.com/rust-lang/crates.io-index" checksum = "8da84f1a25939b27f6820d92aed108f83ff920fdf11a7b19366c27c4cda81d4f" dependencies = [ "libc", "linux-raw-sys", "rustix", ]</file><file name="loader/src-tauri/src/main.rs">// prevents additional console window windows release, remove!! #![cfg_attr(not(debug_assertions), windows_subsystem = "windows")] use named_lock::{error, namedlock}; use std::env; mod config; mod shell; #[cfg(windows)] mod windows; #[cfg(target_os = "macos")] mod macos; #[macro_export] macro_rules! dprintln { ($($arg:tt)*) =&gt; (#[cfg(debug_assertions)] println!("[d] {}", format!($($arg)*))); } pub trait custombuild { fn setup_platform(self) -&gt; self; } pub fn build_window&lt;r: tauri::runtime&gt;(app: &amp;tauri::app&lt;r&gt;) -&gt; tauri::window&lt;r&gt; { match tauri::windowbuilder::new(app, "main", tauri::windowurl::default()) .title("pengu loader") .inner_size(940.0, 560.0) .disable_file_drop_handler() .resizable(false) .maximizable(false) .center() .focused(true) { builder =&gt; { #[cfg(windows)] { builder.decorations(false) } #[cfg(target_os = "macos")] { builder.title_bar_style(tauri::titlebarstyle::overlay) } } } .build() .expect("error building main window") } fn main() -&gt; result&lt;(), error&gt; { #[cfg(windows)] windows::do_entry(); let lock = namedlock::create("989d2110-46da-4c8d-84c1-c4a42e43c424")?; let _guard = lock.try_lock()?; tauri::builder::default() .setup_platform() .plugin(config::init()) .plugin(shell::init()) .run(tauri::generate_context!()) .expect("error running tauri application"); ok(()) }</file><file name="loader/src-tauri/src/config.rs">use std::{ fs::file, io::{bufread, bufreader}, path::pathbuf, }; use tauri::{ plugin::{builder, tauriplugin}, runtime, }; /// base dir exe dir. /// dev, bin folder root project. pub fn base_dir() -&gt; pathbuf { let path = std::env::current_exe().unwrap(); let dir = path.parent().unwrap(); cfg!(debug_assertions) { return dir .parent() .unwrap() .parent() .unwrap() .parent() .unwrap() .parent() .unwrap() .join("bin"); } dir.into() } /// get core module path. pub fn core_path() -&gt; pathbuf { let mut path = base_dir().join("core"); #[cfg(windows)] path.set_extension("dll"); #[cfg(target_os = "macos")] path.set_extension("dylib"); path } /// get config path. pub fn config_path() -&gt; pathbuf { let dir = base_dir(); dir.join("config") } /// get league dir config. #[allow(dead_code)] pub fn league_dir() -&gt; option&lt;pathbuf&gt; { let ok(file) = file::open(config_path()) { let reader = bufreader::new(file); let mut league_path = string::new(); line reader.lines() { let ok(line) = line { line.trim_start().starts_with("league_dir") { let some(index) = line.find('=') { index &gt; 0 { league_path = line[(index + 1)..].trim().to_string(); break; } } break; } } } !league_path.is_empty() { some(pathbuf::from(league_path)) } else { none } } else { none } } pub fn init&lt;r: runtime&gt;() -&gt; tauriplugin&lt;r&gt; { #[tauri::command] fn get_base_dir() -&gt; string { base_dir().display().to_string() } #[tauri::command] fn get_config_path() -&gt; string { config_path().display().to_string() } #[tauri::command] fn core_exists() -&gt; bool { core_path().exists() } builder::new("config") .invoke_handler(tauri::generate_handler![ get_base_dir, get_config_path, core_exists ]) .build() }</file><file name="loader/src-tauri/src/shell.rs">use std::process::command; use tauri::{ plugin::{builder, tauriplugin}, runtime, }; #[tauri::command] fn expand_folder(path: &amp;str) { #[cfg(windows)] { let path = path.replace("/", "\\"); command::new("explorer") .args(["/expand,", &amp;path]) .spawn() .unwrap(); } #[cfg(target_os = "macos")] command::new("open").arg(path).spawn().unwrap(); } #[tauri::command] fn reveal_file(path: &amp;str) { #[cfg(windows)] { let path = path.replace("/", "\\"); command::new("explorer") .args(["/select,", &amp;path]) .spawn() .unwrap(); } #[cfg(target_os = "macos")] command::new("open").args(["-r", path]).spawn().unwrap(); } pub fn init&lt;r: runtime&gt;() -&gt; tauriplugin&lt;r&gt; { builder::new("shell") .invoke_handler(tauri::generate_handler![expand_folder, reveal_file,]) .build() }</file><file name="loader/src-tauri/src/macos/tray.rs">use tauri::{ apphandle, custommenuitem, manager, runtime, systemtray, systemtrayevent, systemtraymenu, systemtraymenuitem, }; pub fn create() -&gt; systemtray { let menu = systemtraymenu::new() .add_item(custommenuitem::new("".to_string(), "pengu loader").disabled()) .add_item(custommenuitem::new("active".to_string(), "active")) .add_native_item(systemtraymenuitem::separator) .add_item(custommenuitem::new("hide".to_string(), "show app")) .add_item(custommenuitem::new("quit".to_string(), "quit")); systemtray::new().with_menu(menu) } pub fn handle_event&lt;r: tauri::runtime&gt;(app: &amp;apphandle&lt;r&gt;, evt: systemtrayevent) { let systemtrayevent::menuitemclick { id, .. } = evt { match id.as_str() { "active" =&gt; { super::cmd_set_active(app.app_handle(), !super::cmd_is_active()); } "hide" =&gt; { let window = app.get_window("main").unwrap(); window.show().unwrap(); } "quit" =&gt; { app.exit(0); } _ =&gt; (), } } } pub fn set_active_check&lt;r: runtime&gt;(app: apphandle&lt;r&gt;, active: bool) { let menu_item = app.tray_handle().get_item("active"); _ = menu_item.set_selected(active); }</file><file name="loader/src-tauri/src/macos/dylib.rs">#![allow(deprecated)] #![allow(non_camel_case_types)] #![allow(arithmetic_overflow)] use crate::dprintln; use libc::*; use std::mem::{transmute, zeroed}; static codesig_flag: i32 = 0; const fat_magic: u32 = 0xcafebabe; const fat_cigam: u32 = 0xbebafeca; /* nxswaplong(fat_magic) */ const lc_symtab: u32 = 0x2; const lc_req_dyld: u32 = 0x80000000; const lc_code_signature: u32 = 0x1d; const lc_load_dylib: u32 = 0xc; const lc_load_weak_dylib: u32 = 0x18 | lc_req_dyld; const mh_magic: u32 = 0xfeedface; /* mach magic number */ const mh_cigam: u32 = 0xcefaedfe; /* nxswapint(mh_magic) */ const mh_magic_64: u32 = 0xfeedfacf; /* 64-bit mach magic number */ const mh_cigam_64: u32 = 0xcffaedfe; /* nxswapint(mh_magic_64) */ #[repr(c)] #[derive(clone)] struct fat_header { pub magic: u32, /* fat_magic fat_magic_64 */ pub nfat_arch: u32, /* number structs follow */ } #[repr(c)] #[derive(clone)] struct fat_arch { pub cputype: i32, /* cpu specifier (int) */ pub cpusubtype: i32, /* machine specifier (int) */ pub offset: u32, /* file offset object file */ pub size: u32, /* size object file */ pub align: u32, /* alignment power 2 */ } #[repr(c)] #[derive(clone)] struct dylib_ { pub offset: u32, /* library's path name */ pub timestamp: u32, /* library's build time stamp */ pub current_version: u32, /* library's current version number */ pub compatibility_version: u32, /* library's compatibility vers number*/ } #[repr(c)] #[derive(clone)] struct dylib_command { pub cmd: u32, /* lc_id_dylib, lc_load_{,weak_}dylib, lc_reexport_dylib */ pub cmd_size: u32, /* includes pathname string */ pub dylib: dylib_, /* library identification */ } #[repr(c)] #[derive(clone)] struct linkedit_data_command { pub cmd: u32, /* lc_code_signature, lc_segment_split_info, lc_function_starts, lc_data_in_code, lc_dylib_code_sign_drs, lc_atom_info, lc_linker_optimization_hint, lc_dyld_exports_trie, lc_dyld_chained_fixups. */ pub cmdsize: u32, /* sizeof(struct linkedit_data_command) */ pub dataoff: u32, /* file offset data __linkedit segment */ pub datasize: u32, /* file size data __linkedit segment */ } #[repr(c)] #[derive(clone)] struct symtab_command { pub cmd: u32, /* lc_symtab */ pub cmdsize: u32, /* sizeof(struct symtab_command) */ pub symoff: u32, /* symbol table offset */ pub nsyms: u32, /* number symbol table entries */ pub stroff: u32, /* string table offset */ pub strsize: u32, /* string table size bytes */ } fn is_little_endian(magic: u32) -&gt; bool { magic == fat_cigam || magic == mh_cigam_64 || magic == mh_cigam } fn swap32(x: u32, magic: u32) -&gt; u32 { is_little_endian(magic) { x.to_be() } else { x } } fn swap64(x: u64, magic: u32) -&gt; u64 { is_little_endian(magic) { x.to_be() } else { x } } fn round_up(x: u64, y: u32) -&gt; u64 { (x + (y u64) - 1) &amp; (-i64::from(y) u64) } fn absdiff(x: off_t, y: off_t) -&gt; usize { x &gt; { x usize - usize } else { usize - x usize } } type off_t = i64; const bufsize: size_t = 512; unsafe fn fbzero(f: *mut file, offset: off_t, mut len: size_t) { const zeroes: [u8; bufsize] = [0; bufsize]; fseeko(f, offset, seek_set); len != 0 { let size = std::cmp::min(len, bufsize); fwrite(zeroes.as_ptr() *const c_void, size, 1, f); len -= size; } } unsafe fn fmemmove(f: *mut file, mut dst: off_t, mut src: off_t, mut len: size_t) { static buf: [u8; bufsize] = [0; bufsize]; len != 0 { let size = std::cmp::min(len, bufsize); fseeko(f, src, seek_set); fread(transmute(buf.as_ptr()), size, 1, f); fseeko(f, dst, seek_set); fwrite(buf.as_ptr() *const c_void, size, 1, f); len -= size; src += size off_t; dst += size off_t; } } unsafe fn fpeek(ptr: *mut c_void, size: size_t, nitems: size_t, stream: *mut file) -&gt; size_t { let pos = ftello(stream); let result = fread(ptr, size, nitems, stream); fseeko(stream, pos, seek_set); return result; } unsafe fn read_load_command(f: *mut file, cmdsize: u32) -&gt; *mut c_void { let lc = malloc(cmdsize size_t); fpeek(lc, cmdsize size_t, 1, f); return lc; } unsafe fn check_load_commands( f: *mut file, mh: &amp;mut mach_header, header_offset: off_t, commands_offset: off_t, dylib_path: *const c_char, slice_size: &amp;mut off_t, cont_anyway: bool, ) -&gt; bool { fseeko(f, commands_offset, seek_set); let ncmds = swap32(mh.ncmds, mh.magic); let mut linkedit_32_pos: off_t = -1; let mut linkedit_64_pos: off_t = -1; let mut linkedit_32: segment_command = zeroed(); let mut linkedit_64: segment_command_64 = zeroed(); let mut symtab_pos: off_t = -1; let mut symtab_size: size_t = 0; 0..ncmds - 1 { let lc: load_command = zeroed(); fpeek(transmute(&amp;lc), size_of::&lt;load_command&gt;(), 1, f); let cmdsize = swap32(lc.cmdsize, mh.magic); let cmd = swap32(lc.cmd, mh.magic); match cmd { lc_code_signature =&gt; { let mut fix_header = false; == ncmds - 1 { codesig_flag == 2 { return true; } codesig_flag == 0 { dprintln!("lc_code_signature load command found. remove it?"); !cont_anyway { return true; } } let cmd: &amp;mut linkedit_data_command = transmute(read_load_command(f, cmdsize)); fbzero(f, ftello(f), cmdsize size_t); let dataoff = swap32(cmd.dataoff, mh.magic); let datasize = swap32(cmd.datasize, mh.magic); free(transmute(cmd)); let mut linkedit_fileoff: u64 = 0; let mut linkedit_filesize: u64 = 0; linkedit_32_pos != -1 { linkedit_fileoff = swap32(linkedit_32.fileoff, mh.magic) u64; linkedit_filesize = swap32(linkedit_32.filesize, mh.magic) u64; } else linkedit_64_pos != -1 { linkedit_fileoff = swap64(linkedit_64.fileoff, mh.magic); linkedit_filesize = swap64(linkedit_64.filesize, mh.magic); } else { dprintln!("warning: __linkedit segment found."); } linkedit_32_pos != -1 || linkedit_64_pos != -1 { linkedit_fileoff + linkedit_filesize != *slice_size u64 { dprintln!("warning: __linkedit segment end file, codesign work patched binary."); } else { dataoff + datasize != *slice_size u32 { dprintln!("warning: codesignature end __linkedit segment, codesign work patched binary."); } else { *slice_size -= datasize i64; //int64_t diff_size = 0; symtab_pos == -1 { dprintln!("warning: lc_symtab load command found. codesign might work patched binary."); } else { fseeko(f, symtab_pos, seek_set); let symtab: *mut symtab_command = transmute(read_load_command(f, symtab_size u32)); let strsize = swap32((*symtab).strsize, mh.magic); let diff_size: i64 = swap32((*symtab).stroff u32, mh.magic) i64 + strsize i64 - *slice_size; -0x10 &lt;= diff_size &amp;&amp; diff_size &lt;= 0 { (*symtab).strsize = swap32(strsize - diff_size u32, mh.magic); fwrite(transmute(symtab), symtab_size, 1, f); } else { dprintln!("warning: string table appear right code signature. codesign might work patched binary. {:#}", diff_size); } free(transmute(symtab)); } linkedit_filesize -= datasize u64; let linkedit_vmsize: u64 = round_up(linkedit_filesize, 0x1000); linkedit_32_pos != -1 { linkedit_32.filesize = swap32(linkedit_filesize u32, mh.magic); linkedit_32.vmsize = swap32(linkedit_vmsize u32, mh.magic); fseeko(f, linkedit_32_pos, seek_set); fwrite( transmute(&amp;linkedit_32), size_of_val(&amp;linkedit_32), 1, f, ); } else { linkedit_64.filesize = swap64(linkedit_filesize, mh.magic); linkedit_64.vmsize = swap64(linkedit_vmsize, mh.magic); fseeko(f, linkedit_64_pos, seek_set); fwrite( transmute(&amp;linkedit_64), size_of_val(&amp;linkedit_64), 1, f, ); } fix_header = true; } } } !fix_header { // truncated file, zero code signature fbzero(f, header_offset + dataoff i64, datasize size_t); } mh.ncmds = swap32(ncmds - 1, mh.magic); mh.sizeofcmds = swap32(swap32(mh.sizeofcmds, mh.magic) - cmdsize, mh.magic); return true; } else { dprintln!( "lc_code_signature last load command, remove." ); } } lc_load_dylib | lc_load_weak_dylib =&gt; { let dylib_command: *mut dylib_command = transmute(read_load_command(f, cmdsize)); let offset: u32 = (*dylib_command).dylib.offset; let name: *const c_char = transmute( transmute::&lt;_, isize&gt;(dylib_command) + swap32(offset, mh.magic) isize, ); let cmp = strcmp(name, dylib_path); free(transmute(dylib_command)); cmp == 0 { dprintln!( "binary already contains load command dylib. continue anyway?" ); !cont_anyway { return false; } } } lc_segment =&gt; { let cmd: &amp;mut segment_command = transmute(read_load_command(f, cmdsize)); strcmp(cmd.segname.as_ptr(), "__linkedit\0".as_ptr() *const i8) == 0 { linkedit_32_pos = ftello(f); linkedit_32 = *cmd; } free(transmute(cmd)); } lc_segment_64 =&gt; { let cmd: &amp;mut segment_command_64 = transmute(read_load_command(f, cmdsize)); strcmp(cmd.segname.as_ptr(), "__linkedit\0".as_ptr() *const i8) == 0 { linkedit_64_pos = ftello(f); linkedit_64 = *cmd; } free(transmute(cmd)); } lc_symtab =&gt; { symtab_pos = ftello(f); symtab_size = cmdsize usize; } _ =&gt; (), } fseeko(f, swap32(lc.cmdsize, mh.magic) i64, seek_cur); } return true; } unsafe fn insert_dylib( f: *mut file, header_offset: off_t, dylib_path: *const c_char, slice_size: &amp;mut off_t, weak: bool, cont_anyway: bool, ) -&gt; bool { fseeko(f, header_offset, seek_set); let mut mh: mach_header = std::mem::zeroed(); fread(transmute(&amp;mh), size_of::&lt;mach_header&gt;(), 1, f); mh.magic != mh_magic_64 &amp;&amp; mh.magic != mh_cigam_64 &amp;&amp; mh.magic != mh_magic &amp;&amp; mh.magic != mh_cigam { dprintln!("unknown magic: {:#x}\n", mh.magic); return false; } let commands_offset = header_offset + size_of::&lt;mach_header_64&gt;() off_t; let cont = check_load_commands( f, &amp;mut mh, header_offset, commands_offset, dylib_path, slice_size, cont_anyway, ); !cont { return true; } // even though padding 4 works x86_64, codesign like let path_padding: usize = 8; let dylib_path_len = strlen(dylib_path); let dylib_path_size = (dylib_path_len &amp; !(path_padding - 1)) + path_padding; let cmdsize: u32 = (size_of::&lt;dylib_command&gt;() + dylib_path_size) u32; let dylib_command = dylib_command { cmd: swap32( weak { lc_load_weak_dylib } else { lc_load_dylib }, mh.magic, ), cmd_size: swap32(cmdsize, mh.magic), dylib: dylib_ { offset: swap32(size_of::&lt;dylib_command&gt;() u32, mh.magic), timestamp: 0, current_version: 0, compatibility_version: 0, }, }; let mut sizeofcmds = swap32(mh.sizeofcmds, mh.magic); fseeko(f, commands_offset + sizeofcmds i64, seek_set); let space: vec&lt;u8&gt; = vec![0; cmdsize usize]; fread(transmute(space.as_ptr()), cmdsize size_t, 1, f); let mut empty = true; x &amp;space { *x != 0 { empty = false; break; } } !empty { dprintln!("it seem like enough empty space. continue anyway?"); !cont_anyway { return false; } } fseeko(f, -(cmdsize off_t), seek_cur); let dylib_path_padded = calloc(dylib_path_size, 1); memcpy(dylib_path_padded, transmute(dylib_path), dylib_path_len); fwrite(transmute(&amp;dylib_command), size_of_val(&amp;dylib_command), 1, f); fwrite(transmute(dylib_path_padded), dylib_path_size, 1, f); free(transmute(dylib_path_padded)); mh.ncmds = swap32(swap32(mh.ncmds, mh.magic) + 1, mh.magic); sizeofcmds += cmdsize; mh.sizeofcmds = swap32(sizeofcmds, mh.magic); fseeko(f, header_offset, seek_set); fwrite(transmute(&amp;mh), size_of::&lt;mach_header&gt;(), 1, f); return true; } /// /// insert `lc_load_dylib` `binary_path` load `dylib_path`, /// action break signature `binary_path`. use `lc_load_weak_dylib`, /// set `weak` true. /// pub unsafe fn insert(dylib_path: &amp;str, binary_path: &amp;str, weak: bool, cont_anyway: bool) -&gt; bool { let dylib_path = [dylib_path, "\0"].join(""); let binary_path = [binary_path, "\0"].join(""); let lc_name = weak { "lc_load_weak_dylib" } else { "lc_load_dylib" }; let f = fopen( binary_path.as_ptr() *const i8, "r+\0".as_ptr() *const i8, ); f.is_null() { dprintln!("couldn't open file {}", binary_path); return false; } let mut success = true; fseeko(f, 0, seek_end); let mut file_size = ftello(f); rewind(f); let magic: u32 = 0; fread(transmute(&amp;magic), size_of::&lt;u32&gt;(), 1, f); match magic { fat_magic | fat_cigam =&gt; { fseeko(f, 0, seek_set); let fh: fat_header = zeroed(); fread(transmute(&amp;fh), size_of::&lt;fat_header&gt;(), 1, f); let nfat_arch: u32 = swap32(fh.nfat_arch, magic); dprintln!("binary fat binary {} archs.", nfat_arch); let mut archs: vec&lt;fat_arch&gt; = vec![zeroed(); nfat_arch usize]; fread( transmute(archs.as_ptr()), size_of::&lt;fat_arch&gt;(), archs.len(), f, ); let mut fails = 0; let mut offset: off_t = 0; nfat_arch &gt; 0 { offset = swap32(archs[0].offset, magic) off_t; } 0..archs.len() { let orig_offset = swap32(archs[i].offset, magic) off_t; let orig_slice_size = swap32(archs[i].size, magic) off_t; offset = round_up(offset u64, 1 &lt;&lt; swap32(archs[i].align, magic)) off_t; orig_offset != offset { fmemmove(f, offset, orig_offset, orig_slice_size usize); fbzero( f, std::cmp::min(offset i64, orig_offset) i64 + orig_slice_size, absdiff(offset, orig_offset), ); archs[i].offset = swap32(offset u32, magic); } let mut slice_size = orig_slice_size; let r = insert_dylib( f, offset, dylib_path.as_ptr() *const i8, &amp;mut slice_size, weak, cont_anyway, ); !r { dprintln!("failed add {} arch #{}!", lc_name, + 1); fails += 1; } (slice_size &lt; orig_slice_size) &amp;&amp; (i &lt; nfat_arch usize - 1) { fbzero( f, offset + slice_size, (orig_slice_size - slice_size) usize, ); } file_size = offset i64 + slice_size; offset += slice_size; archs[i].size = swap32(slice_size u32, magic); } rewind(f); fwrite(transmute(&amp;fh), size_of::&lt;fat_header&gt;(), 1, f); fwrite( transmute(archs.as_ptr()), size_of::&lt;fat_arch&gt;(), archs.len(), f, ); // need flush truncating fflush(f); ftruncate(fileno(f), file_size); fails == 0 { dprintln!("added {} archs {}", lc_name, binary_path); } else fails == nfat_arch { dprintln!("failed add {} archs.", lc_name); success = false; } else { dprintln!( "added {} {}/{} archs {}", lc_name, nfat_arch - fails, nfat_arch, binary_path ); } } mh_magic_64 | mh_cigam_64 | mh_magic | mh_cigam =&gt; { insert_dylib( f, 0, dylib_path.as_ptr() *const i8, &amp;mut file_size, weak, cont_anyway, ) { ftruncate(fileno(f), file_size); dprintln!("added {} {}", lc_name, binary_path); } else { dprintln!("failed add {}!", lc_name); success = false; } } _ =&gt; { dprintln!("unknown magic: {:#}", magic); success = false; } } fclose(f); !success { unlink(binary_path.as_ptr() *const i8); return false; } true }</file><file name="loader/src-tauri/src/macos/utils.rs">use base64::{prelude::base64_standard, engine}; use objc::{ class, declare::classdecl, msg_send, runtime::{object, sel}, sel, sel_impl, }; use std::net::{ipaddr, ipv4addr, socketaddr}; use sysinfo::{processrefreshkind, refreshkind, system, updatekind}; /// get running riotclient's address &amp; authorization command line. pub fn get_riotclient_info() -&gt; option&lt;(socketaddr, string)&gt; { let refresh_kind = processrefreshkind::new() .with_exe(updatekind::onlyifnotset) .with_cmd(updatekind::onlyifnotset); let system = system::new_with_specifics(refreshkind::new().with_processes(refresh_kind)); let some(process) = system .processes() .values() .find(|process| process.name() == "riot client") { let cmd = process.cmd().iter().filter_map(|os_str| os_str.to_str()); let mut auth = none; let mut port = none; cmd { auth.is_none() { auth = s.strip_prefix("--remoting-auth-token="); } port.is_none() { port = s.strip_prefix("--app-port="); } auth.is_some() &amp;&amp; port.is_some() { let addr = socketaddr::new( ipaddr::v4(ipv4addr::localhost), port.unwrap().parse::&lt;u16&gt;().unwrap(), ); let token = base64_standard.encode(format!("riot:{}", auth.unwrap())); return some((addr, token)); } } } none } /// hide traffic light controls window. pub fn hide_traffic_lights(window: *mut std::ffi::c_void) { unsafe { let window: *mut object = std::mem::transmute(window); let min_button: *mut object = msg_send![window, standardwindowbutton:0]; let close_button: *mut object = msg_send![window, standardwindowbutton:1]; let max_button: *mut object = msg_send![window, standardwindowbutton:2]; let _: () = msg_send![min_button, sethidden: true]; let _: () = msg_send![close_button, sethidden: true]; let _: () = msg_send![max_button, sethidden: true]; } } /// hide window's title bar. pub fn hide_title_bar(window: *mut std::ffi::c_void) { unsafe { let window: *mut object = std::mem::transmute(window); let _: () = msg_send![window, settitlebarappearstransparent: true]; let _: () = msg_send![window, settitlevisibility: 1]; } } /// add event existing nsapplication. /// * `handle_reopen`: called user clicked dock icon. pub fn set_app_delegate_hook&lt;f&gt;(handle_reopen: f) f: fn() + send + 'static, { static mut callback: option&lt;box&lt;dyn fn() + send + 'static&gt;&gt; = none; extern "c" fn callback_reopen(_: &amp;object, _: sel, _: *mut object, visible: bool) -&gt; bool { !visible { unsafe { let some(ref callback) = callback { callback(); } } } true } unsafe { let app: *mut object = msg_send![class!(nsapplication), sharedapplication]; let old_delegate: *mut object = msg_send![app, delegate]; // extend default tao nsapplicationdelegate let some(mut decl) = classdecl::new("appdelegate", (*old_delegate).class()) { callback = some(box::new(handle_reopen)); decl.add_method( sel!(applicationshouldhandlereopen:hasvisiblewindows:), callback_reopen extern "c" fn(&amp;object, sel, *mut object, bool) -&gt; bool, ); // override let new_delegate: *mut object = msg_send![decl.register(), new]; let _: () = msg_send![app, setdelegate: new_delegate]; } } }</file><file name="loader/src-tauri/src/macos/core.rs">use std::os::unix::fs::permissionsext; use std::{path::pathbuf, process::command}; use crate::dprintln; fn get_insert_dylib() -&gt; pathbuf { crate::config::base_dir().join("insert_dylib") } fn ensure_exec_perm(path: &amp;pathbuf) { path.exists() { let metadata = std::fs::metadata(path).unwrap(); let permissions = metadata.permissions(); let current_mode = permissions.mode(); current_mode &amp; 0o111 == 0 { let mut new_permissions = permissions; new_permissions.set_mode(current_mode | 0o111); std::fs::set_permissions(path, new_permissions).unwrap(); dprintln!("added exec perm {:?}", path); } } } fn get_target_dylib_path(lol_dir: &amp;pathbuf) -&gt; pathbuf { lol_dir .join("league legends.app") .join("contents") .join("frameworks") .join("chromium embedded framework.framework") .join("libraries") .join("libegl.dylib") } fn get_backup_dylib_path(lol_dir: &amp;pathbuf) -&gt; pathbuf { let mut p = get_target_dylib_path(lol_dir); p.set_extension("dylib.bak"); p.into() } fn backup_module(lol_dir: &amp;pathbuf) { let = get_target_dylib_path(lol_dir); let = get_backup_dylib_path(lol_dir); from.exists() { _ = std::fs::copy(from, to); } } fn restore_module(lol_dir: &amp;pathbuf) { let = get_backup_dylib_path(lol_dir); let = get_target_dylib_path(lol_dir); from.exists() { _ = std::fs::copy(from.clone(), to); _ = std::fs::remove_file(from.clone()); } } pub fn install_module(lol_dir: &amp;pathbuf) -&gt; bool { backup_module(lol_dir); let insert_dylib_path = get_insert_dylib(); insert_dylib_path.exists() { dprintln!("use external insert_dylib"); ensure_exec_perm(&amp;insert_dylib_path); let ok(status) = command::new(insert_dylib_path) .arg("--all-yes") .arg("--inplace") .arg(crate::config::core_path().to_str().unwrap()) .arg(get_target_dylib_path(lol_dir).to_str().unwrap()) .status() { status.success() } else { false } } else { dprintln!("use built-in insert_dylib"); let core_path = crate::config::core_path(); let target_path = get_target_dylib_path(lol_dir); unsafe { super::dylib::insert( core_path.to_str().unwrap(), target_path.to_str().unwrap(), false, true, ) } } } pub fn uninstall_module(lol_dir: &amp;pathbuf) { restore_module(lol_dir); }</file><file name="loader/src-tauri/src/macos/socket.rs">use std::net::socketaddr; use std::net::tcpstream; use std::path::pathbuf; use std::time::duration; use native_tls::tlsconnector; use serde::{deserialize, serialize}; use serde_json::value; use tungstenite::client_tls_with_config; use tungstenite::{client::intoclientrequest, http::headervalue, connector, message}; use super::utils; use crate::dprintln; /// /// method quite simple. /// 1. get riotclient command line. /// 2. subscribe rcs websocket (wamp). /// 3. listen league client, track starts gets closing. /// /// install core module client opening uninstall closed. /// put together daemon thread follow active state app. /// /// todo: track events like client update /// const timeout: duration = duration::from_millis(200); #[derive(serialize, deserialize, debug)] struct payload(i32, string, eventdata); #[derive(serialize, deserialize, debug)] #[allow(non_snake_case)] struct eventdata { pub data: value, pub eventtype: string, pub uri: string, } fn get_lol_dir(conf: &amp;value) -&gt; option&lt;pathbuf&gt; { let some(configuration) = conf.as_object() { let some(executable) = configuration.get("executable") { let path = executable .as_str() .unwrap() .replace("/leagueclient.app/contents/macos/leagueclient", "") .replace("\"", ""); return some(pathbuf::from(path)); } } none } /// handle websocket json message. fn process_message(json: &amp;str) { let payload: payload = match serde_json::from_str(json) { ok(v) =&gt; v, _ =&gt; { return; } }; // onjsonapievent like trailing slash underscore // re-check endpoint make sure 'sessions/' slash // last part launch session id unused payload.0 == 8 &amp;&amp; payload.2.uri.starts_with("/product-session/v1/sessions/") { let some(data) = payload.2.data.as_object() { let (some(product_id), some(conf)) = (data.get("productid"), data.get("launchconfiguration")) { product_id == "league_of_legends" { let some(lol_dir) = get_lol_dir(conf) { match payload.2.eventtype.as_ref() { "create" =&gt; on_open_client(&amp;lol_dir), "delete" =&gt; on_close_client(&amp;lol_dir), _ =&gt; (), } } } } } } } /// connect rsc websocket process events synchronously. fn connect(addr: &amp;socketaddr, auth: &amp;string) -&gt; result&lt;(), std::io::error&gt; { // build request let url = format!("wss://{}", addr); let mut request = url.clone().into_client_request().unwrap(); // add auth header request.headers_mut().insert( "authorization", headervalue::from_str(&amp;format!("basic {}", auth)).unwrap(), ); // ignore certificate errors let tls = tlsconnector::from( native_tls::tlsconnector::builder() .danger_accept_invalid_certs(true) .build() .unwrap(), ); // websocket stream let tcp_stream = tcpstream::connect_timeout(addr, timeout)?; let (mut stream, _) = client_tls_with_config( request.clone(), tcp_stream, none, some(connector::nativetls(tls.clone())), ) .expect("the tls handshake never fail"); dprintln!("socket connected {}", url); _ = stream.send(message::text( // perfect endpoint "[5, \"onjsonapievent_product-session_v1_sessions\"]", )); loop { match stream.read() { ok(message::text(json)) =&gt; { json.is_empty() { // first empty string means success dprintln!("socket event subscribed"); } else { process_message(json.as_str()); } } ok(message::close(_close)) =&gt; { dprintln!("socket closed: {:?}", _close); break; } err(_e) =&gt; { dprintln!("socket error: {:?}", _e); break; } _ =&gt; {} } } ok(()) } pub fn run_daemon() { dprintln!("run socket daemon"); std::thread::spawn(|| loop { let some((addr, auth)) = utils::get_riotclient_info() { let err(_e) = connect(&amp;addr, &amp;auth) { dprintln!("socket failed connect: {:?}", _e); } } std::thread::sleep(timeout); }); } fn on_open_client(lol_dir: &amp;pathbuf) { dprintln!("on_open_client@lol_dir: {}", lol_dir.display()); super::cmd_is_active() { super::core::install_module(lol_dir); } } fn on_close_client(lol_dir: &amp;pathbuf) { dprintln!("on_close_client@lol_dir: {}", lol_dir.display()); super::core::uninstall_module(lol_dir); }</file><file name="loader/src-tauri/src/macos/startup.rs">use auto_launch::{autolaunch, autolaunchbuilder}; use tauri::{ plugin::{builder, tauriplugin}, manager, runtime, state, }; struct autolaunchmanager(autolaunch); impl autolaunchmanager { pub fn set_enable(&amp;self, enable: bool) -&gt; result&lt;(), string&gt; { enable { self.0.enable() } else { self.0.disable() } .map_err(|e| e.to_string()) } pub fn is_enabled(&amp;self) -&gt; result&lt;bool, string&gt; { self.0.is_enabled().map_err(|e| e.to_string()) } } #[tauri::command] async fn is_enabled(manager: state&lt;'_, autolaunchmanager&gt;) -&gt; result&lt;bool, string&gt; { manager.is_enabled() } #[tauri::command] async fn set_enable(manager: state&lt;'_, autolaunchmanager&gt;, enable: bool) -&gt; result&lt;(), string&gt; { manager.set_enable(enable) } pub fn init&lt;r: runtime&gt;() -&gt; tauriplugin&lt;r&gt; { builder::new("startup") .invoke_handler(tauri::generate_handler![is_enabled, set_enable]) .setup(|app| { let mut builder = autolaunchbuilder::new(); builder.set_app_name(&amp;app.package_info().name); builder.set_args(&amp;["--silent"]); builder.set_use_launch_agent(false); let exe_path = std::env::current_exe().unwrap(); builder.set_app_path(&amp;exe_path.canonicalize()?.display().to_string()); app.manage(autolaunchmanager( builder.build().map_err(|e| e.to_string())?, )); ok(()) }) .build() }</file><file name="loader/src-tauri/src/macos/webview.rs">use std::os::raw::c_void; use cocoa::{ appkit::nswindow, base::{id, nil}, }; use objc::declare::classdecl; use objc::runtime::{object, sel}; use objc::{class, msg_send}; use objc::{sel, sel_impl}; /// patch wkwebview ignore certificate errors. pub fn setup&lt;r: tauri::runtime&gt;(window: tauri::window&lt;r&gt;) { unsafe { let ns_window = window.ns_window().unwrap() id; let content_view: id = ns_window.contentview(); // wryparentwebview let subviews: id = msg_send![content_view, subviews]; let webview: id = msg_send![subviews, objectatindex: 0]; // wrywebview let cls = match classdecl::new("wknavigationdelegate2", class!(nsobject)) { some(mut cls) =&gt; { // cls.add_ivar::&lt;*mut c_void&gt;("function"); cls.add_method( sel!(webview:didreceiveauthenticationchallenge:completionhandler:), webview_did_receive_authentication_challenge extern "c" fn(&amp;object, sel, id, id, id), ); cls.register() } none =&gt; class!(wknavigationdelegate), }; let handler: id = msg_send![cls, new]; // let nav_handler_ptr = box::into_raw(box::new(nav_handler)); // (*handler).set_ivar("function", nav_handler_ptr *mut _ *mut c_void); // set delegate webview //let _: () = msg_send![webview, setnavigationdelegate: handler]; } } extern "c" fn webview_did_receive_authentication_challenge( _self: &amp;object, _cmd: sel, _webview: id, challenge: id, completion_handler: id, ) { unsafe { let name = (*_webview).class().name(); println!("klass: {}", name); } }</file><file name="loader/src-tauri/src/macos/mod.rs">use std::fs; use std::path::pathbuf; use std::sync::atomic::{atomicbool, ordering}; use tauri::{ plugin::{builder, tauriplugin}, app, apphandle, manager, runtime, }; mod core; mod dylib; mod socket; mod startup; mod tray; mod utils; static active: atomicbool = atomicbool::new(false); fn active_file_path() -&gt; pathbuf { super::config::base_dir().join("active") } fn set_active(active: bool) { active.store(active, ordering::seqcst); _ = fs::write(active_file_path(), active { "1" } else { "0" }); } #[tauri::command] pub fn cmd_is_active() -&gt; bool { active.load(ordering::seqcst) } #[tauri::command] pub fn cmd_set_active&lt;r: runtime&gt;(app: apphandle&lt;r&gt;, active: bool) { set_active(active); _ = app.emit_all("active-status", active); tray::set_active_check(app, active); } fn initialize&lt;r: runtime&gt;(app: &amp;app&lt;r&gt;) { let window = super::build_window(app); utils::hide_title_bar(window.ns_window().unwrap()); utils::hide_traffic_lights(window.ns_window().unwrap()); utils::set_app_delegate_hook(move || { window.center().unwrap(); window.show().unwrap(); }); cmd_set_active( app.app_handle(), match fs::read_to_string(active_file_path()) { ok(value) =&gt; value == "1", _ =&gt; false, }, ); socket::run_daemon(); } fn plugin&lt;r: runtime&gt;() -&gt; tauriplugin&lt;r&gt; { builder::new("macos") .invoke_handler(tauri::generate_handler![cmd_is_active, cmd_set_active,]) .build() } impl&lt;r: runtime&gt; super::custombuild tauri::builder&lt;r&gt; { fn setup_platform(self) -&gt; self { self.system_tray(tray::create()) .on_system_tray_event(tray::handle_event) .setup(|app| { initialize(app); ok(()) }) .plugin(plugin()) .plugin(startup::init()) } }</file><file name="loader/src-tauri/src/windows/utils.rs">use std::{io::error, path::pathbuf}; use winreg::{ enums::{hkey_local_machine, key_read}, regkey, }; /// check developer mode active. pub fn is_developer() -&gt; bool { let hklm = regkey::predef(hkey_local_machine); const reg_path: &amp;str = "software\\microsoft\\windows\\currentversion\\appmodelunlock"; let ok(key) = hklm.open_subkey_with_flags(reg_path, key_read) { let ok(value) = key.get_value("allowdevelopmentwithoutdevlicense") result&lt;u32, error&gt; { return value == 1; } } false } /// check running process admin. pub fn is_admin() -&gt; bool { is_elevated::is_elevated() } /// fix borderless window shadow. /// use windows_sys dependencies hell. pub fn enable_shadow(hwnd: isize) { use libc::c_void; #[repr(c)] struct margins { left: i32, right: i32, top: i32, bottom: i32, } #[link(name = "dwmapi")] extern "c" { fn dwmextendframeintoclientarea(hwnd: isize, pmarinset: *const margins) -&gt; i32; fn dwmsetwindowattribute( hwnd: isize, dwattribute: i32, pvattribute: *const c_void, cbattribute: u32, ); } unsafe { dwmsetwindowattribute(hwnd, 2, &amp;2 *const _ _, 4); let margins = margins { left: 0, right: 0, top: 1, bottom: 0, }; dwmextendframeintoclientarea(hwnd, &amp;margins); } } /// check webview2 installed not. pub fn is_webview2_installed() -&gt; bool { let hklm = regkey::predef(hkey_local_machine); const reg_key: &amp;str = r"software\wow6432node\microsoft\edgeupdate\clients\{f3017226-fe2a-4295-8bdf-00c3a9a7e4c5}"; let ok(key) = hklm.open_subkey_with_flags(reg_key, key_read) { let ok(location) = key.get_value("location") result&lt;string, error&gt; { let ok(pv) = key.get_value("pv") result&lt;string, error&gt; { let exe_path = [&amp;location, &amp;pv, "msedge.exe"].join("\\"); return pathbuf::from(exe_path).exists(); } } } false }</file><file name="loader/src-tauri/src/windows/mod_ifeo.rs">use std::io::error; use winreg::{enums::*, regkey}; use super::{activationresult, activationstage}; use crate::config; const ifeo_path: &amp;str = "software\\microsoft\\windows nt\\currentversion\\image file execution options"; const target_exe: &amp;str = "leagueclientux.exe"; /// hklm /// \ ifeo /// \ leagueclientux.exe /// + debugger = rundll32 "path\to\core.dll", entry fn extract_path(value: &amp;string) -&gt; option&lt;string&gt; { let some(start) = value.find('"') { let some(end) = value[start + 1..].find('"') { return some(value[start + 1..start + 1 + end].to_string()); } } none } fn normalize_path(path: &amp;string) -&gt; string { path.to_lowercase().replace('/', "\\") } /// debugger value ifeo target subkey. fn get_debugger_value() -&gt; string { const dll_entry: &amp;str = "#6000"; let dll_path = config::core_path(); format!("rundll32 \"{}\", {}", dll_path.display(), dll_entry) } /// check core module activated. pub fn is_activated() -&gt; bool { let hklm = regkey::predef(hkey_local_machine); let path = [ifeo_path, target_exe].join("\\"); // open lcux target let ok(key) = hklm.open_subkey_with_flags(path, key_read) { // read debugger value let ok(value) = key.get_value("debugger") result&lt;string, error&gt; { // debuger value must use rundll32 value.to_lowercase().starts_with("rundll32") { // extract path debugger value let some(debugger_path) = extract_path(&amp;value) { // compare two paths return normalize_path(&amp;debugger_path) == normalize_path( &amp;config::core_path().into_os_string().into_string().unwrap(), ); } } } } false } /// perform ifeo activation. /// requires admin rights. pub fn do_activate(active: bool) -&gt; activationresult { let hklm = regkey::predef(hkey_local_machine); let ifeo = match hklm.open_subkey_with_flags(ifeo_path, key_create_sub_key) { ok(sk) =&gt; sk, err(err) =&gt; return err((activationstage::openifeo, err.kind())), }; let lcux = match ifeo.create_subkey_with_flags(target_exe, key_set_value) { ok(subkey) =&gt; subkey.0, err(err) =&gt; return err((activationstage::createtarget, err.kind())), }; active { let value = get_debugger_value(); match lcux.set_value("debugger", &amp;value) { ok(()) =&gt; ok(()), err(err) =&gt; err((activationstage::setdebugger, err.kind())), } } else { match lcux.delete_value("debugger") { ok(()) =&gt; ok(()), err(err) =&gt; err((activationstage::deletedebugger, err.kind())), } } }</file><file name="loader/src-tauri/src/windows/mod_symlink.rs">use std::fs::read_link; use std::io::errorkind; use std::os::windows::fs::symlink_file; use std::path::pathbuf; use super::{activationresult, activationstage}; use crate::config; /// symlink filename lol folder. /// must loaded leagueclient due vanguard. /// supported d3d9.dll, dwrite.dll, version.dll. const target_fname: &amp;str = "version.dll"; /// check file path symlink not. fn is_symlink(path: &amp;pathbuf) -&gt; bool { let ok(metadata) = std::fs::symlink_metadata(path) { metadata.file_type().is_symlink() } else { false } } /// symlink path installed lol folder. fn get_symlink_path() -&gt; option&lt;pathbuf&gt; { match config::league_dir() { some(dir) =&gt; some(dir.join(target_fname).to_path_buf()), _ =&gt; none, } } /// check symlink installed not. pub fn is_activated() -&gt; bool { let some(link_path) = get_symlink_path() { link_path.exists() &amp;&amp; is_symlink(&amp;link_path) { let ok(target_path) = read_link(link_path) { // compare target path core path return target_path == config::core_path(); } } } false } /// perform symlink activation. /// requires admin rights developer mode `active` true. pub fn do_activate(active: bool) -&gt; activationresult { let some(link_path) = get_symlink_path() { active { let orig_path = crate::config::core_path(); match symlink_file(orig_path, link_path) { ok(()) =&gt; ok(()), err(err) =&gt; err((activationstage::createsymlink, err.kind())), } } else { link_path.exists() { match std::fs::remove_file(link_path) { ok(()) =&gt; ok(()), err(err) =&gt; err((activationstage::deletesymlink, err.kind())), } } else { ok(()) } } } else { err((activationstage::getleaguepath, errorkind::notfound)) } }</file><file name="loader/src-tauri/src/windows/mod.rs">use core::fmt; use std::io::errorkind; use tauri::{ plugin::{builder, tauriplugin}, runtime, }; mod mod_ifeo; mod mod_symlink; mod utils; /// enabling activation requires admin rights, /// encode result exitcode /// spawning new process. #[derive(debug, clone, copy)] enum activationstage { openifeo = 1, createtarget, setdebugger, deletedebugger, getleaguepath, createsymlink, deletesymlink, runelevated, } impl fmt::display activationstage { fn fmt(&amp;self, f: &amp;mut fmt::formatter) -&gt; fmt::result { write!(f, "{:?}", self) } } type activationresult = result&lt;(), (activationstage, errorkind)&gt;; fn result_to_string(ret: activationresult) -&gt; string { match ret { ok(()) =&gt; format!(""), err((stage, kind)) =&gt; { format!( "{} ({})", stage.to_string(), kind.to_string().replace(" ", "_") ) } } } fn encode_result(ret: activationresult) -&gt; i32 { match ret { ok(()) =&gt; 0, err((stage, kind)) =&gt; ((stage i32) &lt;&lt; 8) | (kind i32), } } fn decode_result(code: i32) -&gt; activationresult { code == 0 { ok(()) } else { let stage = unsafe { std::mem::transmute::&lt;i8, activationstage&gt;(((code &gt;&gt; 8) &amp; 0xff) i8) }; let kind = unsafe { std::mem::transmute::&lt;i8, errorkind&gt;((code &amp; 0xff) i8) }; err((stage, kind)) } } fn do_activate(symlink: bool, active: bool) -&gt; activationresult { symlink { mod_symlink::do_activate(active) } else { mod_ifeo::do_activate(active) } } #[tauri::command] fn core_is_activated(symlink: bool) -&gt; bool { symlink { mod_symlink::is_activated() } else { mod_ifeo::is_activated() } } /// activate command. #[tauri::command] fn core_do_activate(symlink: bool, active: bool) -&gt; string { // elevated process // disabling symlink // symlink devmode utils::is_admin() || (symlink &amp;&amp; !active) || (symlink &amp;&amp; utils::is_developer()) { return result_to_string(do_activate(symlink, active)); } // must spawn thread avoid uac freezing let result = std::thread::spawn(move || -&gt; activationresult { match runas::command::new(std::env::current_exe().unwrap()) .arg(if active { "--install" } else { "--uninstall" }) .arg(if symlink { "--symlink" } else { "" }) .show(false) .status() { ok(status) =&gt; { let code = status.code().unwrap_or(-1); code &lt; 0 { err((activationstage::runelevated, errorkind::permissiondenied)) } else { decode_result(code) } } err(err) =&gt; err((activationstage::runelevated, err.kind())), } }) .join() .unwrap(); result_to_string(result) } fn plugin&lt;r: runtime&gt;() -&gt; tauriplugin&lt;r&gt; { builder::new("windows") .invoke_handler(tauri::generate_handler![ core_is_activated, core_do_activate, ]) .build() } impl&lt;r: runtime&gt; super::custombuild tauri::builder&lt;r&gt; { fn setup_platform(self) -&gt; self { self.setup(|app| { let window = super::build_window(app); utils::enable_shadow(window.hwnd().unwrap().0); ok(()) }) .plugin(plugin()) } } pub fn do_entry() { let args: vec&lt;string&gt; = std::env::args().collect(); let mut avtive_value: option&lt;bool&gt; = none; args.len() &gt; 1 { args[1] == "--install" { avtive_value = some(true); } else args[1] == "--uninstall" { avtive_value = some(false); } } let some(active) = avtive_value { let symlink = args.len() &gt; 2 &amp;&amp; args[2] == "--symlink"; let result = do_activate(symlink, active); std::process::exit(encode_result(result)) } !utils::is_webview2_installed() { #[link(name = "user32")] extern "system" { fn messageboxa(_: isize, message: *const u8, caption: *const u8, flags: u32) -&gt; i32; } unsafe { messageboxa( 0, "webview2 installed system.\n\ please install webview2 run app.\0" .as_ptr(), "pengu loader\0".as_ptr(), 0x30, ); } std::process::exit(1) } }</file><file name="loader/.vscode/settings.json">{ "files.exclude": { "dist/": true, "node_modules/": true, "src-tauri/target": true, }, "editor.tabsize": 2, "typescript.preferences.quotestyle": "single", "typescript.format.semicolons": "remove", "javascript.preferences.quotestyle": "single", // "rust-analyzer.checkonsave": true, // "rust-analyzer.diagnostics.enable": true, "[rust]": { "editor.tabsize": 4, }, }</file><file name="loader/.vscode/extensions.json">{ "recommendations": [ "tauri-apps.tauri-vscode", "rust-lang.rust-analyzer" ] }</file><file name=".github/FUNDING.yml">github: [nomi-san]</file><file name=".github/workflows/build.yml">on: push: branches: - main - dev - release/* workflow_dispatch: jobs: build: name: build-${{ matrix.platform }} runs-on: ${{ matrix.os }} defaults: run: shell: ${{ matrix.shell }} strategy: fail-fast: false matrix: include: - platform: windows os: windows-2022 shell: bash tauri_args: "" - platform: macos os: macos-latest shell: sh tauri_args: --target universal-apple-darwin steps: - name: checkout repository uses: actions/checkout@v4 with: ref: ${{ github.ref }} submodules: true - name: prepare environment variables run: | echo "short_sha=`git rev-parse --short head`" &gt;&gt; $github_env echo "app_version=`node -p "require('./loader/package.json').version"`" &gt;&gt; $github_env - name: setup msbuild if: runner.os == 'windows' uses: microsoft/setup-msbuild@v2 - name: install rust stable uses: dtolnay/rust-toolchain@stable with: targets: ${{ matrix.os == 'macos-latest' &amp;&amp; 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }} - name: setup rust build cache uses: swatinem/rust-cache@v2 with: workspaces: "loader/src-tauri -&gt; target" - name: setup node.js uses: actions/setup-node@v4 with: node-version: 20 - name: setup pnpm uses: pnpm/action-setup@v4 with: version: 9 run_install: | - recursive: true - name: build preload plugins run: | cd plugins pnpm build - name: build core (windows) if: runner.os == 'windows' run: msbuild.exe pengu.sln -t:build -p:configuration=release -p:platform=x64 - name: build core (macos) if: runner.os == 'macos' run: make release - name: build loader uses: tauri-apps/tauri-action@v0 with: projectpath: "loader" args: ${{ matrix.tauri_args }} - name: move loader output (windows) if: runner.os == 'windows' run: | cp "loader/src-tauri/target/release/pengu loader.exe" bin/ - name: move loader output (macos) if: runner.os == 'macos' run: | cp -r "loader/src-tauri/target/universal-apple-darwin/release/bundle/macos/pengu loader.app" bin/ cp "loader/src-tauri/target/universal-apple-darwin/release/bundle/dmg/"*.dmg bin/ - name: upload build output uses: actions/upload-artifact@v4 with: name: pengu-v${{ env.app_version }}-dev-${{ env.short_sha }}-${{ matrix.platform }} path: | bin/ !bin/obj/</file><file name="plugins/vite.config.ts">import path 'node:path'; import fs 'node:fs/promises'; import { defineconfig } 'vite'; import { build } 'esbuild'; // vite plugins import mkcert 'vite-plugin-mkcert'; import solidplugin 'vite-plugin-solid'; import bundlecssinjs 'vite-plugin-css-injected-by-js'; import viterestart 'vite-plugin-restart'; const port = 3001; const root = (...args: string[]) =&gt; path.join(__dirname, ...args); export default defineconfig(({ command, mode }) =&gt; { const dev = command === 'serve' || mode === 'development'; return { publicdir: false, server: { https: true, port: port }, esbuild: { legalcomments: 'none', }, build: { assetsinlinelimit: 1024 * 64, minify: !dev, modulepreload: false, lib: { name: 'preload', entry: 'src/index.ts', formats: ['iife'] }, rollupoptions: { output: { format: 'iife', sourcemap: dev ? 'inline' : false, entryfilenames: 'preload.js' } } }, plugins: [ mkcert(), solidplugin(), bundlecssinjs({ topexecutionpriority: false, injectcodefunction: function (css) { document.addeventlistener('domcontentloaded', function () { const style = document.createelement('style'); style.appendchild(document.createtextnode(css)); document.head.appendchild(style); }); } }), viterestart({ restart: 'src/preload/**/*.ts' }), { name: 'pengu-serve', apply: 'serve', enforce: 'post', transform(code, id) { (/\.(ts|tsx)$/i.test(id)) return; return code.replace(/\/src\//g, `https://localhost:${port}/src/`) }, async configresolved() { await build({ entrypoints: [root('src/preload/index.ts')], outfile: root('dist/preload.js'), bundle: true, format: 'iife', sourcemap: 'inline', footer: { 'js': generatedevloader(port) } }); }, }, { name: 'pengu-build', apply: 'build', enforce: 'post', async closebundle() { const code = await fs.readfile(root('dist/preload.js'), 'utf-8'); const header = generateheader(code, 'preload_script'); await fs.writefile(root('dist/preload.g.h'), header, 'utf-8'); } } ] } }); function generatedevloader(port: number) { const template = function (port) { document.addeventlistener('domcontentloaded', async () =&gt; { // @ts-ignore await import(`https://localhost:${port}/@vite/client`); // @ts-ignore await import(`https://localhost:${port}/src/views/index.tsx`); }); } return `!(${template.tostring()})(${port});`; } function generateheader(code: string, name: string, linelength = 12) { const bytes = [...buffer.from(code, 'utf-8')] .map(c =&gt; '0x' + c.tostring(16).padstart(2, '0')); const formatted = array&lt;string&gt;(); (let = 0; &lt; bytes.length; += linelength) { const line = bytes.slice(i, + linelength).join(', '); formatted.push(line); } return `#ifndef _${name.touppercase()}_h_ #define _${name.touppercase()}_h_ static const unsigned int _${name}_size = ${bytes.length}; static const unsigned char _${name}[${bytes.length + 1}] = { ${formatted.join(',\n ')} }; #endif` }</file><file name="plugins/README.md">## what's it? folder source code preload scripts built-in plugins. ### tech stacks ![](https://skillicons.dev/icons?i=vite,ts,solidjs,tailwind) - **vite** - dev server, build tool bundler. - **typescript** - typesafe! - **solidjs** - high performance jsx embedded views, vdom! - **tailwind** - css! ## developing two folders `src` - preload: pofyfill, loader hook scripts - views: solidjs app - successor previous @default plugin first, need build core module `debug` mode. second, install dependencies: ``` pnpm install ``` run dev server: ``` pnpm dev ``` start **league client** get result. additionally, open https://localhost:3001 web browser test views. changes views perform hot-replacement dom. preload script changes, reload entire client. need modify `preload` only, run dev build reload client manually. ``` pnpm build-dev ``` &gt; touch vite.config.ts without knowing it. ## building production run build ``` pnpm build ``` embed scripts core module, build `release` mode.</file><file name="plugins/twind.config.ts">import { defineconfig } '@twind/core'; import presetautoprefix '@twind/preset-autoprefix'; import presettailwind '@twind/preset-tailwind'; export default defineconfig({ presets: [ presetautoprefix(), presettailwind(), ], });</file><file name="plugins/package.json">{ "name": "pengujs", "private": true, "version": "1.2.0", "type": "module", "scripts": { "dev": "vite", "build-dev": "tsc &amp;&amp; vite build -m development", "build": "tsc &amp;&amp; vite build", "preview": "vite preview" }, "dependencies": { "@twind/core": "^1.1.3", "@twind/preset-autoprefix": "^1.0.7", "@twind/preset-tailwind": "^1.1.4", "@twind/with-web-components": "^1.1.3", "fuse.js": "^6.6.2", "snarkdown": "^2.0.0", "solid-js": "^1.7.8", "solid-toast": "^0.5.0" }, "devdependencies": { "@types/node": "^20", "esbuild": "^0.18.12", "typescript": "^4.9.5", "vite": "^5.3.1", "vite-plugin-css-injected-by-js": "^3.2.0", "vite-plugin-mkcert": "^1.16.0", "vite-plugin-restart": "^0.4.1", "vite-plugin-solid": "^2.8.0" } }</file><file name="plugins/tsconfig.json">{ "compileroptions": { "target": "es2020", "usedefineforclassfields": true, "module": "commonjs", "lib": [ "es2020", "dom", "dom.iterable" ], "skiplibcheck": true, "experimentaldecorators": true, /* bundler mode */ "resolvejsonmodule": true, "isolatedmodules": true, "noemit": true, "jsx": "preserve", "jsximportsource": "solid-js", /* linting */ "strict": true, "nounusedlocals": false, "nounusedparameters": false, "nofallthroughcasesinswitch": true, "noimplicitany": false }, "include": [ "src" ] }</file><file name="plugins/tailwind.config.ts">// keep tailwind's intellisense export default { content: [ './index.html', './src/**/*.{ts,tsx,css,html,scss}', ], }</file><file name="plugins/pnpm-lock.yaml">lockfileversion: '9.0' settings: autoinstallpeers: true excludelinksfromlockfile: false importers: .: dependencies: '@twind/core': specifier: ^1.1.3 version: 1.1.3(typescript@4.9.5) '@twind/preset-autoprefix': specifier: ^1.0.7 version: 1.0.7(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5) '@twind/preset-tailwind': specifier: ^1.1.4 version: 1.1.4(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5) '@twind/with-web-components': specifier: ^1.1.3 version: 1.1.3(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5) fuse.js: specifier: ^6.6.2 version: 6.6.2 snarkdown: specifier: ^2.0.0 version: 2.0.0 solid-js: specifier: ^1.7.8 version: 1.7.8 solid-toast: specifier: ^0.5.0 version: 0.5.0(solid-js@1.7.8) devdependencies: '@types/node': specifier: ^20 version: 20.16.1 esbuild: specifier: ^0.18.12 version: 0.18.12 typescript: specifier: ^4.9.5 version: 4.9.5 vite: specifier: ^5.3.1 version: 5.4.2(@types/node@20.16.1) vite-plugin-css-injected-by-js: specifier: ^3.2.0 version: 3.2.0(vite@5.4.2(@types/node@20.16.1)) vite-plugin-mkcert: specifier: ^1.16.0 version: 1.16.0(vite@5.4.2(@types/node@20.16.1)) vite-plugin-restart: specifier: ^0.4.1 version: 0.4.1(vite@5.4.2(@types/node@20.16.1)) vite-plugin-solid: specifier: ^2.8.0 version: 2.10.2(solid-js@1.7.8)(vite@5.4.2(@types/node@20.16.1)) packages: '@ampproject/remapping@2.2.1': resolution: {integrity: sha512-lfmjjtrfl3j7l9ybxwyfcq2k6qqwhyzuul/xbnif78pwtjyyl/dfowqhwe3sp6u6zzqwiiiznptmo96zhkjwtg==} engines: {node: '&gt;=6.0.0'} '@babel/code-frame@7.24.7': resolution: {integrity: sha512-bcyh1cvjbo9tvyiz2jvexgsimvgz2fdrvddoivqyuklnkssx+eppdebq/g47ayw+rqnfe+urvoshmf+f/qwala==} engines: {node: '&gt;=6.9.0'} '@babel/compat-data@7.25.4': resolution: {integrity: sha512-+lgrog6rascjrrrg/io6lgmpphne5dik30dgjcoxxegv49b10/3xygxpsawrdlmfcfevdauavdt8r9k/hsyqqq==} engines: {node: '&gt;=6.9.0'} '@babel/core@7.25.2': resolution: {integrity: sha512-bbt3opicoxur9euz5/ro/xv8/v7yj5bjymqg/c1yao8mikanumzalcn+msbci3pigy4liqfpupfmm27hmgayea==} engines: {node: '&gt;=6.9.0'} '@babel/generator@7.25.5': resolution: {integrity: sha512-abd43wylfbwoxc6ahm8xtkqlpgb2iwbvyukc9/srhfuncd1sdnrv1s72bbpk4hlj8klzhbbcoblvlqzbnw9r3w==} engines: {node: '&gt;=6.9.0'} '@babel/helper-compilation-targets@7.25.2': resolution: {integrity: sha512-u2u5lssaz7tat3cfaymq8whh0pxvdhoek6hvpaexxixjyequmh0l0ynjnm6ctgkmxv1iksi0izkgw4acfkpaaw==} engines: {node: '&gt;=6.9.0'} '@babel/helper-module-imports@7.18.6': resolution: {integrity: sha512-0nfvs3vkusybfi1x2vd6tkrywq+z/cleyc/rjnfrix/30bf5aigybtvgxolektzjh8o5e5kj3tt+nkxuuzfvla==} engines: {node: '&gt;=6.9.0'} '@babel/helper-module-imports@7.24.7': resolution: {integrity: sha512-8ayh3c+74cgcvvxow/myrynragv+ntvg5vku2nzph9x7rcrwzmh0vfalljuftz9mx6u4esdxzfcozsqtum0hca==} engines: {node: '&gt;=6.9.0'} '@babel/helper-module-transforms@7.25.2': resolution: {integrity: sha512-bjyrabix6j/wv83ftcvjmbt72qthi56c7jxzog2xatilpmoc7dpd8wnkikexhdvppi/3qcmo6wy1eaxoluiecq==} engines: {node: '&gt;=6.9.0'} peerdependencies: '@babel/core': ^7.0.0 '@babel/helper-plugin-utils@7.22.5': resolution: {integrity: sha512-ulls06uvkgfg9qd4oefylegtemiaa5kptpcfl28yuciizsf6zykzmllkvoczfhiz5ptnwx4mtkdwcbe/ut4amg==} engines: {node: '&gt;=6.9.0'} '@babel/helper-simple-access@7.24.7': resolution: {integrity: sha512-zbaivbcmh5ts+b86r/cju+4xgyis+r1j951gxi3kmmxbmhcg4oqmsv6zxq64xom/cvzfu1fmocyt6+owc5qmyg==} engines: {node: '&gt;=6.9.0'} '@babel/helper-string-parser@7.22.5': resolution: {integrity: sha512-mm4cojgzox8u+jcxqwpijizlelkgepo5rservdjtc2qfcdferyob6k5wegs14sx18iijv+xd+grqnumy5jrcdw==} engines: {node: '&gt;=6.9.0'} '@babel/helper-string-parser@7.24.8': resolution: {integrity: sha512-po9khhrcuuygnjwwyegnrjtsizhit+vmd0kped+so0l7mxkmt19g3pjy9gtnhysck/hdzq+dtw/4vgnmkippsq==} engines: {node: '&gt;=6.9.0'} '@babel/helper-validator-identifier@7.22.5': resolution: {integrity: sha512-ajxu+6lerq8ltp+jhkjufk1mtgyua4v7f3pa+bj5hlfnc6naq0cpi9uoquuj8hehg0auihzwqbovjgao6ztbaq==} engines: {node: '&gt;=6.9.0'} '@babel/helper-validator-identifier@7.24.7': resolution: {integrity: sha512-rr+pbcq1smqddyf6x0wxtg8qylcgub0eragguqrlfkca87l7yap7ehq8snj96oogto8obv70khufycikhxog0w==} engines: {node: '&gt;=6.9.0'} '@babel/helper-validator-option@7.24.8': resolution: {integrity: sha512-xb8t9td1mhlungh/aiowyn+gvhab9kwlu8gffxgst3ffeit7rjs+xwbc2vud1utzdipkj/ab3rdqj7ufngyi2q==} engines: {node: '&gt;=6.9.0'} '@babel/helpers@7.25.0': resolution: {integrity: sha512-mjglz42acm0ogjjj8ctsm3db8noof8h2l7dctepjs29u+v7yo/rbx9nshlkmgfnrks/q4tbae7hxnov9vkgwlw==} engines: {node: '&gt;=6.9.0'} '@babel/highlight@7.24.7': resolution: {integrity: sha512-estjpq4ouy8xyfhgvxngigbjrwxftkx9ksigdnmly3o7b/v7kiac9x4oik87upjsc/vs5l869bem5fhza8cazw==} engines: {node: '&gt;=6.9.0'} '@babel/parser@7.22.7': resolution: {integrity: sha512-7nf8pokhp5o2vpmggngcfaecvoyhglya3z4ebqkt1rjlwu47n63bcs93qfj2hiafcil7l5p2iwhs1otovgrl0q==} engines: {node: '&gt;=6.0.0'} hasbin: true '@babel/parser@7.25.4': resolution: {integrity: sha512-nq+ewrogdtu3jg5os4tqp3x3cla8hr8tvjnjd8vnpa20wgycimcparwnlk4jjheltk6sdyujo1wemko/5lpmla==} engines: {node: '&gt;=6.0.0'} hasbin: true '@babel/plugin-syntax-jsx@7.22.5': resolution: {integrity: sha512-gvyp4hzrgrs/wwmaocvxz44hw0b3w8pe+cmxc8v1ulq07oh8vnbiraod1lrzvtvd+0niedkjfgkg89sd7rrkrg==} engines: {node: '&gt;=6.9.0'} peerdependencies: '@babel/core': ^7.0.0-0 '@babel/template@7.25.0': resolution: {integrity: sha512-aoogh1/5xzkvg1jvvz7avrx2pij2xbi227dhmby6y+bm9h2fln+ifecyu4xl0cniivejlscri89lusbj8vjd9q==} engines: {node: '&gt;=6.9.0'} '@babel/traverse@7.25.4': resolution: {integrity: sha512-vj4xsrd+novlxylzmlzus/0qjfs4sk30te5yeflvbbunegkavb2bhzupal+ttlpqahnrsi3zzisbfha5cvr8vg==} engines: {node: '&gt;=6.9.0'} '@babel/types@7.22.5': resolution: {integrity: sha512-zo3mihgokpoforxitsghljexmldad/5ku1uzuc9gnizphsqvxvrtxupasbzdsyz9qv88ajtmtww7ww98loj9ka==} engines: {node: '&gt;=6.9.0'} '@babel/types@7.25.4': resolution: {integrity: sha512-zq1ijeecxveh+anl0rlmkpkg8huidcu2pzqqfjtbntgaczrasfzj4h+6+bv+dy1ntkr14i/dypeurg1uma98iq==} engines: {node: '&gt;=6.9.0'} '@esbuild/aix-ppc64@0.21.5': resolution: {integrity: sha512-1sdgh6zsptlggy1yi6+dbkiz8xzphjevalf/am1thplsf5stom9rwtje4hkaf20ffxxntfqeyxyjnwh1gizedq==} engines: {node: '&gt;=12'} cpu: [ppc64] os: [aix] '@esbuild/android-arm64@0.18.12': resolution: {integrity: sha512-bmalczrqc/lut2p97e4aptbbkvs9jtjnp2dkfbcwpz8vbvxvbndqmvzw/osdti/+mgr+apkkpqgm8weclkpgra==} engines: {node: '&gt;=12'} cpu: [arm64] os: [android] '@esbuild/android-arm64@0.21.5': resolution: {integrity: sha512-c0ux9vaubq7dtdcjq+wdyglowmdtr/goc2u5iyk/7d1h1jyc0qsed7+11imp2mrln9rccmrcjc4ymclczgws/a==} engines: {node: '&gt;=12'} cpu: [arm64] os: [android] '@esbuild/android-arm@0.18.12': resolution: {integrity: sha512-lixaniqfkfzbtlb4+cx7dozhlabashhfe5pkdro0l+fncpx1gdjaq2wmcqm+toxkmt8p8uojk/mfrugyz3v5sw==} engines: {node: '&gt;=12'} cpu: [arm] os: [android] '@esbuild/android-arm@0.21.5': resolution: {integrity: sha512-vcpvzsjpphei1sizdlvalspxxl7wbovubbaowwug4rjhb68ox8kualb+1ocnvt5fjv6wpkx6o/iepbdrf68zcg==} engines: {node: '&gt;=12'} cpu: [arm] os: [android] '@esbuild/android-x64@0.18.12': resolution: {integrity: sha512-zu5mylunsykf5coj0lzzzjgahbhpj1cwfdh1zxvmxxvmhev0vzizxqdwbbvvmvbf28eizek7obg9fs+fpms0eq==} engines: {node: '&gt;=12'} cpu: [x64] os: [android] '@esbuild/android-x64@0.21.5': resolution: {integrity: sha512-d7apruunhrbwhxzxrvp856rjuhrfw1sdqatkxh2hqa0kazb1hkmi02opyracl0txigz/zmxwlbzgjwwyacakta==} engines: {node: '&gt;=12'} cpu: [x64] os: [android] '@esbuild/darwin-arm64@0.18.12': resolution: {integrity: sha512-zuzmep7yonnp6954qoowebwfx9svlkd3ov6pkxkd53lgthsp/gy7vhapghhjbmepqxexshi6dddjikmd+ngmsa==} engines: {node: '&gt;=12'} cpu: [arm64] os: [darwin] '@esbuild/darwin-arm64@0.21.5': resolution: {integrity: sha512-dwqxqzyuk5aiwwf3uflirdj5edd49zg6o9wclz7kumv2wrfr4hkjxp/5t8jz11qbqfus6/crckgwyhtnay88kq==} engines: {node: '&gt;=12'} cpu: [arm64] os: [darwin] '@esbuild/darwin-x64@0.18.12': resolution: {integrity: sha512-ohqlpc7i67yunarpj1+/feej7agwajhqkz512adk3wse3fhu9l+m5aa7ndxxr0hmn1bjdluslbjwnbfld9y12q==} engines: {node: '&gt;=12'} cpu: [x64] os: [darwin] '@esbuild/darwin-x64@0.21.5': resolution: {integrity: sha512-se/jjf8nlmkvg4kniuywmv/22zaerb+qasi5mdrxtd6r08kvs2qcn4c09miupktditvh8jrfflwgfbqcxzrjbw==} engines: {node: '&gt;=12'} cpu: [x64] os: [darwin] '@esbuild/freebsd-arm64@0.18.12': resolution: {integrity: sha512-giihtqxqgeooqdg16a/a9n28gpkvjjnjymhonxvbn3edjcoitdr58v/pgn31chjyxdc8uccrnfwmqajt24ayjg==} engines: {node: '&gt;=12'} cpu: [arm64] os: [freebsd] '@esbuild/freebsd-arm64@0.21.5': resolution: {integrity: sha512-5jcrxxrdujlx8jxp/wcbcy3penncgbr9bn6jsy4omhfutihe3zw0mawa7+rdacmlrmizaf03nlqix9dgyb8h4g==} engines: {node: '&gt;=12'} cpu: [arm64] os: [freebsd] '@esbuild/freebsd-x64@0.18.12': resolution: {integrity: sha512-zk0b9a1/0wzy+6fdos3bpzcpc1kcx2g5yxxfejteuzvxi6n/frc2phsxj/yblpubchhbz/1wwn7ayebuynsa6g==} engines: {node: '&gt;=12'} cpu: [x64] os: [freebsd] '@esbuild/freebsd-x64@0.21.5': resolution: {integrity: sha512-j95knbj1zkbmxthvh29bbriqygmxqovqoqya+iss0/2l3t9/kj42ow2mpqerrbxdjnmkudcaqt/dfnxwx/zzcq==} engines: {node: '&gt;=12'} cpu: [x64] os: [freebsd] '@esbuild/linux-arm64@0.18.12': resolution: {integrity: sha512-jkgg8q/ll/9sw/ihhxqyvmoqyu3ru3+a5z87dxc+wau3engz+emctirv+fgogi6gwg1z1+5nddbxirmgqzxqiw==} engines: {node: '&gt;=12'} cpu: [arm64] os: [linux] '@esbuild/linux-arm64@0.21.5': resolution: {integrity: sha512-ibkvmyyzksbex8d8i7mh/tmfwdxbf3db4qm6sy+7re0yxya+k1cem3on9xgdt2eqgmu4hqyzhan7teq8xkgp4q==} engines: {node: '&gt;=12'} cpu: [arm64] os: [linux] '@esbuild/linux-arm@0.18.12': resolution: {integrity: sha512-y75oijvrbe/1xrrxq1jtrjfg26ehemoqlj2dwqnwviwtutthgcojsdo6bjnf8gu+3jtn1kzjemetytwsfsvc+q==} engines: {node: '&gt;=12'} cpu: [arm] os: [linux] '@esbuild/linux-arm@0.21.5': resolution: {integrity: sha512-bpb5ahztbengjckvz9ugqgwo8euu4clq68e95a53klxaprmuyyv2d6f0uui65xisgol1hbp5mtronbgo+0bfca==} engines: {node: '&gt;=12'} cpu: [arm] os: [linux] '@esbuild/linux-ia32@0.18.12': resolution: {integrity: sha512-yoriaqc0b4ldiaaefeiu9tttrfv84iual0kncn6mhklxnpfzwcbvemgwco2f71gxmpbcttn7kderuezam2revw==} engines: {node: '&gt;=12'} cpu: [ia32] os: [linux] '@esbuild/linux-ia32@0.21.5': resolution: {integrity: sha512-yvjxdqlrqpdl2dvrodymmhz4rpevkyvppfgyksngdyzka01046plwyrkki3ax8fbjok5qbxblurkwk/mwy18tg==} engines: {node: '&gt;=12'} cpu: [ia32] os: [linux] '@esbuild/linux-loong64@0.18.12': resolution: {integrity: sha512-qygt3dhpvvf/mgbibpj4sup/yb9daopz3a2jgmpnkihupodnj2ehbo/aqdnd8dj21x/+ss58wxhta9leazytxq==} engines: {node: '&gt;=12'} cpu: [loong64] os: [linux] '@esbuild/linux-loong64@0.21.5': resolution: {integrity: sha512-uhf1bmmg8qevzdrzaqg2sig/02+4/dhb6a9kbya0xdvwdekcoc8zrwi5jjvndujtcibgfq5publpeoxqj+jqsg==} engines: {node: '&gt;=12'} cpu: [loong64] os: [linux] '@esbuild/linux-mips64el@0.18.12': resolution: {integrity: sha512-whphlmlk4ufnoonqukelfvibngqjrhj/mxzmmrp2jyrpgcrzhotf0kc4yaxbwnfmulimv1qt5ujjow4kh13yfg==} engines: {node: '&gt;=12'} cpu: [mips64el] os: [linux] '@esbuild/linux-mips64el@0.21.5': resolution: {integrity: sha512-iajomo+kjk23bj52dfsncmsz1qp1dqm6cwluv3w1qwyxkyiwecfafni555fvsgqekwjmxvlokcv5yghw5b3jbg==} engines: {node: '&gt;=12'} cpu: [mips64el] os: [linux] '@esbuild/linux-ppc64@0.18.12': resolution: {integrity: sha512-ten//1ft20zzw41+zdsdoi/os1beq5dbvbvykberb7phabbrcsteeonvzfli0ylpgdlbqohepjrn06kv8hecjg==} engines: {node: '&gt;=12'} cpu: [ppc64] os: [linux] '@esbuild/linux-ppc64@0.21.5': resolution: {integrity: sha512-1hhv/z4oefmwplo8rp7cvlhbdnjsc3cttjxihbi+5aj5r+mbvy4egg7wcbe//hsst+rvdag7s81tavpl2xae4w==} engines: {node: '&gt;=12'} cpu: [ppc64] os: [linux] '@esbuild/linux-riscv64@0.18.12': resolution: {integrity: sha512-aguebvs4doablbgib2acq/8l4ege5awbb8zxtkxhiet9mbj7guwt3onsiw/zx+xhjt2ryjzctbq2s/mdjbp0ua==} engines: {node: '&gt;=12'} cpu: [riscv64] os: [linux] '@esbuild/linux-riscv64@0.21.5': resolution: {integrity: sha512-2hdxdmd9gmgtgrpwnjzp2alsoke/0o5hhtuvwibd3ydjme8jwvscnngbntthkgeb91ozhzrj4qiixk/sbmydda==} engines: {node: '&gt;=12'} cpu: [riscv64] os: [linux] '@esbuild/linux-s390x@0.18.12': resolution: {integrity: sha512-dj3rb3ei2u/yssxd6pzlegtfddc2muzkt8qc6ls8vrep1g3b7hinx3i7gxs4bgevd24pp0yqys7bj5nhai9ing==} engines: {node: '&gt;=12'} cpu: [s390x] os: [linux] '@esbuild/linux-s390x@0.21.5': resolution: {integrity: sha512-zus5sxzqbjd3exxwvjn1yqkrepangxe9lgow2qlnmr8ikmtphkjgxu1hr01k4fjg8h1keedaqdczqtbrrnb41a==} engines: {node: '&gt;=12'} cpu: [s390x] os: [linux] '@esbuild/linux-x64@0.18.12': resolution: {integrity: sha512-ornjmgqbpavyhhcdf8ybnswu7tdofx8ngpxcbetwosp6txojiwlgqnrymfc9ocr1s0y5pw0wb1mv6puddqmvmq==} engines: {node: '&gt;=12'} cpu: [x64] os: [linux] '@esbuild/linux-x64@0.21.5': resolution: {integrity: sha512-1rydtpyv03iycf1+bhzrzqjcdouaotaqhtwjzcwvijkd2n5xu0ttvc8/+1fawqcp9ibcwomjmhoh94dh82bxpq==} engines: {node: '&gt;=12'} cpu: [x64] os: [linux] '@esbuild/netbsd-x64@0.18.12': resolution: {integrity: sha512-55fzvcaiwe9fk8wwecruvjaznrj1qqlcygzvb6e8ruqutestswotpsw4xorgwp3a1wusavcdycj5lgcasvjmmg==} engines: {node: '&gt;=12'} cpu: [x64] os: [netbsd] '@esbuild/netbsd-x64@0.21.5': resolution: {integrity: sha512-woi2mxzxjmulcciwmnlciyzh4ncimpwqas049keemvocnadvxo0ubiqpfsmxb3cwkedngg7swzdlvlczpe0tlg==} engines: {node: '&gt;=12'} cpu: [x64] os: [netbsd] '@esbuild/openbsd-x64@0.18.12': resolution: {integrity: sha512-qnluf8rfb6y5lw2tirfk2quzobbvqmwxut7gpcijsm8lc4aeuj9l8y0ypdlapk0tect4idybdbd/krfkorlk3g==} engines: {node: '&gt;=12'} cpu: [x64] os: [openbsd] '@esbuild/openbsd-x64@0.21.5': resolution: {integrity: sha512-hlnnw99xsvx12lfbuwot8evcssvrndvxnpjz7bpn947b8gjpzehwynvhfsaerc0n3tsboinvrp2bytz5lkezow==} engines: {node: '&gt;=12'} cpu: [x64] os: [openbsd] '@esbuild/sunos-x64@0.18.12': resolution: {integrity: sha512-+rkkpvqr7bicjtopupktbtaj4tfqqbx5ywyd/hsddkqgn65vpktsr/pl4amvumwy+wnxgil4ey6q4mvpjal8kg==} engines: {node: '&gt;=12'} cpu: [x64] os: [sunos] '@esbuild/sunos-x64@0.21.5': resolution: {integrity: sha512-6+gjmfpfy0bhu5tpptkuh8+uw3mnrvgs+dspqxqov3ekbordwnztveb4qnivqcyxq6gzkytnoz9dzg+d4garkg==} engines: {node: '&gt;=12'} cpu: [x64] os: [sunos] '@esbuild/win32-arm64@0.18.12': resolution: {integrity: sha512-gnhuciv0mfm7ouzsu0+awy+7ev4mgo5wnbhfdcqgtpvotd1vboirjpyg6dhmmofybjj+pnqqu2x+7dkn0kq/gw==} engines: {node: '&gt;=12'} cpu: [arm64] os: [win32] '@esbuild/win32-arm64@0.21.5': resolution: {integrity: sha512-z0gotd75vvxqyq7nsl93zwahctrogqvuacydur+vov8uhhnskroyu961kgtcd1e95iqpksqkh7tbtslns3ta8a==} engines: {node: '&gt;=12'} cpu: [arm64] os: [win32] '@esbuild/win32-ia32@0.18.12': resolution: {integrity: sha512-kr8cezhyipbbypgkaqctwieu4zid17gamc8ytpxytcn3e5bhhttnwkbn9i0pjur/t6uvwiegyzkffnl0lfvxew==} engines: {node: '&gt;=12'} cpu: [ia32] os: [win32] '@esbuild/win32-ia32@0.21.5': resolution: {integrity: sha512-swxff1cl2rvnmavs+bbclwtfzsvdgtl//g/smwac5ovk/upu2gu9tiargfmyffkrmg3syajsrelf0tij1v8fya==} engines: {node: '&gt;=12'} cpu: [ia32] os: [win32] '@esbuild/win32-x64@0.18.12': resolution: {integrity: sha512-o0uyqvkvfm/jo8a4owov0maksjw+mjwtad1mjd/1fcx6uimdlmmrpk/w6e9oq0ob2wgxzim9va/kg0ja4ziogg==} engines: {node: '&gt;=12'} cpu: [x64] os: [win32] '@esbuild/win32-x64@0.21.5': resolution: {integrity: sha512-tqd/1efjuzpc6rcfwevltci/xnfctzknmxs98fydfge4wp9clfv98nykrzjkvpmhddnjzlhduymx4psqapjwiw==} engines: {node: '&gt;=12'} cpu: [x64] os: [win32] '@jridgewell/gen-mapping@0.3.3': resolution: {integrity: sha512-hlhswolri875zjjmg/r+nv0ocw8umgb0bgehyx3ddx3egwztb8pqlnjz3yedt8r5stbrzcg4abpnh8ua9d1boq==} engines: {node: '&gt;=6.0.0'} '@jridgewell/gen-mapping@0.3.5': resolution: {integrity: sha512-izl8zoedibrwezlccrhoacupyyn5gdik+q6fbfdpdg6hqx6jpkitn7dfipw9lqzxg6df9sa7+oknq0qlz/gaqg==} engines: {node: '&gt;=6.0.0'} '@jridgewell/resolve-uri@3.1.0': resolution: {integrity: sha512-f2msla3tad+mfht5cjq7lsxcdudktwcvyugw6plfoohsttzlj6swnyap+ahuqlmwdbo2x5hprlcu8cvp8fy28w==} engines: {node: '&gt;=6.0.0'} '@jridgewell/set-array@1.1.2': resolution: {integrity: sha512-xnkseunadm0gt2bs+bvho0p78mk762ynzdsuzfv018nog1sj1scqvpsqa7xuatam5vagasabv9qxasmknfmwmw==} engines: {node: '&gt;=6.0.0'} '@jridgewell/set-array@1.2.1': resolution: {integrity: sha512-r8glrtzeyp03ymzp/6lil/28tgegezhx1q2k703kgwrai1vdvpixdg70vjc2pamw3na6jkl5hhfu1sjx0mnn/a==} engines: {node: '&gt;=6.0.0'} '@jridgewell/sourcemap-codec@1.4.14': resolution: {integrity: sha512-xpsjhwmi394fuuuzdngz1wikqwfo1yxechqmrf2l6hztto+npru658aydngabe7isixekrspr3fzh+s7iva4uw==} '@jridgewell/sourcemap-codec@1.4.15': resolution: {integrity: sha512-ef2rxcrulekxhtridrdy6ermywqnw4lpdq8uqa4huuxaqsverpfl2om8odgxmfhjuwzf9mcpltjasddzb/bpeg==} '@jridgewell/trace-mapping@0.3.18': resolution: {integrity: sha512-w+nijyzmhdd7usdih2u6869nqhd2nbfzxnd5yp93qibemndnk7pd48o+ychrvpzmu7m6jvcbentr7pa1flq9pa==} '@jridgewell/trace-mapping@0.3.25': resolution: {integrity: sha512-vnk6aewybgtawwmy/pzwngdojcklwsd2wqvjggagoawcgwysyxfyoxt00ijktf+8lb57dwob3aa0o9capepiyq==} '@octokit/auth-token@3.0.4': resolution: {integrity: sha512-twfx7czf2lxocvdmjwy7xvpi74asy0+ffbznsxexfkmpjcqsqwdsyvv5fhrfai0v1ecnwbz4j59t/g+rxnwaiq==} engines: {node: '&gt;= 14'} '@octokit/core@4.2.4': resolution: {integrity: sha512-rykilwgzq7/imscn3m9/pffuf4i1azeh3khyjmtpde2zfaxan2mffuy4fbkewzc2we5y/llklj36fwjlkc2siq==} engines: {node: '&gt;= 14'} '@octokit/endpoint@7.0.6': resolution: {integrity: sha512-5l4fsevrusdfgr00tmwd/trdeeihn999rtmgrmc1g/ldi1uwlwjzi98h4iak5db/rvvquymykqsk/r6mbsoqyg==} engines: {node: '&gt;= 14'} '@octokit/graphql@5.0.6': resolution: {integrity: sha512-fxyxdy/jh0mnib5h+uq3ycoh1fg4kwxffkkpwqjzhw/p+kc8y44hu/kcgnbt6nu1shnumechmw/suo1juqnpcw==} engines: {node: '&gt;= 14'} '@octokit/openapi-types@18.0.0': resolution: {integrity: sha512-v8gimks3teqrxrtxfpg2wl19v7444niotdf24awuibmnanyoqmwrbjcgdxv5b+0n887fgdcumnomlul+k+ojtw==} '@octokit/plugin-paginate-rest@6.1.2': resolution: {integrity: sha512-qhrmtqehu/iivxucov1bbi/xzyc/iobhclokv7sut5vnejaiaexvcgqerpqlu39e0wwk9lnvjhphhri/db6lbq==} engines: {node: '&gt;= 14'} peerdependencies: '@octokit/core': '&gt;=4' '@octokit/plugin-request-log@1.0.4': resolution: {integrity: sha512-mlusmkgp7k/cnfew07kwqxgf5lkrokd+lhcrkvphxwdywawuduedwwbpc69xk3pnx0ukivt8g5z96pj6z9xcfa==} peerdependencies: '@octokit/core': '&gt;=3' '@octokit/plugin-rest-endpoint-methods@7.2.3': resolution: {integrity: sha512-i5gml6ktakzvln7kctjom+ruwe/rqppp0qu372k1gp7knoyeke8xn5bw4se62jahdwpq95oqk/qgnykqmuzvga==} engines: {node: '&gt;= 14'} peerdependencies: '@octokit/core': '&gt;=3' '@octokit/request-error@3.0.3': resolution: {integrity: sha512-crqw3v5iy2uou5np+8m/yextlt8zxcfi+qu+lxub7szpje4qmx3mub5dfekso8ylyk0aogi6tydf6kxzh2bguq==} engines: {node: '&gt;= 14'} '@octokit/request@6.2.8': resolution: {integrity: sha512-ow4+pkvq+6xvvseksybzjc0vtvvh/fctuugtsbogq+dtewdyifv8wscdo0rixk6wskbthqik1myuy7nobxochw==} engines: {node: '&gt;= 14'} '@octokit/rest@19.0.13': resolution: {integrity: sha512-/ezvox5v9gygdbai+ovyj3nxqt1ttthrt+0ezpcuc05ufswo3mdo9uy1c0i2elf9un1onjkak+ietygac+taha==} engines: {node: '&gt;= 14'} '@octokit/tsconfig@1.0.2': resolution: {integrity: sha512-i0vdr0rdtp8p2lgmzvsjzbhdowy405hcgovrspj8rribhnyrgggusno5aiox5lmqiwmathkysvj6vgfhkqs7la==} '@octokit/types@10.0.0': resolution: {integrity: sha512-vm8iddvmhcgu1fxc1eyinpwqzxpeyu0nryzd3yzjlgjyftdlbteqnblrc0jmjmgxbjisqlyogvegnrnaamvzig==} '@octokit/types@9.3.2': resolution: {integrity: sha512-d4ihgtdaneevsb8fl95m1hiz7d5yirdq9b/oeb3byrvwblsghcrvpz+u+bgrlnk0q0/4izcbqdn96j2xnxfxra==} '@rollup/rollup-android-arm-eabi@4.21.0': resolution: {integrity: sha512-wtwd8pfosaj+ql87le7votj3sylavxunwhzcnx3xfxfii/ba/r3x7mum8dvrh8rb2r4aio8jjsr3zjdaftmnfa==} cpu: [arm] os: [android] '@rollup/rollup-android-arm64@4.21.0': resolution: {integrity: sha512-a1sr2zsk1b4eykizu17zuzhmuqckjk2/j9me2idjk1ghw7lb5z35lezj9ijch6gtufsnvzs1znydw2ozsthrka==} cpu: [arm64] os: [android] '@rollup/rollup-darwin-arm64@4.21.0': resolution: {integrity: sha512-zonkwlgdld/svhko5pd9ozml6roy5oq5t4thvdyzlpiohegy+dp2nwumxk0ld91lrbjrvtnae0erbwjqhztraa==} cpu: [arm64] os: [darwin] '@rollup/rollup-darwin-x64@4.21.0': resolution: {integrity: sha512-7dos8br0xakg48ske2qntmsfpfulrdw9+votl27mvt46vo44atbmdzdgysoevnelmzlfd+nea0uyoa8f01wsrg==} cpu: [x64] os: [darwin] '@rollup/rollup-linux-arm-gnueabihf@4.21.0': resolution: {integrity: sha512-pwjsfqjnwngsocq53kjmtwdjdmh/6nubwqcz52aewleuvx08bzcy6touuawaoncpnxz/3sirtd8hiq32g1y8va==} cpu: [arm] os: [linux] '@rollup/rollup-linux-arm-musleabihf@4.21.0': resolution: {integrity: sha512-efriansz3uhzrnzxuevxs9locowmgd1rwecid6ujqix2myn3a8im1fafzbzh7zk1rj6okcr16du3upldakd83w==} cpu: [arm] os: [linux] '@rollup/rollup-linux-arm64-gnu@4.21.0': resolution: {integrity: sha512-zrphydktvhyegtw94wj8pnl1uroqvhm3j3hjdquwacwnmivjawoyjteauedejvgx7xv3z9gavrbkezcghq9u1w==} cpu: [arm64] os: [linux] '@rollup/rollup-linux-arm64-musl@4.21.0': resolution: {integrity: sha512-cfaupqd+uefeurmqnp2eevxqgbsox/lhoyn9/d2psdv8xtrjdg3ngofjctc1vq/jeke1qd0iejbbfxlebphnpw==} cpu: [arm64] os: [linux] '@rollup/rollup-linux-powerpc64le-gnu@4.21.0': resolution: {integrity: sha512-zkpan1/rvahruylwbxc9t7b2hxdpb/ufeu22pg2psv7rn8roofgureghw1ysmx/cmddhntddjy3lo9hrlgtahg==} cpu: [ppc64] os: [linux] '@rollup/rollup-linux-riscv64-gnu@4.21.0': resolution: {integrity: sha512-h1eracwd5e8es8leis+o/nqmdljkcb1d6r2h4fksscxqillkarq6ws7xbldu80yz+nmqhvfdquwcvrqmgr28rg==} cpu: [riscv64] os: [linux] '@rollup/rollup-linux-s390x-gnu@4.21.0': resolution: {integrity: sha512-zj4ha+3b5tu8u7l58ccsi0a9n1vkfwphwd/pugxwtzlsb5btkwdnw/+jcu84+3qymkpli+xvhdmrlwuwda6kqw==} cpu: [s390x] os: [linux] '@rollup/rollup-linux-x64-gnu@4.21.0': resolution: {integrity: sha512-e2hrvelfih6kw/unbqk/kzqmny5mo+67yteh9oa65rm5ijxytwixjx6fjiipaqokbthyf1eqgiz6oxkcqsm0hg==} cpu: [x64] os: [linux] '@rollup/rollup-linux-x64-musl@4.21.0': resolution: {integrity: sha512-1vvmgddusebvgxwx2licgrebqfqsff0hmekljyakq9jqubldkeamsptlomyccyc6ij/l3fzujbmrbw/u0a0ucq==} cpu: [x64] os: [linux] '@rollup/rollup-win32-arm64-msvc@4.21.0': resolution: {integrity: sha512-s5ofkz/hfcrlaybtonfy1twndfyre1womwu+6kcpm/iatybvrrgmzvm+vcfwxmc5zhdlgfe0n4xorsdpi7/4xq==} cpu: [arm64] os: [win32] '@rollup/rollup-win32-ia32-msvc@4.21.0': resolution: {integrity: sha512-g9+teqrnaa6nbpqyuqgtiopmnfgnmkr3kmukfbdsiyy23lzvucpiuwjtrx6ezycjjodxrh52rbr9oxvm+fp5wg==} cpu: [ia32] os: [win32] '@rollup/rollup-win32-x64-msvc@4.21.0': resolution: {integrity: sha512-2jscdzwtqvrhejhlfz1jy6w6keuetff9nzyszxzslnvkdx+dpsdj+rbjkm74nvg2rdx0gwbs+imdvwjuq3s9pq==} cpu: [x64] os: [win32] '@twind/core@1.1.3': resolution: {integrity: sha512-/b/anfermb2ieyjsjy3sjxqvxhrt77gbdknlmizqxirr4vnjqiuhx7kqusrzdcwumyguogkamz+aolzn6meslw==} engines: {node: '&gt;=14.15.0'} peerdependencies: typescript: ^4.8.4 peerdependenciesmeta: typescript: optional: true '@twind/preset-autoprefix@1.0.7': resolution: {integrity: sha512-3wmho0pg/cvxybnzuv0twcl7cp0wd5kpywaqe/koalwmovbj+nh6j3v6y3i3prumfag5dc78qbybha1o11ug3w==} engines: {node: '&gt;=14.15.0'} peerdependencies: '@twind/core': ^1.1.0 typescript: ^4.8.4 peerdependenciesmeta: typescript: optional: true '@twind/preset-tailwind@1.1.4': resolution: {integrity: sha512-zv85wrp/dw4axgwrlfh7kygn/kjf3k04fmlvl2ajoxzgydcaozdkl8ma3hzakq+wggbfrubub/ku2rtv/wjzvw==} engines: {node: '&gt;=14.15.0'} peerdependencies: '@twind/core': ^1.1.0 typescript: ^4.8.4 peerdependenciesmeta: typescript: optional: true '@twind/with-web-components@1.1.3': resolution: {integrity: sha512-pm2ps58pklqva2hsc/cm2y5ktiwojj6896w4+kximcohuoofteynokyvbdr8cpkvm+vr+ggpitndvpzaoxa+dg==} engines: {node: '&gt;=14.15.0'} peerdependencies: '@twind/core': ^1.1.0 typescript: ^4.8.4 peerdependenciesmeta: typescript: optional: true '@types/babel__core@7.20.5': resolution: {integrity: sha512-qoqprzvz5wqfjwmdqeserxwv3rqmvhgpbxffvywhbx9x47poia6i/+dxefemzkoagoatdaignsmqmiu61yryza==} '@types/babel__generator@7.6.4': resolution: {integrity: sha512-tfkcib9j2k755yrtalxd44mcork+gfpipvc3sxhjrawj6pfnqxrse4clq5y/rq+g3mrburmax/lg8qn2t9mssg==} '@types/babel__template@7.4.1': resolution: {integrity: sha512-azbfkemx6kmg5io+/rdgt0dkgrebouvr0cdm3fz9qjwpaqgjrqxl7c+6hotczcmll7kfyeqpgbyi2lhdss4u7g==} '@types/babel__traverse@7.20.1': resolution: {integrity: sha512-mithfxnhtgwsgzwtt68urpovln4ereih1u3qtqin4vdaxwkrvvgcsvw/qth0m0qq3pjpngou5jam/ydk7ogbqg==} '@types/estree@1.0.5': resolution: {integrity: sha512-/kyrxgdlwzhob7q+wtsuqlfrtcduccpfy+x+9imbphk8qllhx2wipyus5dytr9wa/ylzabiovy7qvdb1aq6lyw==} '@types/node@20.16.1': resolution: {integrity: sha512-zjdo7weadftsynz5qitdfrcrhqdvqi1xqnq0voizpjm/dvaodqqiuwbjpkvsxmti0myrgrikcdjmphossnpejq==} ansi-styles@3.2.1: resolution: {integrity: sha512-vt0zi6kzrdth8yyjw3smbym/u+nqfsaxepwo0pf9sq8/e94wxxoppkx9fr1flyctovdnoq+8ntlqfxirc+r5qa==} engines: {node: '&gt;=4'} asynckit@0.4.0: resolution: {integrity: sha512-oei9oh4trh0yqu3gxhx79dm/mwvgvbzjasnark+bshkj0s5cfhcgyakrebjrhwatxkbz+ioidylxrkim2mjw0q==} axios@1.4.0: resolution: {integrity: sha512-s4xcwmemzvo64t9gfvqdoxgyrdj/wsszc7jvdgx5u1sd0jwsuplqb3symusag+edf6ziymenspvqltsc1pisea==} babel-plugin-jsx-dom-expressions@0.38.1: resolution: {integrity: sha512-4fd4h69cu4jhx2uldevx4yc5t/fc/dmaafhsm8hxm7sjhyzjr09gbvyhdofza+91f/g9e6tizjblcmkoxwmlew==} peerdependencies: '@babel/core': ^7.20.12 babel-preset-solid@1.8.19: resolution: {integrity: sha512-f3moudx3i4znhstnxubno+5kgsbvhpbgrpgqfrprs8w7fovjuosd1/f9qdyd9dgclhfr+j7v14931eu1peddmq==} peerdependencies: '@babel/core': ^7.0.0 before-after-hook@2.2.3: resolution: {integrity: sha512-nzunlzexiah/46wdhanlyr2bxropng4f/zusa3opznllcugraof2zndiodwrmbnvsuzk6l9pmquqb38cfbzwkq==} braces@3.0.3: resolution: {integrity: sha512-yqbxgo/oszvd2isillro+7hf6q18ejrksesdomzkepkxct3gvd8olcoqdizgupr5fj+ede8go/lxc1bzfmpxva==} engines: {node: '&gt;=8'} browserslist@4.23.3: resolution: {integrity: sha512-btwcfjvji4ywdnfau8rhz+b1q/vlouitrm3rlp6y1tygwioa+inuyirgxubxo8na1qkmhmylb/ivqg5tt4efoa==} engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || &gt;=13.7} hasbin: true caniuse-lite@1.0.30001651: resolution: {integrity: sha512-9cf+xv1jjne1xpzlguuxlnke1bodkqrqyyfj9tdysqhduqa4hu4or9hlugowyqc/aj8whjsgvv+bwkh0+tegrg==} chalk@2.4.2: resolution: {integrity: sha512-mti+f9lpjncwf4twv8/ortttf1gzi+f8fqlyadouralcfwfqwf2+ngchshjkcb+ifblq9buzwe1xckqu4pesuq==} engines: {node: '&gt;=4'} color-convert@1.9.3: resolution: {integrity: sha512-qfautd+vfdatfqcc8ccyyt1fywxsqaik2csd6zdb8n3cpsebavrxp9zogg6g/shhjyat88/az/iudgalsnvbgg==} color-name@1.1.3: resolution: {integrity: sha512-72fsenhmw2hzmtvheca9kcmpeibzwiqsjn+bhcbbs9vr1mtt+vjjpdksibnumkaw8tfudpjk5suu3qhe9nexdw==} combined-stream@1.0.8: resolution: {integrity: sha512-fqn4mrfujehf7cbbbmjfxhksdq+2kaarblmrbvcvfe5bb1hzkxtsfasdhdlz9zoywxh8lddnvmmoe/+5cdoedg==} engines: {node: '&gt;= 0.8'} convert-source-map@2.0.0: resolution: {integrity: sha512-kvp459hrv2fej1casi1ku+my3kash19tfyktz2xwmmeq6bk2nu3xxvfj+q61m0xktwwt+1hsyf3jzstms3arjg==} csstype@3.1.2: resolution: {integrity: sha512-i7k1uu0mbpzafkg4ni5q7vs2t+3gwww648spaf+rg7pi9ds18ugn+lvg4shczudklhi5lwbxyqfs8+dufybsgq==} debug@4.3.4: resolution: {integrity: sha512-prwfhusu3edtqjpvnny7jcket1j0t5ouosfzppzsekd52zl8quffipeiswxqivhwgvhogx+7g/vcnnhehwxfkq==} engines: {node: '&gt;=6.0'} peerdependencies: supports-color: '*' peerdependenciesmeta: supports-color: optional: true delayed-stream@1.0.0: resolution: {integrity: sha512-zysd7nf91alb0rxl4kgrkhbxl7eds1damedcovawxnld7sdhpngtuii2aakg7a7qs41jxpsz17p4vdgnmhk3mq==} engines: {node: '&gt;=0.4.0'} deprecation@2.3.1: resolution: {integrity: sha512-xmhiy4f3sckvwmsq4wnvas8bhox0dmvwrywoskhaili0ywmdwptbsku2hnxrvf7jtwdrsoewyqsfbxj8b7rljq==} electron-to-chromium@1.5.13: resolution: {integrity: sha512-lbbcvtij4j6ss4tb5tlp1b4lyfcdmkwstzxpyagvgtrasep4bvragabop7zjtqmnjpsq9sqg4brworonaqtm7q==} esbuild@0.18.12: resolution: {integrity: sha512-xuovlddtsdslxststdut41op21ytmf4/bds46aa3xpj7x5h2emwbf1oae3qjuh3bdksocnxgzguz7xhibya6tg==} engines: {node: '&gt;=12'} hasbin: true esbuild@0.21.5: resolution: {integrity: sha512-mg3opmv4hxywwpodxu3qda5xckqi+vctzq8s9j/epkhb2hzkxq4snfze3+nk93jyxc8vmsep+lousc/rvkabqw==} engines: {node: '&gt;=12'} hasbin: true escalade@3.1.2: resolution: {integrity: sha512-erchmcae19vr8vqge50xisvomy19rg6gfu3+r3jkeo46sulmwbksvvyoggqv+jofl84zsoslmv6gxa89pmtgma==} engines: {node: '&gt;=6'} escape-string-regexp@1.0.5: resolution: {integrity: sha512-vbrorb5fuqwvla16u8r/qgafiya2qgzwdrnmczuykrbdsumg6i1zcgqrefkrvhuokigvne7bq35dsfo1qvjqfg==} engines: {node: '&gt;=0.8.0'} fill-range@7.1.1: resolution: {integrity: sha512-ysgpe3whlk8zyi4twdg2jy3ebrz2rxowdxnld4bkqb00cc/1zw9awnc0i9ztdjitivtqvai9kalykrc+hbw0yg==} engines: {node: '&gt;=8'} follow-redirects@1.15.2: resolution: {integrity: sha512-vqlg33o04kaq8uyi2tvnbdrwp1qwxnnea+nmib4evm28v0hmp17z7ag1+waknzvq4kextq3221ye5qtjp91jwa==} engines: {node: '&gt;=4.0'} peerdependencies: debug: '*' peerdependenciesmeta: debug: optional: true form-data@4.0.0: resolution: {integrity: sha512-eteklsgi5t0qmzuixoa/q6vcnxclqp5vdugspuayi6svgi2clppp+xgehumahc+zggn31kd235w35f7hykkaww==} engines: {node: '&gt;= 6'} fsevents@2.3.3: resolution: {integrity: sha512-5xodfx+fl7faatnagmwppbftwh/r77wmmmqqhgs65c3vvb0yhrgf+b1ymz3441tmj5n63k0212xnojwzlhffqw==} engines: {node: ^8.16.0 || ^10.6.0 || &gt;=11.0.0} os: [darwin] fuse.js@6.6.2: resolution: {integrity: sha512-cjajkxccxc8qiicpbf9ygxy0w/tvzs3ueisdxhyidtk8ol93pe+6zj7ljcqvv4dzbqcrioz+kq/ne4rxzhsiga==} engines: {node: '&gt;=10'} gensync@1.0.0-beta.2: resolution: {integrity: sha512-3hn7naskyvmdlqy55gnw3nq+meseaeptqlg+vebj7zzqembvnhzcgyyeqfo/tlyz6eqifcp1hcsczo+nggs8zg==} engines: {node: '&gt;=6.9.0'} globals@11.12.0: resolution: {integrity: sha512-wobp/eeguiisjsp7wcv/y6mo+lv9uoncwqxuffm8ebwzwngyfbd6gz+iekq9jcmyhoh99g15m3t+qavhfjizva==} engines: {node: '&gt;=4'} has-flag@3.0.0: resolution: {integrity: sha512-skjf1+ceqbr4smkvqnbdndtf4txpvhvgateu0t918bl30fnbe2m4vnlx+vwe/dpjlb+huggyzw7uqxh98hpeyw==} engines: {node: '&gt;=4'} html-entities@2.3.3: resolution: {integrity: sha512-dv5ln36z34nntdgnz0ewgblzenelnatkifa4kynog2tdi6mz1uswiq1wakdyjnjwydido7fa2so1ctxpxl8vxa==} is-number@7.0.0: resolution: {integrity: sha512-41cifkg6e8tylspdttpelvmqvsbevzttthverd741+pnz8anv0004mrl43qkpdlk9cgvnp6nzwzublbgxyxxng==} engines: {node: '&gt;=0.12.0'} is-plain-object@5.0.0: resolution: {integrity: sha512-vrszkkbmm5jmdoklbltakfq5qr7vditfgxxyfxxowvj387gegnocsoh6msy00sgz3fp84b1naa1psqgcciep5q==} engines: {node: '&gt;=0.10.0'} is-what@4.1.15: resolution: {integrity: sha512-ukua1wfy3yt+yqsd6mtuea2zsi3g1oplqtflgapj7z63vugn5pxfpnqfeslmfnjdesdvotkp1ruwkyjb4yfhga==} engines: {node: '&gt;=12.13'} js-tokens@4.0.0: resolution: {integrity: sha512-rdjuflce3cuzkimqqgscu06fpu9udijo0beybphhn4k6apgjtifcoctt9bcxopybtpd2kcm6sbzg4causw/pkq==} jsesc@2.5.2: resolution: {integrity: sha512-oyu7xezjkcq3c5ps3qizsqfnpqojyzza99wd9awd05nctc5pwokshk2mkl6hxqr6/cy2lbndplzbpuqhxe63ga==} engines: {node: '&gt;=4'} hasbin: true json5@2.2.3: resolution: {integrity: sha512-xmowe7eyhyh14cldvpoyg+goh3ryx++kpzryljwsw98t3nk+u8xol8fwkogwtzdb8lxgf6zywduzehmwfxasyg==} engines: {node: '&gt;=6'} hasbin: true lru-cache@5.1.1: resolution: {integrity: sha512-kpnarqa3iwv+jta0utuvvbrh+jlrr1fv0e56ggzafoxn7dk/fviadw8lhmk52dlch4wp2n6gi8vn1aesbfgo9w==} merge-anything@5.1.7: resolution: {integrity: sha512-ertbob1n5iyh0tkqdaoq4ipsp/5qsr79dzrz8hepxrx10rwwr/iqxdokmbsrcthy1fh5ehisdtpsc93fpxuniq==} engines: {node: '&gt;=12.13'} micromatch@4.0.8: resolution: {integrity: sha512-pxwfbhyu0hbcpw8dn0e+wdyb7af3dslvwki3hgv84idf4tyfoc0ysxfd0goxw7nsv4t/pzejqxsyseifcko2ba==} engines: {node: '&gt;=8.6'} mime-db@1.52.0: resolution: {integrity: sha512-spu4uv7dylvtwjxwwxhd0puihvnie7tyabq5swxdcb9muyvogroqowyqqokpj8cibe+1etvlook1uc2nu3gyvg==} engines: {node: '&gt;= 0.6'} mime-types@2.1.35: resolution: {integrity: sha512-zdy+bpm5zttf+ypcrau9nk0ugicypt0qtt1nzwfv4s++tnkcgvat0g6+4r2ui4mjqjzyshb1zxuwl50hzaexiw==} engines: {node: '&gt;= 0.6'} ms@2.1.2: resolution: {integrity: sha512-sgkpx+vjmtma6mx27oa4fbfelfczz4s4xqegoxcv68tt+jb3vk/ryakwp0ptkywtmlsm0b+adutevbs1peah2w==} nanoid@3.3.7: resolution: {integrity: sha512-esrppjcpiatrimc1u6ungp8xfcz8mqwgqdt1mtbq7naamvxdfvnxbvwv3x2y6cdeucicssdhdqzbhyab8qeo2g==} engines: {node: ^10 || ^12 || ^13.7 || ^14 || &gt;=15.0.1} hasbin: true node-fetch@2.6.12: resolution: {integrity: sha512-c/fgu2e8toujuivio0h+tpq6hwo4eemchopioxtxcrvghxdkq+qohqezw7tup3klv3bc8frmo5nmcc7zm1vp6g==} engines: {node: 4.x || &gt;=6.0.0} peerdependencies: encoding: ^0.1.0 peerdependenciesmeta: encoding: optional: true node-releases@2.0.18: resolution: {integrity: sha512-d9vext4sj7zeoqgx6r5em022wpl+ewpooli+5upwn2jct1aosuqehqp214x33wkwx3jqmvim+tiovododfs40g==} once@1.4.0: resolution: {integrity: sha512-lnajgi+2q5urqbkccekhtqopaxduxnzzelqtzy0mfuauaeqe1e+nyvgdz/aiyni6z9mzo5dv1h8n58/gelp3+w==} picocolors@1.0.0: resolution: {integrity: sha512-1fygrotllhu66zi26votdv8yrgm0fccecssto+mhsz0d/dgw2sm8e8ajw7nu5vvtrt5gxbez5qbujr+hylykjq==} picocolors@1.0.1: resolution: {integrity: sha512-anp1z8qwhkbmu7mfp5itt+wqkxgwzf7ztyglcdzabysa9vd0xt392u0rvmz9pooabj0uhjkyyo9/upk0hreqew==} picomatch@2.3.1: resolution: {integrity: sha512-ju3tehtnjme2vcgfzuy8exzcdvweqb2a8fsivwasthhawjeevd1o1qd80cu6+zdexxslbssulwjjkcbwqrquva==} engines: {node: '&gt;=8.6'} postcss@8.4.41: resolution: {integrity: sha512-tesuflq0wkzqavg52pwl6khglkp6xb6hetodoym0wt2uhyxna4k25ezzmgkns3bh1rlvbzcrepply0rhnnohvq==} engines: {node: ^10 || ^12 || &gt;=14} proxy-from-env@1.1.0: resolution: {integrity: sha512-d+zkorcba9f1tdwrk0racr3gpv50cmxcrz4x8k5ltsud1dkw47mkjezqnunitrtkwwgtauso1rvfrig9zxifyg==} rollup@4.21.0: resolution: {integrity: sha512-vo+s/lfa2lms7rz2qoubi6i5hwzwzxeuictilzlbhi+lantvhhoion2s1jksa5uedq7l3vberd0fxk44ltyjbq==} engines: {node: '&gt;=18.0.0', npm: '&gt;=8.0.0'} hasbin: true semver@6.3.1: resolution: {integrity: sha512-br7vvdcvho+q2xbewskxs6dje1qrnb7dxzurogb71cwosficbxysiagd+kl0mmq/mprg9yarrkyrqxto6xjmza==} hasbin: true seroval@0.5.1: resolution: {integrity: sha512-zfhqvb59hmiaujg5ydynupy8khyr5imgntddhbzg68ufh1ynkv9koyoaabf71ovbqxj8vkwnmhajehe7fwkh5g==} engines: {node: '&gt;=10'} snarkdown@2.0.0: resolution: {integrity: sha512-mgl/7k/azdxctjingro7chgdqab9fgm/1tvlcenenb7div6obadatzs16jhfyhhbgodht3b7rzrc5qk8pfhg3a==} solid-js@1.7.8: resolution: {integrity: sha512-xhbwk1fvfd0jmkljko7ffhefjmtsgyeuvkcq2a8hzrxfiusjagsrppafqeo+f6l+e8oe3crospil6kbzjc1fjq==} solid-refresh@0.6.3: resolution: {integrity: sha512-f3apsx6hvw9ttm5lylth8q15x6mli/j3dn+o3eqyrtttxidepstwaydozt01/ya+7obcciaggeyxiopgzzqtba==} peerdependencies: solid-js: ^1.3 solid-toast@0.5.0: resolution: {integrity: sha512-t770jakjys2p9b8qa1zmlod51kykwxbtayjepvuoyex5c5fh5s/htububzawfcqrckmae8khyiicvdza8bonxq==} peerdependencies: solid-js: ^1.5.4 source-map-js@1.2.0: resolution: {integrity: sha512-itjw8lvsa0txephiroawscksnlf8syvmfzihltqahluxd88pkcd+cxjvhtdwdcr0izwptsm035ihqktuu1qumg==} engines: {node: '&gt;=0.10.0'} style-vendorizer@2.2.3: resolution: {integrity: sha512-/vdrswvqagspvy9eatn3z6itktuyg+jw1q6uotcqcfrqpdw8bi3e1hxikngw5lvxs2aqpuj7af4autlyeboleg==} supports-color@5.5.0: resolution: {integrity: sha512-qjvjwdxit408miiaqcx4ouksgu2eqagzs2ppkm4aqybjm+zewecw4sffntr4umnzma0ey4f5lglrkb0ax0qmow==} engines: {node: '&gt;=4'} to-fast-properties@2.0.0: resolution: {integrity: sha512-/oakk0xyrs3dmxryql/ydc+fxfuvyhdlxmhrmv3z915w2hf1tnn1omb354j8vugo/hbrzyd6y3sa7v7gs/ceog==} engines: {node: '&gt;=4'} to-regex-range@5.0.1: resolution: {integrity: sha512-65p7iz6x5yer1cwcgvqxbbiw7uk3goy5didtz4rdvelqhrdjp+li/hx6tyk0neb+2gcynecmjigqradcsnk8sq==} engines: {node: '&gt;=8.0'} tr46@0.0.3: resolution: {integrity: sha512-n3wmsuqv66lt30crxnbejx4gewlow3v6rr4mccv6prnfwhs01rkgyfdjpnbyd9br7lpxv1+emh01fhnq2gdgrw==} typescript@4.9.5: resolution: {integrity: sha512-1fxk9e2hm+qzzq7z+mcjihl4nw1f2ezmu9nq9i3zaagqibafqywcvu6wywauyqrrzolxou8xzsyxlen8okj24g==} engines: {node: '&gt;=4.2.0'} hasbin: true undici-types@6.19.8: resolution: {integrity: sha512-ve2kp6f/jnbpbfyobghuerc9g1fygn/f8n1lwtwnxcezd6ifqtwuqcnxgetmmq6dlrrc1hrsrbnczpokrrdhjw==} universal-user-agent@6.0.0: resolution: {integrity: sha512-isynax3wxokaulpdzwhqqbmix1k2tb9fb3ggdbrxcscfyv2ch7wxparbsfeg8s/safwxtt7h4qghaiktp9447w==} update-browserslist-db@1.1.0: resolution: {integrity: sha512-edraaayk2cue1wof2dkehzxqoqvfoorjfns6neyj01gp2bemrpbainjm2idxe3kcukhwnvhiqcjm6thl2z+hzq==} hasbin: true peerdependencies: browserslist: '&gt;= 4.21.0' validate-html-nesting@1.2.2: resolution: {integrity: sha512-hgdgqozcsqjmyfk5urgfcweqsssrk63awe0t/imr0bz0qmtnuaihzthw81guu3qx9abli99neuian6p9gvysng==} vite-plugin-css-injected-by-js@3.2.0: resolution: {integrity: sha512-a6mtym/qfswvctlezzzkjwl2zpxrxxqd6/1uhy0t/g0iilhl4gg6n4oprbcc93axiwkes19jnbukwd0xt+pztg==} peerdependencies: vite: '&gt;2.0.0-0' vite-plugin-mkcert@1.16.0: resolution: {integrity: sha512-5r+g8sb9wzzlnufekgwzo3e0p6qls6rbxk5p9z/itxnaimsyohgjk/yfvpvxm9euglp9hjridq0luejo9v1nvg==} engines: {node: '&gt;=v16.7.0'} peerdependencies: vite: '&gt;=3' vite-plugin-restart@0.4.1: resolution: {integrity: sha512-myhdfaa2hmosavr/2pshj6tokvfso+zqf6fadwgc8jsirsnig+4giy9ezosysggrjvsnbwzxkdjavn8ag8ruka==} peerdependencies: vite: ^2.9.0 || ^3.0.0 || ^4.0.0 || ^5.0.0 vite-plugin-solid@2.10.2: resolution: {integrity: sha512-aoetwme2babsxmxdo+buwecc8ifhcks6wqv/1ned+q7vhpap5fmihlcazr+duj04/khx/1ubu0l1/gwp+rmapq==} peerdependencies: '@testing-library/jest-dom': ^5.16.6 || ^5.17.0 || ^6.* solid-js: ^1.7.2 vite: ^3.0.0 || ^4.0.0 || ^5.0.0 peerdependenciesmeta: '@testing-library/jest-dom': optional: true vite@5.4.2: resolution: {integrity: sha512-ddrqtrhp5c1ftfzcsamxjk6vdpkvt+2/mide07gw2ykeht49o0z/vhs3zz8iv/gh8bjjkhwoe5rjanrw5xf/ga==} engines: {node: ^18.0.0 || &gt;=20.0.0} hasbin: true peerdependencies: '@types/node': ^18.0.0 || &gt;=20.0.0 less: '*' lightningcss: ^1.21.0 sass: '*' sass-embedded: '*' stylus: '*' sugarss: '*' terser: ^5.4.0 peerdependenciesmeta: '@types/node': optional: true less: optional: true lightningcss: optional: true sass: optional: true sass-embedded: optional: true stylus: optional: true sugarss: optional: true terser: optional: true vitefu@0.2.5: resolution: {integrity: sha512-sghtmloqaeegnd2evz849zbacbnwqciwrh57t18fxcxozop0uqu0uzlihjblf/ewvzuce0sheqpcdo+evvcg8q==} peerdependencies: vite: ^3.0.0 || ^4.0.0 || ^5.0.0 peerdependenciesmeta: vite: optional: true webidl-conversions@3.0.1: resolution: {integrity: sha512-2jan3z8ar6rjk8sm8orrc0h/bcl/dql7trpdgz4i1cjdf+eamlmyxbhyxukl849eucpfhvboxmsflfob8kxaeq==} whatwg-url@5.0.0: resolution: {integrity: sha512-sae57nupxk6v3hy35+jzbwya0rksy0xr8jsxzpwglr7ys0ibzhgvia1/tugjlmsvqs8pb9anvicxeuohlprytw==} wrappy@1.0.2: resolution: {integrity: sha512-l4sp/drseor9wl6evv2+tuqn63dmkpjz/sp9xkghtebv9klps1xusz3u7/iqo4wxtcfb4bgpqprcr3qcvezpcq==} yallist@3.1.1: resolution: {integrity: sha512-a4ugqawph59moxuynag2ewncqs4i4f43tv3joam+s2vdams9nsk8gpdmlrchpksft7h3k6toounn2pb7roxx4g==} snapshots: '@ampproject/remapping@2.2.1': dependencies: '@jridgewell/gen-mapping': 0.3.3 '@jridgewell/trace-mapping': 0.3.18 '@babel/code-frame@7.24.7': dependencies: '@babel/highlight': 7.24.7 picocolors: 1.0.0 '@babel/compat-data@7.25.4': {} '@babel/core@7.25.2': dependencies: '@ampproject/remapping': 2.2.1 '@babel/code-frame': 7.24.7 '@babel/generator': 7.25.5 '@babel/helper-compilation-targets': 7.25.2 '@babel/helper-module-transforms': 7.25.2(@babel/core@7.25.2) '@babel/helpers': 7.25.0 '@babel/parser': 7.25.4 '@babel/template': 7.25.0 '@babel/traverse': 7.25.4 '@babel/types': 7.25.4 convert-source-map: 2.0.0 debug: 4.3.4 gensync: 1.0.0-beta.2 json5: 2.2.3 semver: 6.3.1 transitivepeerdependencies: - supports-color '@babel/generator@7.25.5': dependencies: '@babel/types': 7.25.4 '@jridgewell/gen-mapping': 0.3.5 '@jridgewell/trace-mapping': 0.3.25 jsesc: 2.5.2 '@babel/helper-compilation-targets@7.25.2': dependencies: '@babel/compat-data': 7.25.4 '@babel/helper-validator-option': 7.24.8 browserslist: 4.23.3 lru-cache: 5.1.1 semver: 6.3.1 '@babel/helper-module-imports@7.18.6': dependencies: '@babel/types': 7.22.5 '@babel/helper-module-imports@7.24.7': dependencies: '@babel/traverse': 7.25.4 '@babel/types': 7.25.4 transitivepeerdependencies: - supports-color '@babel/helper-module-transforms@7.25.2(@babel/core@7.25.2)': dependencies: '@babel/core': 7.25.2 '@babel/helper-module-imports': 7.24.7 '@babel/helper-simple-access': 7.24.7 '@babel/helper-validator-identifier': 7.24.7 '@babel/traverse': 7.25.4 transitivepeerdependencies: - supports-color '@babel/helper-plugin-utils@7.22.5': {} '@babel/helper-simple-access@7.24.7': dependencies: '@babel/traverse': 7.25.4 '@babel/types': 7.25.4 transitivepeerdependencies: - supports-color '@babel/helper-string-parser@7.22.5': {} '@babel/helper-string-parser@7.24.8': {} '@babel/helper-validator-identifier@7.22.5': {} '@babel/helper-validator-identifier@7.24.7': {} '@babel/helper-validator-option@7.24.8': {} '@babel/helpers@7.25.0': dependencies: '@babel/template': 7.25.0 '@babel/types': 7.25.4 '@babel/highlight@7.24.7': dependencies: '@babel/helper-validator-identifier': 7.24.7 chalk: 2.4.2 js-tokens: 4.0.0 picocolors: 1.0.0 '@babel/parser@7.22.7': dependencies: '@babel/types': 7.22.5 '@babel/parser@7.25.4': dependencies: '@babel/types': 7.25.4 '@babel/plugin-syntax-jsx@7.22.5(@babel/core@7.25.2)': dependencies: '@babel/core': 7.25.2 '@babel/helper-plugin-utils': 7.22.5 '@babel/template@7.25.0': dependencies: '@babel/code-frame': 7.24.7 '@babel/parser': 7.25.4 '@babel/types': 7.25.4 '@babel/traverse@7.25.4': dependencies: '@babel/code-frame': 7.24.7 '@babel/generator': 7.25.5 '@babel/parser': 7.25.4 '@babel/template': 7.25.0 '@babel/types': 7.25.4 debug: 4.3.4 globals: 11.12.0 transitivepeerdependencies: - supports-color '@babel/types@7.22.5': dependencies: '@babel/helper-string-parser': 7.22.5 '@babel/helper-validator-identifier': 7.22.5 to-fast-properties: 2.0.0 '@babel/types@7.25.4': dependencies: '@babel/helper-string-parser': 7.24.8 '@babel/helper-validator-identifier': 7.24.7 to-fast-properties: 2.0.0 '@esbuild/aix-ppc64@0.21.5': optional: true '@esbuild/android-arm64@0.18.12': optional: true '@esbuild/android-arm64@0.21.5': optional: true '@esbuild/android-arm@0.18.12': optional: true '@esbuild/android-arm@0.21.5': optional: true '@esbuild/android-x64@0.18.12': optional: true '@esbuild/android-x64@0.21.5': optional: true '@esbuild/darwin-arm64@0.18.12': optional: true '@esbuild/darwin-arm64@0.21.5': optional: true '@esbuild/darwin-x64@0.18.12': optional: true '@esbuild/darwin-x64@0.21.5': optional: true '@esbuild/freebsd-arm64@0.18.12': optional: true '@esbuild/freebsd-arm64@0.21.5': optional: true '@esbuild/freebsd-x64@0.18.12': optional: true '@esbuild/freebsd-x64@0.21.5': optional: true '@esbuild/linux-arm64@0.18.12': optional: true '@esbuild/linux-arm64@0.21.5': optional: true '@esbuild/linux-arm@0.18.12': optional: true '@esbuild/linux-arm@0.21.5': optional: true '@esbuild/linux-ia32@0.18.12': optional: true '@esbuild/linux-ia32@0.21.5': optional: true '@esbuild/linux-loong64@0.18.12': optional: true '@esbuild/linux-loong64@0.21.5': optional: true '@esbuild/linux-mips64el@0.18.12': optional: true '@esbuild/linux-mips64el@0.21.5': optional: true '@esbuild/linux-ppc64@0.18.12': optional: true '@esbuild/linux-ppc64@0.21.5': optional: true '@esbuild/linux-riscv64@0.18.12': optional: true '@esbuild/linux-riscv64@0.21.5': optional: true '@esbuild/linux-s390x@0.18.12': optional: true '@esbuild/linux-s390x@0.21.5': optional: true '@esbuild/linux-x64@0.18.12': optional: true '@esbuild/linux-x64@0.21.5': optional: true '@esbuild/netbsd-x64@0.18.12': optional: true '@esbuild/netbsd-x64@0.21.5': optional: true '@esbuild/openbsd-x64@0.18.12': optional: true '@esbuild/openbsd-x64@0.21.5': optional: true '@esbuild/sunos-x64@0.18.12': optional: true '@esbuild/sunos-x64@0.21.5': optional: true '@esbuild/win32-arm64@0.18.12': optional: true '@esbuild/win32-arm64@0.21.5': optional: true '@esbuild/win32-ia32@0.18.12': optional: true '@esbuild/win32-ia32@0.21.5': optional: true '@esbuild/win32-x64@0.18.12': optional: true '@esbuild/win32-x64@0.21.5': optional: true '@jridgewell/gen-mapping@0.3.3': dependencies: '@jridgewell/set-array': 1.1.2 '@jridgewell/sourcemap-codec': 1.4.15 '@jridgewell/trace-mapping': 0.3.18 '@jridgewell/gen-mapping@0.3.5': dependencies: '@jridgewell/set-array': 1.2.1 '@jridgewell/sourcemap-codec': 1.4.15 '@jridgewell/trace-mapping': 0.3.25 '@jridgewell/resolve-uri@3.1.0': {} '@jridgewell/set-array@1.1.2': {} '@jridgewell/set-array@1.2.1': {} '@jridgewell/sourcemap-codec@1.4.14': {} '@jridgewell/sourcemap-codec@1.4.15': {} '@jridgewell/trace-mapping@0.3.18': dependencies: '@jridgewell/resolve-uri': 3.1.0 '@jridgewell/sourcemap-codec': 1.4.14 '@jridgewell/trace-mapping@0.3.25': dependencies: '@jridgewell/resolve-uri': 3.1.0 '@jridgewell/sourcemap-codec': 1.4.15 '@octokit/auth-token@3.0.4': {} '@octokit/core@4.2.4': dependencies: '@octokit/auth-token': 3.0.4 '@octokit/graphql': 5.0.6 '@octokit/request': 6.2.8 '@octokit/request-error': 3.0.3 '@octokit/types': 9.3.2 before-after-hook: 2.2.3 universal-user-agent: 6.0.0 transitivepeerdependencies: - encoding '@octokit/endpoint@7.0.6': dependencies: '@octokit/types': 9.3.2 is-plain-object: 5.0.0 universal-user-agent: 6.0.0 '@octokit/graphql@5.0.6': dependencies: '@octokit/request': 6.2.8 '@octokit/types': 9.3.2 universal-user-agent: 6.0.0 transitivepeerdependencies: - encoding '@octokit/openapi-types@18.0.0': {} '@octokit/plugin-paginate-rest@6.1.2(@octokit/core@4.2.4)': dependencies: '@octokit/core': 4.2.4 '@octokit/tsconfig': 1.0.2 '@octokit/types': 9.3.2 '@octokit/plugin-request-log@1.0.4(@octokit/core@4.2.4)': dependencies: '@octokit/core': 4.2.4 '@octokit/plugin-rest-endpoint-methods@7.2.3(@octokit/core@4.2.4)': dependencies: '@octokit/core': 4.2.4 '@octokit/types': 10.0.0 '@octokit/request-error@3.0.3': dependencies: '@octokit/types': 9.3.2 deprecation: 2.3.1 once: 1.4.0 '@octokit/request@6.2.8': dependencies: '@octokit/endpoint': 7.0.6 '@octokit/request-error': 3.0.3 '@octokit/types': 9.3.2 is-plain-object: 5.0.0 node-fetch: 2.6.12 universal-user-agent: 6.0.0 transitivepeerdependencies: - encoding '@octokit/rest@19.0.13': dependencies: '@octokit/core': 4.2.4 '@octokit/plugin-paginate-rest': 6.1.2(@octokit/core@4.2.4) '@octokit/plugin-request-log': 1.0.4(@octokit/core@4.2.4) '@octokit/plugin-rest-endpoint-methods': 7.2.3(@octokit/core@4.2.4) transitivepeerdependencies: - encoding '@octokit/tsconfig@1.0.2': {} '@octokit/types@10.0.0': dependencies: '@octokit/openapi-types': 18.0.0 '@octokit/types@9.3.2': dependencies: '@octokit/openapi-types': 18.0.0 '@rollup/rollup-android-arm-eabi@4.21.0': optional: true '@rollup/rollup-android-arm64@4.21.0': optional: true '@rollup/rollup-darwin-arm64@4.21.0': optional: true '@rollup/rollup-darwin-x64@4.21.0': optional: true '@rollup/rollup-linux-arm-gnueabihf@4.21.0': optional: true '@rollup/rollup-linux-arm-musleabihf@4.21.0': optional: true '@rollup/rollup-linux-arm64-gnu@4.21.0': optional: true '@rollup/rollup-linux-arm64-musl@4.21.0': optional: true '@rollup/rollup-linux-powerpc64le-gnu@4.21.0': optional: true '@rollup/rollup-linux-riscv64-gnu@4.21.0': optional: true '@rollup/rollup-linux-s390x-gnu@4.21.0': optional: true '@rollup/rollup-linux-x64-gnu@4.21.0': optional: true '@rollup/rollup-linux-x64-musl@4.21.0': optional: true '@rollup/rollup-win32-arm64-msvc@4.21.0': optional: true '@rollup/rollup-win32-ia32-msvc@4.21.0': optional: true '@rollup/rollup-win32-x64-msvc@4.21.0': optional: true '@twind/core@1.1.3(typescript@4.9.5)': dependencies: csstype: 3.1.2 optionaldependencies: typescript: 4.9.5 '@twind/preset-autoprefix@1.0.7(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5)': dependencies: '@twind/core': 1.1.3(typescript@4.9.5) style-vendorizer: 2.2.3 optionaldependencies: typescript: 4.9.5 '@twind/preset-tailwind@1.1.4(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5)': dependencies: '@twind/core': 1.1.3(typescript@4.9.5) optionaldependencies: typescript: 4.9.5 '@twind/with-web-components@1.1.3(@twind/core@1.1.3(typescript@4.9.5))(typescript@4.9.5)': dependencies: '@twind/core': 1.1.3(typescript@4.9.5) optionaldependencies: typescript: 4.9.5 '@types/babel__core@7.20.5': dependencies: '@babel/parser': 7.22.7 '@babel/types': 7.22.5 '@types/babel__generator': 7.6.4 '@types/babel__template': 7.4.1 '@types/babel__traverse': 7.20.1 '@types/babel__generator@7.6.4': dependencies: '@babel/types': 7.22.5 '@types/babel__template@7.4.1': dependencies: '@babel/parser': 7.22.7 '@babel/types': 7.22.5 '@types/babel__traverse@7.20.1': dependencies: '@babel/types': 7.22.5 '@types/estree@1.0.5': {} '@types/node@20.16.1': dependencies: undici-types: 6.19.8 ansi-styles@3.2.1: dependencies: color-convert: 1.9.3 asynckit@0.4.0: {} axios@1.4.0(debug@4.3.4): dependencies: follow-redirects: 1.15.2(debug@4.3.4) form-data: 4.0.0 proxy-from-env: 1.1.0 transitivepeerdependencies: - debug babel-plugin-jsx-dom-expressions@0.38.1(@babel/core@7.25.2): dependencies: '@babel/core': 7.25.2 '@babel/helper-module-imports': 7.18.6 '@babel/plugin-syntax-jsx': 7.22.5(@babel/core@7.25.2) '@babel/types': 7.22.5 html-entities: 2.3.3 validate-html-nesting: 1.2.2 babel-preset-solid@1.8.19(@babel/core@7.25.2): dependencies: '@babel/core': 7.25.2 babel-plugin-jsx-dom-expressions: 0.38.1(@babel/core@7.25.2) before-after-hook@2.2.3: {} braces@3.0.3: dependencies: fill-range: 7.1.1 browserslist@4.23.3: dependencies: caniuse-lite: 1.0.30001651 electron-to-chromium: 1.5.13 node-releases: 2.0.18 update-browserslist-db: 1.1.0(browserslist@4.23.3) caniuse-lite@1.0.30001651: {} chalk@2.4.2: dependencies: ansi-styles: 3.2.1 escape-string-regexp: 1.0.5 supports-color: 5.5.0 color-convert@1.9.3: dependencies: color-name: 1.1.3 color-name@1.1.3: {} combined-stream@1.0.8: dependencies: delayed-stream: 1.0.0 convert-source-map@2.0.0: {} csstype@3.1.2: {} debug@4.3.4: dependencies: ms: 2.1.2 delayed-stream@1.0.0: {} deprecation@2.3.1: {} electron-to-chromium@1.5.13: {} esbuild@0.18.12: optionaldependencies: '@esbuild/android-arm': 0.18.12 '@esbuild/android-arm64': 0.18.12 '@esbuild/android-x64': 0.18.12 '@esbuild/darwin-arm64': 0.18.12 '@esbuild/darwin-x64': 0.18.12 '@esbuild/freebsd-arm64': 0.18.12 '@esbuild/freebsd-x64': 0.18.12 '@esbuild/linux-arm': 0.18.12 '@esbuild/linux-arm64': 0.18.12 '@esbuild/linux-ia32': 0.18.12 '@esbuild/linux-loong64': 0.18.12 '@esbuild/linux-mips64el': 0.18.12 '@esbuild/linux-ppc64': 0.18.12 '@esbuild/linux-riscv64': 0.18.12 '@esbuild/linux-s390x': 0.18.12 '@esbuild/linux-x64': 0.18.12 '@esbuild/netbsd-x64': 0.18.12 '@esbuild/openbsd-x64': 0.18.12 '@esbuild/sunos-x64': 0.18.12 '@esbuild/win32-arm64': 0.18.12 '@esbuild/win32-ia32': 0.18.12 '@esbuild/win32-x64': 0.18.12 esbuild@0.21.5: optionaldependencies: '@esbuild/aix-ppc64': 0.21.5 '@esbuild/android-arm': 0.21.5 '@esbuild/android-arm64': 0.21.5 '@esbuild/android-x64': 0.21.5 '@esbuild/darwin-arm64': 0.21.5 '@esbuild/darwin-x64': 0.21.5 '@esbuild/freebsd-arm64': 0.21.5 '@esbuild/freebsd-x64': 0.21.5 '@esbuild/linux-arm': 0.21.5 '@esbuild/linux-arm64': 0.21.5 '@esbuild/linux-ia32': 0.21.5 '@esbuild/linux-loong64': 0.21.5 '@esbuild/linux-mips64el': 0.21.5 '@esbuild/linux-ppc64': 0.21.5 '@esbuild/linux-riscv64': 0.21.5 '@esbuild/linux-s390x': 0.21.5 '@esbuild/linux-x64': 0.21.5 '@esbuild/netbsd-x64': 0.21.5 '@esbuild/openbsd-x64': 0.21.5 '@esbuild/sunos-x64': 0.21.5 '@esbuild/win32-arm64': 0.21.5 '@esbuild/win32-ia32': 0.21.5 '@esbuild/win32-x64': 0.21.5 escalade@3.1.2: {} escape-string-regexp@1.0.5: {} fill-range@7.1.1: dependencies: to-regex-range: 5.0.1 follow-redirects@1.15.2(debug@4.3.4): optionaldependencies: debug: 4.3.4 form-data@4.0.0: dependencies: asynckit: 0.4.0 combined-stream: 1.0.8 mime-types: 2.1.35 fsevents@2.3.3: optional: true fuse.js@6.6.2: {} gensync@1.0.0-beta.2: {} globals@11.12.0: {} has-flag@3.0.0: {} html-entities@2.3.3: {} is-number@7.0.0: {} is-plain-object@5.0.0: {} is-what@4.1.15: {} js-tokens@4.0.0: {} jsesc@2.5.2: {} json5@2.2.3: {} lru-cache@5.1.1: dependencies: yallist: 3.1.1 merge-anything@5.1.7: dependencies: is-what: 4.1.15 micromatch@4.0.8: dependencies: braces: 3.0.3 picomatch: 2.3.1 mime-db@1.52.0: {} mime-types@2.1.35: dependencies: mime-db: 1.52.0 ms@2.1.2: {} nanoid@3.3.7: {} node-fetch@2.6.12: dependencies: whatwg-url: 5.0.0 node-releases@2.0.18: {} once@1.4.0: dependencies: wrappy: 1.0.2 picocolors@1.0.0: {} picocolors@1.0.1: {} picomatch@2.3.1: {} postcss@8.4.41: dependencies: nanoid: 3.3.7 picocolors: 1.0.1 source-map-js: 1.2.0 proxy-from-env@1.1.0: {} rollup@4.21.0: dependencies: '@types/estree': 1.0.5 optionaldependencies: '@rollup/rollup-android-arm-eabi': 4.21.0 '@rollup/rollup-android-arm64': 4.21.0 '@rollup/rollup-darwin-arm64': 4.21.0 '@rollup/rollup-darwin-x64': 4.21.0 '@rollup/rollup-linux-arm-gnueabihf': 4.21.0 '@rollup/rollup-linux-arm-musleabihf': 4.21.0 '@rollup/rollup-linux-arm64-gnu': 4.21.0 '@rollup/rollup-linux-arm64-musl': 4.21.0 '@rollup/rollup-linux-powerpc64le-gnu': 4.21.0 '@rollup/rollup-linux-riscv64-gnu': 4.21.0 '@rollup/rollup-linux-s390x-gnu': 4.21.0 '@rollup/rollup-linux-x64-gnu': 4.21.0 '@rollup/rollup-linux-x64-musl': 4.21.0 '@rollup/rollup-win32-arm64-msvc': 4.21.0 '@rollup/rollup-win32-ia32-msvc': 4.21.0 '@rollup/rollup-win32-x64-msvc': 4.21.0 fsevents: 2.3.3 semver@6.3.1: {} seroval@0.5.1: {} snarkdown@2.0.0: {} solid-js@1.7.8: dependencies: csstype: 3.1.2 seroval: 0.5.1 solid-refresh@0.6.3(solid-js@1.7.8): dependencies: '@babel/generator': 7.25.5 '@babel/helper-module-imports': 7.24.7 '@babel/types': 7.25.4 solid-js: 1.7.8 transitivepeerdependencies: - supports-color solid-toast@0.5.0(solid-js@1.7.8): dependencies: solid-js: 1.7.8 source-map-js@1.2.0: {} style-vendorizer@2.2.3: {} supports-color@5.5.0: dependencies: has-flag: 3.0.0 to-fast-properties@2.0.0: {} to-regex-range@5.0.1: dependencies: is-number: 7.0.0 tr46@0.0.3: {} typescript@4.9.5: {} undici-types@6.19.8: {} universal-user-agent@6.0.0: {} update-browserslist-db@1.1.0(browserslist@4.23.3): dependencies: browserslist: 4.23.3 escalade: 3.1.2 picocolors: 1.0.1 validate-html-nesting@1.2.2: {} vite-plugin-css-injected-by-js@3.2.0(vite@5.4.2(@types/node@20.16.1)): dependencies: vite: 5.4.2(@types/node@20.16.1) vite-plugin-mkcert@1.16.0(vite@5.4.2(@types/node@20.16.1)): dependencies: '@octokit/rest': 19.0.13 axios: 1.4.0(debug@4.3.4) debug: 4.3.4 picocolors: 1.0.0 vite: 5.4.2(@types/node@20.16.1) transitivepeerdependencies: - encoding - supports-color vite-plugin-restart@0.4.1(vite@5.4.2(@types/node@20.16.1)): dependencies: micromatch: 4.0.8 vite: 5.4.2(@types/node@20.16.1) vite-plugin-solid@2.10.2(solid-js@1.7.8)(vite@5.4.2(@types/node@20.16.1)): dependencies: '@babel/core': 7.25.2 '@types/babel__core': 7.20.5 babel-preset-solid: 1.8.19(@babel/core@7.25.2) merge-anything: 5.1.7 solid-js: 1.7.8 solid-refresh: 0.6.3(solid-js@1.7.8) vite: 5.4.2(@types/node@20.16.1) vitefu: 0.2.5(vite@5.4.2(@types/node@20.16.1)) transitivepeerdependencies: - supports-color vite@5.4.2(@types/node@20.16.1): dependencies: esbuild: 0.21.5 postcss: 8.4.41 rollup: 4.21.0 optionaldependencies: '@types/node': 20.16.1 fsevents: 2.3.3 vitefu@0.2.5(vite@5.4.2(@types/node@20.16.1)): optionaldependencies: vite: 5.4.2(@types/node@20.16.1) webidl-conversions@3.0.1: {} whatwg-url@5.0.0: dependencies: tr46: 0.0.3 webidl-conversions: 3.0.1 wrappy@1.0.2: {} yallist@3.1.1: {}</file><file name="plugins/index.html">&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8" /&gt; &lt;title&gt;pengu loader&lt;/title&gt; &lt;/head&gt; &lt;body style="margin: 0; padding: 0; width: 100%; height: 100%; background-color: black; background-position: center; background-repeat: no-repeat; background-image: url(https://4.bp.blogspot.com/-ehzk7yhqqvo/vt3fn2vntui/aaaaaaaal60/s6i1vmnszfo/s1600/1-game-lobby-pbe.jpg);"&gt; &lt;div id="pengu-root"&gt;&lt;/div&gt; &lt;script type="module" src="/src/views/index.tsx"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt;</file><file name="plugins/src/types.d.ts">// internal types interface plugin { init?: (context: any) =&gt; load?: () =&gt; default?: function | } interface rcpannouceevent extends customevent { errorhandler: () =&gt; registrationhandler: (registrar: (e) =&gt; promise&lt;any&gt;) =&gt; promise&lt;any&gt; | void } // built-in types interface action { id?: string name: string | (() =&gt; string) legend?: string | (() =&gt; string) tags?: string[] icon?: string group?: string | (() =&gt; string) hidden?: boolean perform?: (id?: string) =&gt; } interface commandbar { addaction: (action: action) =&gt; void show: () =&gt; void update: () =&gt; void } interface toast { success: (message: string) =&gt; void error: (message: string) =&gt; void promise: &lt;t&gt;( promise: promise&lt;t&gt;, msg: { loading: string, success: string, error: string } ) =&gt; promise&lt;t&gt; } interface datastore { has: (key: string) =&gt; boolean get: &lt;t&gt;(key: string, fallback?: t) =&gt; | undefined set: (key: string, value: any) =&gt; boolean remove: (key: string) =&gt; boolean } interface applyeffectfn { (type: 'transparent' | 'blurbehind' | 'acrylic' | 'unified', options?: { color: string }): void (type: 'mica', options?: { material?: 'auto' | 'mica' | 'acrylic' | 'tabbed' }): void (type: 'vibrancy', options: { material: string, alwayson?: boolean }): void } interface effect { apply: applyeffectfn clear: () =&gt; void settheme: (theme: 'light' | 'dark') =&gt; void } // globals declare interface window { datastore: datastore; commandbar: commandbar; toast: toast; effect: effect; pengu: { version: string superpotato: boolean plugins: string[] ismac: boolean }; os: { name: 'win' | 'mac' version: string build: string }; opendevtools: () =&gt; void; openpluginsfolder: (subdir?: string) =&gt; void; reloadclient: () =&gt; void; restartclient: () =&gt; void; getscriptpath: () =&gt; string | undefined; __llver: string; }</file><file name="plugins/src/index.ts">import './preload'; import './views';</file><file name="plugins/src/views/style.css">body { position: relative; } #pengu-root { font-size: .875rem; font-family: ui-sans-serif, system-ui, sans-serif, "apple color emoji", "segoe ui emoji", "segoe ui symbol", "noto color emoji"; } div[id^=index_loading_div] { background-color: #010a13; } div[id^=index_loading_div]&gt;img { display: none; } div[id^=index_loading_div]::before { content: ''; background-image: url(/lol-game-data/assets/v1/profile-icons/4216.jpg); background-repeat: no-repeat; background-size: cover; width: 144px; height: 144px; border-radius: 50%; } div[id^=index_loading_div]:after { margin-top: 32px; content: "pengu-powered"; color: #e2e1e1; font-family: 'inter', sans-serif; font-size: 1rem; text-transform: uppercase; }</file><file name="plugins/src/views/env.d.ts">/// &lt;reference types="vite/client" /&gt;</file><file name="plugins/src/views/index.tsx">/* @refresh reload */ import { render } 'solid-js/web'; import app './app'; import './style.css'; import install '@twind/with-web-components'; import config '../../twind.config'; import { loadtranslation } './lib/i18n'; const rootid = 'pengu-root'; const withtwind = install(config); class penguroot extends withtwind(htmlelement) { constructor() { super(); const shadow = this.attachshadow({ mode: 'open' }); render(() =&gt; &lt;app /&gt;, shadow); } } async function mount() { await loadtranslation(); let root = document.getelementbyid(rootid); (!root) { root = document.createelement('div'); root.setattribute('id', rootid); document.body.appendchild(root); } await customelements.whendefined(rootid); const twind = document.createelement(rootid); root.appendchild(twind); } customelements.define(rootid, penguroot); window.addeventlistener('load', mount);</file><file name="plugins/src/views/App.tsx">import { toaster } './components/toaster'; import { commandbar } './components/commandbar'; import { welcome } './components/welcome'; export default function app() { return ( &lt;div&gt; &lt;welcome /&gt; &lt;commandbar /&gt; &lt;toaster gutter={8} position="bottom-right" /&gt; &lt;/div&gt; ) }</file><file name="plugins/src/views/trans.json">{ "fallback": "en-us", "translations": [ { "_locales": ["en-us", "en-gb", "en-au"], "welcome_msg": "hi summoner, pengu successfully loaded hope enjoy it! join community get awesome plugins themes ", "dont_show_again": "do show again", "active_status": "pengu loader active!", "update_available": "new update available", "update_hint": "you close client open pengu loader get it.", "cmdbar_type_hint": "type command search...", "act_visit_home": "visit homepage", "act_open_devtools": "open devtools", "act_open_plugins": "open plugins folder", "act_reload": "reload client", "act_restart": "restart client", "act_create_aram": "create aram lobby", "act_create_normal": "create 5v5 sr lobby", "act_practice_tool": "create practice tool", "act_quit_pvp": "quit pvp champ-select" }, { "_locales": ["vi-vn", "vn-vn"], "welcome_msg": "cho bn g i, pengu c ti thnh cng v hi vng bn thch n. nhp hi cng chng mnh tm thm cc theme v plugin tuyt vi khc nh ", "dont_show_again": "khng hin th li", "active_status": "pengu loader ang hot ng!", "update_available": " c phin bn mi", "update_hint": "bn nn ng client v chy pengu loader cp nht n.", "cmdbar_type_hint": "g mt lnh hoc tm g ...", "act_visit_home": "gh thm trang ch", "act_open_devtools": "m devtools", "act_open_plugins": "m th mc plugins", "act_reload": "ti li client", "act_restart": "khi ng li client", "act_create_aram": "to trn aram", "act_create_normal": "to trn 5v5 sr", "act_practice_tool": "to trn phng tp", "act_quit_pvp": "thot chn tng pvp" }, { "_locales": ["zh-cn"], "welcome_msg": " ", "dont_show_again": "", "active_status": "pengu loader", "update_available": "", "update_hint": " pengu loader ", "cmdbar_type_hint": "...", "act_visit_home": " pengu loader ", "act_open_devtools": "", "act_open_plugins": "", "act_reload": "", "act_restart": "", "act_create_aram": "", "act_create_normal": "", "act_practice_tool": "", "act_quit_pvp": "pvp" }, { "_locales": ["zh-tw"], "welcome_msg": "", "dont_show_again": "", "active_status": "pengu loader", "update_available": "", "update_hint": " pengu loader ", "cmdbar_type_hint": "...", "act_visit_home": " pengu loader ", "act_open_devtools": "", "act_open_plugins": "", "act_reload": "", "act_restart": "", "act_create_aram": "", "act_create_normal": "5v5", "act_practice_tool": "", "act_quit_pvp": "game(pvp)" }, { "_locales": ["fr-fr", "fr-ca", "fr-be", "fr-ch", "fr-lu"], "welcome_msg": "salut invocateur, ton pengu charg avec succs et nous esprons que tu l'apprcieras ! rejoins notre communaut pour obtenir plus de plugins et thmes gniaux maintenant ", "dont_show_again": "ne plus afficher", "active_status": "pengu loader est actif !", "update_available": "nouvelle mise jour disponible", "update_hint": "vous devez fermer le client et ouvrir pengu loader pour l'obtenir.", "cmdbar_type_hint": "tapez une commande ou recherchez...", "act_visit_home": "visiter la page d'accueil", "act_open_devtools": "ouvrir les devtools", "act_open_plugins": "ouvrir le dossier des plugins", "act_reload": "recharger le client", "act_restart": "redmarrer le client", "act_create_aram": "crer un lobby aram", "act_create_normal": "crer un lobby sr 5v5", "act_practice_tool": "crer un lobby entranement", "act_quit_pvp": "quitter la slection de champion pvp" }, { "_locales": ["pt-br", "pt-pt"], "welcome_msg": "ol invocador, pengu foi carregado com sucesso, esperamos que voc aproveite! junte-se nossa comunidade para obter mais plugins e temas incrveis agora ", "dont_show_again": "no mostrar novamente", "active_status": "pengu loader est ativo!", "update_available": "nova atualizao disponvel", "update_hint": "voc precisa fechar cliente e abrir pengu loader para obt-la.", "cmdbar_type_hint": "digite um comando ou pesquise...", "act_visit_home": "visitar pgina inicial", "act_open_devtools": "abrir ferramentas de desenvolvedor", "act_open_plugins": "abrir pasta de plugins", "act_reload": "recarregar cliente", "act_restart": "reiniciar cliente", "act_create_aram": "criar sala aram", "act_create_normal": "criar sala 5v5 sr", "act_practice_tool": "criar sala de treino", "act_quit_pvp": "sair da seleo de campees pvp" }, { "_locales": ["ru-ru"], "welcome_msg": " , pengu ! , ", "dont_show_again": " ", "active_status": "pengu loader !", "update_available": " ", "update_hint": " , pengu loader.", "cmdbar_type_hint": " ...", "act_visit_home": " ", "act_open_devtools": " ", "act_open_plugins": " ", "act_reload": " ", "act_restart": " ", "act_create_aram": " aram", "act_create_normal": " 5x5 ", "act_practice_tool": " ", "act_quit_pvp": " (pvp)" } ] }</file><file name="plugins/src/views/components/Toaster.tsx">import toast, { toastoptions } 'solid-toast'; const options: toastoptions = { position: 'bottom-right', duration: 5000 }; window.toast = { success(message) { toast.success(message, options); }, error(message) { toast.error(message, options) }, promise(promise, msg) { return toast.promise(promise, msg, options); }, }; export { toaster, toast } 'solid-toast';</file><file name="plugins/src/views/components/Welcome.tsx">import { show, createsignal, onmount } 'solid-js'; import pengulogo '../assets/pengu.jpg'; import { toast } './toaster'; import { _t } '../lib/i18n'; import { fetchupdate } '../lib/updater'; async function docheckupdate() { const update = await fetchupdate(); (update === false) return; toast.custom((t) =&gt; { return ( &lt;div class={`${!t.visible &amp;&amp; 'hidden'} relative w-[370px] bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden`}&gt; &lt;div class="p-2"&gt; &lt;div class="flex items-start"&gt; &lt;div class="flex-shrink-0 pt-[2px] text-gray-600"&gt; &lt;svg width="24" height="24" viewbox="0 0 24 24" stroke-width="2" stroke="currentcolor" fill="none" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;path stroke="none" d="m0 0h24v24h0z" fill="none"&gt;&lt;/path&gt; &lt;path d="m9 12h-3.586a1 1 0 0 1 -.707 -1.707l6.586 -6.586a1 1 0 0 1 1.414 0l6.586 6.586a1 1 0 0 1 -.707 1.707h-3.586v3h-6v-3z"&gt;&lt;/path&gt; &lt;path d="m9 21h6"&gt;&lt;/path&gt; &lt;path d="m9 18h6"&gt;&lt;/path&gt; &lt;/svg&gt; &lt;/div&gt; &lt;div class="ml-3 w-0 flex-1 pt-0.5"&gt; &lt;p class="text-sm font-bold text-sky-500"&gt;{_t('update_available')} - {update.version}&lt;/p&gt; &lt;p class="mt-1 text-sm text-gray-700"&gt;{_t('update_hint')}&lt;/p&gt; &lt;/div&gt; &lt;div class="ml-4 flex-shrink-0 flex"&gt; &lt;button class="bg-white rounded-md inline-flex text-gray-400 hover:text-gray-500" onclick={() =&gt; toast.dismiss(t.id)} &gt; &lt;svg class="h-5 w-5" viewbox="0 0 20 20" fill="currentcolor"&gt; &lt;path fill-rule="evenodd" d="m4.293 4.293a1 1 0 011.414 0l10 8.586l4.293-4.293a1 1 0 111.414 1.414l11.414 10l4.293 4.293a1 1 0 01-1.414 1.414l10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414l8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" /&gt; &lt;/svg&gt; &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ) }, { duration: 30000, position: 'bottom-left' }); } export function welcome() { const welcome = window.datastore?.get&lt;boolean&gt;('pengu-welcome', true) !== false; const [visible, show] = createsignal(welcome); const dontshowcheck = (e) =&gt; { const value = !e.currenttarget.value; window.datastore?.set('pengu-welcome', value); }; const hide = () =&gt; { show(false); }; (!welcome) { onmount(() =&gt; { toast.success(_t('active_status'), { position: 'bottom-left', duration: 7000 }); }); } onmount(docheckupdate); return ( &lt;show when={visible()}&gt; &lt;div class="z-10 relative"&gt; &lt;div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity"&gt;&lt;/div&gt; &lt;div class="fixed inset-0 z-10 overflow-y-auto"&gt; &lt;div class="flex min-h-full justify-center text-center items-center p-0"&gt; &lt;div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all my-8 max-w-lg"&gt; &lt;div class="bg-white px-4 pt-5 p-6 pb-4"&gt; &lt;div class="sm:flex sm:items-start"&gt; &lt;div class="mx-auto flex flex-shrink-0 items-center justify-center h-10 w-10"&gt; &lt;img src={pengulogo} class="w-10 h-10 rounded" alt="" /&gt; &lt;/div&gt; &lt;div class="ml-4 mt-0 text-left"&gt; &lt;h3 class="text-base mt-0 font-semibold leading-6 text-gray-900"&gt;pengu loader&lt;/h3&gt; &lt;div class="mt-2"&gt; &lt;div class="text-sm text-black"&gt;{_t('welcome_msg')}&lt;/div&gt; &lt;div class="flex mt-5 space-x-1"&gt; &lt;a href="https://chat.pengu.lol/" target="_blank" rel="noreferrer" class="opacity-90 hover:opacity-100"&gt; &lt;img src="https://img.shields.io/discord/1069483280438673418?style=flat-square&amp;logo=discord&amp;logocolor=white&amp;label=discord&amp;color=5c5fff" alt="" /&gt; &lt;/a&gt; &lt;a href="https://pengu.lol/" target="_blank" rel="noreferrer" class="opacity-90 hover:opacity-100"&gt; &lt;img src="https://img.shields.io/badge/-pengu.lol-607080.svg?&amp;style=flat-square&amp;logo=gitbook&amp;logocolor=white" alt="" /&gt; &lt;/a&gt; &lt;a href="https://github.com/penguloader/penguloader/" target="_blank" rel="noreferrer" class="opacity-90 hover:opacity-100"&gt; &lt;img src="https://img.shields.io/github/stars/penguloader/penguloader?style=flat-square&amp;logo=github" alt="" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="bg-gray-50 py-3 flex flex-row justify-between items-center px-6"&gt; &lt;div class="flex items-center space-x-2"&gt; &lt;input type="checkbox" id="txro6gew" onchange={dontshowcheck} class="h-4 w-4 rounded border-gray-300 outline-none" /&gt; &lt;label for="txro6gew" class="text-sm font-medium text-gray-700"&gt;{_t('dont_show_again')}&lt;/label&gt; &lt;/div&gt; &lt;button onclick={hide} type="button" class="uppercase text-sm outline-none border-none bg-gray-300/60 px-3 py-1 text-gray-900 rounded hover:bg-gray-300 cursor-pointer" &gt;okay&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/show&gt; ) }</file><file name="plugins/src/views/components/CommandBar/SearchResults.tsx">import { for, show, createeffect, creatememo, on, oncleanup, onmount } 'solid-js'; import fuse 'fuse.js'; import { useroot, visualstate } './root'; import { searchitem } './searchitem'; import { evaluate } './utils'; function evalaction(action: action, path: string | string[]): string { (array.isarray(path)) path = path[0]; (path === 'name' || path === 'group') return evaluate(action[path]); else return action[path string]; } export function searchresults() { let containerref: htmldivelement; const { search, actions, activeindex, setactiveindex, setvisualstate, hidden } = useroot(); const filtereditems = creatememo(() =&gt; { (search().length === 0) { return actions() .filter(item =&gt; !item.hidden); } const fuse = new fuse(actions(), { distance: 200, threshold: 0.4, includescore: true, keys: ['name', 'tags', 'group'], getfn: evalaction }); return fuse.search(search()) .filter(item =&gt; !item.item.hidden || (item.item.hidden &amp;&amp; item.score! &gt; 0)) .sort((a, b) =&gt; b.score! - a.score!) .map(item =&gt; item.item); }); function shouldshowcategory(item: action, index: number) { (index == 0) return true; (typeof filtereditems()[index - 1] === 'undefined') return false; return item.group !== filtereditems()[index - 1].group; } function scrolltoactiveitem() { (hidden() || !containerref) return; const activeelement: htmlelement = containerref.queryselector(`div[data-index="${activeindex()}"]`)!; (!activeelement) return; const newscrollpos = (activeelement.offsettop + activeelement.offsetheight) - containerref.offsetheight; (newscrollpos &gt; 0) { containerref.scrolltop = newscrollpos; } else { containerref.scrolltop = 0; } } function execute(index: number) { (hidden()) return; const item = filtereditems()[index]; setactiveindex(index); setvisualstate(visualstate.animatingout); (typeof item.perform === 'function') { item.perform(item.id); } } const handlekeydown = (e: keyboardevent) =&gt; { (e.iscomposing) return; (e.key === 'arrowup') { e.preventdefault(); setactiveindex(index =&gt; index &amp;&amp; index - 1); scrolltoactiveitem(); } else (e.key === 'arrowdown') { e.preventdefault(); setactiveindex(index =&gt; index &lt; filtereditems().length - 1 ? index + 1 : index); scrolltoactiveitem(); } else (e.key === 'enter') { e.preventdefault(); execute(activeindex()); } else (e.code === 'escape') { e.preventdefault(); setvisualstate(visualstate.animatingout); } }; onmount(() =&gt; { createeffect(on(filtereditems, () =&gt; { setactiveindex(0); scrolltoactiveitem(); })); window.addeventlistener('keydown', handlekeydown); oncleanup(() =&gt; window.removeeventlistener('keydown', handlekeydown)); }); return ( &lt;div ref={containerref!} class="max-h-[320px] overflow-y-auto overflow-x-hidden scroll-smooth" &gt; &lt;for each={filtereditems()}&gt; {(item, index) =&gt; ( &lt;div class="pb-1 space-y-1"&gt; &lt;show when={shouldshowcategory(item, index())}&gt; &lt;div class="px-1 overflow-hidden text-gray-700"&gt; &lt;div class="px-2 py-1 my-1 text-xs font-medium text-neutral-500 capitalize"&gt; {evaluate(item.group)} &lt;/div&gt; &lt;/div&gt; &lt;/show&gt; &lt;searchitem item={item} index={index()} click={() =&gt; execute(index())} /&gt; &lt;/div&gt; )} &lt;/for&gt; &lt;/div&gt; ) }</file><file name="plugins/src/views/components/CommandBar/utils.ts">import { accessor, createeffect, createsignal, oncleanup } 'solid-js'; export function evaluate(value?: string | (() =&gt; string)) { (typeof value === 'string') { return value; } else (typeof value === 'function') { return value(); } else { return ''; } } export function usethrottledvalue&lt;t&gt;(value: accessor&lt;t&gt;, ms = 50) { (ms == 0) return value; const [throttledvalue, setthrottledvalue] = createsignal(value()); const [lastran, setlastran] = createsignal(date.now()); createeffect(() =&gt; { const timeout = settimeout(() =&gt; { setthrottledvalue(value); setlastran(date.now()); }, lastran() - (date.now() - ms)); oncleanup(() =&gt; cleartimeout(timeout)); }); return throttledvalue; }</file><file name="plugins/src/views/components/CommandBar/index.tsx">import { show, onmount } 'solid-js'; import { useroot, visualstate } './root'; import { searchbar } './searchbar'; import { searchresults } './searchresults'; import { animator } './animator'; export function commandbar() { const { hidden, setvisualstate } = useroot(); onmount(() =&gt; { window.addeventlistener('keydown', e =&gt; { (e.ctrlkey &amp;&amp; e.code === 'keyk' &amp;&amp; hidden()) { e.preventdefault(); setvisualstate(visualstate.animatingin); } }); }); const backdropclick = () =&gt; { setvisualstate(visualstate.animatingout); }; return ( &lt;show when={!hidden()}&gt; &lt;div class="fixed top-0 left-0 z-[99] flex items-center justify-center w-screen h-screen"&gt; &lt;div class="absolute inset-0 w-full h-full bg-black bg-opacity-40" onclick={backdropclick} /&gt; &lt;div class="flex min-h-[370px] justify-center w-full max-w-xl items-start relative"&gt; &lt;animator&gt; &lt;div class="box-border flex flex-col w-full h-full overflow-hidden bg-white rounded-md shadow-md bg-opacity-90 drop-shadow-md backdrop-blur-sm"&gt; &lt;searchbar /&gt; &lt;searchresults /&gt; &lt;/div&gt; &lt;/animator&gt; &lt;/div&gt; &lt;/div&gt; &lt;/show&gt; ) }</file><file name="plugins/src/views/components/CommandBar/Animator.tsx">import { children, createeffect, createsignal, on, oncleanup } 'solid-js'; import { useroot, visualstate } './root'; const appearanceanimationkeyframes = [ { opacity: '0', transform: 'scale(.95)', }, { opacity: '1', transform: 'scale(1.05)' }, { opacity: '1', transform: 'scale(1)' }, ]; const bumpanimationkeyframes = [ { transform: 'scale(1)', }, { transform: 'scale(.96)', }, { transform: 'scale(1)', }, ]; export function animator(props) { let outerref: htmldivelement; let innerref: htmldivelement; const resolved = children(() =&gt; props.children); const { visualstate, setvisualstate } = useroot(); const enterms = 100; const exitms = 100; createeffect(on(visualstate, (state) =&gt; { (state === visualstate.showing) return; const anim = outerref.animate(appearanceanimationkeyframes, { duration: state === visualstate.animatingin ? enterms : exitms, easing: state === visualstate.animatingout ? 'ease-in' : 'ease-out', direction: state === visualstate.animatingout ? 'reverse' : 'normal', fill: 'forwards', }); anim.addeventlistener('finish', () =&gt; { setvisualstate((state) =&gt; { const visible = state === visualstate.animatingin || state === visualstate.showing; return visible ? visualstate.showing : visualstate.hidden; }); }); })); const [previousheight, setpreviousheight] = createsignal(0); createeffect(() =&gt; { (visualstate() === visualstate.showing) { (!outerref || !innerref) { return; } const ro = new resizeobserver((entries) =&gt; { (const entry entries) { const cr = entry.contentrect; (!previousheight()) { setpreviousheight(cr.height); } outerref.animate( [ { height: `${previousheight()}px`, }, { height: `${cr.height}px`, }, ], { duration: enterms / 2, easing: 'ease-out', fill: 'forwards', } ); setpreviousheight(cr.height); } }); ro.observe(innerref); oncleanup(() =&gt; ro.unobserve(innerref)); } }); const [firstrender, setfirstrender] = createsignal(true); createeffect(() =&gt; { (firstrender()) { setfirstrender(false); return; } outerref.animate(bumpanimationkeyframes, { duration: enterms, easing: 'ease-out', }); }); return ( &lt;div ref={outerref!} class="w-full h-full" style={appearanceanimationkeyframes[0]} &gt; &lt;div ref={innerref!}&gt; {resolved()} &lt;/div&gt; &lt;/div&gt; ) }</file><file name="plugins/src/views/components/CommandBar/SearchItem.tsx">import { show } 'solid-js'; import { useroot } './root'; import { evaluate } './utils'; interface props { item: action index: number click: () =&gt; } export function searchitem(props: props) { const { activeindex, setactiveindex } = useroot(); return ( &lt;div class="px-1"&gt; &lt;div data-index={props.index} data-active={activeindex() === props.index} onclick={props.click} onmousemove={() =&gt; setactiveindex(props.index)} class="cursor-pointer relative flex select-none items-center rounded px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[active=true]:bg-slate-700 data-[active=true]:text-white" &gt; &lt;show when={props.item.icon}&gt; &lt;span innerhtml={props.item.icon}&gt;&lt;/span&gt; &lt;/show&gt; &lt;span&gt;{evaluate(props.item.name)}&lt;/span&gt; &lt;show when={props.item.legend}&gt; &lt;span class="ml-auto text-xs tracking-widest"&gt;{evaluate(props.item.legend)}&lt;/span&gt; &lt;/show&gt; &lt;/div&gt; &lt;/div&gt; ) }</file><file name="plugins/src/views/components/CommandBar/SearchBar.tsx">import { onmount } 'solid-js'; import { useroot } './root'; import { _t } '../../lib/i18n'; export function searchbar() { let input: htmlinputelement; const { search, setsearch, setactiveindex } = useroot(); onmount(() =&gt; { setsearch(''); setactiveindex(0); input.focus(); }); const onkeydown = (e: keyboardevent) =&gt; { (e.key === 'arrowup') { e.preventdefault(); } }; return ( &lt;div class="flex items-center px-3 border-b border-gray-300 bg-white/90"&gt; &lt;svg class="w-4 h-4 mr-0 text-neutral-400 shrink-0" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" &gt; &lt;circle cx="11" cy="11" r="8"&gt;&lt;/circle&gt; &lt;line x1="21" x2="16.65" y1="21" y2="16.65"&gt;&lt;/line&gt; &lt;/svg&gt; &lt;input ref={input!} type="text" value={search()} onkeydown={onkeydown} oninput={e =&gt; setsearch(e.target.value)} onblur={() =&gt; settimeout(() =&gt; input.focus(), 50)} class="flex w-full px-2 py-3 text-sm bg-transparent border-none rounded-md outline-none placeholder:text-neutral-400 h-11 disabled:cursor-not-allowed disabled:opacity-50" placeholder={_t('cmdbar_type_hint')} autocomplete="off" autocorrect="off" spellcheck={false} /&gt; &lt;/div&gt; ) }</file><file name="plugins/src/views/components/CommandBar/data.ts">import { _t } '../../lib/i18n'; enum queueid { draftpick = 400, soloduo = 420, blindpick = 430, flex = 440, aram = 450, clash = 700, introbots = 830, beginnerbots = 840, intermediatebots = 850, arurf = 900, tftnormal = 1090, tftranked = 1100, tfttutorial = 1110, tfthyperroll = 1130, tftdoubleup = 1160, nexusblitz = 1300, tutorial1 = 2000, tutorial2 = 2010, tutorial3 = 2020, practicetool = 0xffff, } async function createlobby(queueid: queueid) { let body: = { queueid }; (queueid === queueid.practicetool) { body = { customgamelobby: { configuration: { gamemode: 'practicetool', gamemutator: '', gameserverregion: '', mapid: 11, mutators: { id: 1 }, spectatorpolicy: 'allallowed', teamsize: 5 }, lobbyname: 'game ' + math.floor(math.random() * 0xffffffff).tostring(36), lobbypassword: null }, iscustom: true } } await fetch('/lol-lobby/v2/lobby', { method: 'post', body: json.stringify(body), headers: { 'content-type': 'application/json' } }); } async function quitpvpchampselect() { const params = new urlsearchparams({ destination: 'lcdsserviceproxy', method: 'call', args: json.stringify(['', 'teambuilder-draft', 'quitv2', '']), }); const url = '/lol-login/v1/session/invoke?' + params.tostring(); await fetch(url, { method: 'post' }); } const actions: record&lt;string, action[]&gt; = { pengu: [ { name: _t.bind(null, 'act_visit_home'), legend: 'pengu.lol', perform: () =&gt; window.open('https://pengu.lol', '_blank') }, { name: _t.bind(null, 'act_open_devtools'), legend: 'f12', tags: ['dev', 'console'], perform: () =&gt; window.opendevtools?.() }, { name: _t.bind(null, 'act_open_plugins'), tags: ['dev'], perform: () =&gt; window.openpluginsfolder?.() }, { name: _t.bind(null, 'act_reload'), legend: 'ctrl shift r', hidden: true, perform: () =&gt; window.reloadclient?.() }, { name: _t.bind(null, 'act_restart'), legend: 'ctrl shift enter', hidden: true, perform: () =&gt; window.restartclient?.() } ], lobby: [ { name: _t.bind(null, 'act_create_aram'), perform: () =&gt; createlobby(queueid.aram) }, { name: _t.bind(null, 'act_create_normal'), perform: () =&gt; createlobby(queueid.blindpick) }, { name: _t.bind(null, 'act_practice_tool'), perform: () =&gt; createlobby(queueid.practicetool) }, ], uncategorized: [ { name: _t.bind(null, 'act_quit_pvp'), hidden: true, perform: () =&gt; quitpvpchampselect() } ] }; export const default_actions: action[] = object.keys(actions) .flatmap(k =&gt; actions[k].map(v =&gt; ({ ...v, group: k })));</file><file name="plugins/src/views/components/CommandBar/root.ts">import { creatememo, createroot, createsignal, } 'solid-js'; import { default_actions } './data'; const action_list = [...default_actions]; export enum visualstate { hidden = 0, animatingin, showing, animatingout, } const root = createroot(() =&gt; { const [updated, triggerupdate] = createsignal(undefined, { equals: false }); const actions = creatememo(on(updated, () =&gt; action_list), action_list, { equals: false }); const [search, setsearch] = createsignal(''); const [activeindex, setactiveindex] = createsignal(0); const [visualstate, setvisualstate] = createsignal(visualstate.hidden); const hidden = creatememo(() =&gt; visualstate() === visualstate.hidden); function addaction(item: action) { (typeof item !== 'object' || !item.name) { console.warn('[commandbar] action item object `name` `perform` props.') return; } const action = { ...item }; (!action.group || typeof action.group !== 'string') { action.group = 'uncategorized'; } action_list.push(action); triggerupdate(); } window.commandbar = { addaction, show: () =&gt; setvisualstate(visualstate.animatingin), update: () =&gt; triggerupdate(), } return { actions, search, setsearch, activeindex, setactiveindex, visualstate, setvisualstate, hidden, } }); export const useroot = () =&gt; root;</file><file name="plugins/src/views/lib/updater.ts">import snarkdown 'snarkdown'; const github_repo = 'penguloader/penguloader'; function parseversion(version: string) { const match = /v?(\d+(?:\.\d+){2,3})/i.exec(version); (!match) return 0; const nums = match[1].split('.').map(number); return (nums[0] * 10000 ** 2) + (nums[1] * 10000) + (nums[2]) + ((nums[3] ?? 0) / 10000); } export async function fetchupdate() { const currentversion = window.pengu?.version || window.__llver || 'v0.0.0'; try { const res = await fetch(`https://api.github.com/repos/${github_repo}/releases/latest`); const release = await res.json(); const latestversion: string = release['tag_name']; (parseversion(latestversion) &gt; parseversion(currentversion)) { return { old: currentversion, version: latestversion, changelog: snarkdown(release['body']) }; } } catch (err) { console.warn('pengu failed fetch update.', err); } return false; }</file><file name="plugins/src/views/lib/i18n.ts">import { fallback, translations } '../trans.json'; type translation = record&lt;string, string&gt;; type translationkey = keyof typeof translations[0]; let _t: translation; function findtranslation(locale: string) { locale = locale.tolowercase(); (const trans translations) { (trans._locales.some(l =&gt; l.tolowercase() === locale)) { return trans any; } } } export async function loadtranslation() { let locale = fallback; try { // cant use body's dataset rcp get loads const data = await fetch('/riotclient/region-locale') .then(r =&gt; r.json()); locale = data.locale.replace('_', '-'); } catch { // fallback } _t = (locale &amp;&amp; findtranslation(locale)) || findtranslation(fallback); } export function _t(key: translationkey) { return _t[key] || `{{${key}}}`; }</file><file name="plugins/src/preload/loader.ts">import { rcp, socket } './rcp'; const plugins = window.pengu.plugins ('disabledplugins' window.pengu) { const blacklist = new set&lt;number&gt; const disabled = string(window.pengu.disabledplugins) delete window.pengu.disabledplugins (const hash disabled.split(',')) { const num = window.parseint(hash, 16) blacklist.add(num) } function gethash(str: string) { const data = new textencoder().encode(str) let hash = 0x811c9dc5 (const byte data) { hash ^= byte hash += (hash &lt;&lt; 1) + (hash &lt;&lt; 4) + (hash &lt;&lt; 7) + (hash &lt;&lt; 8) + (hash &lt;&lt; 24) } return hash &gt;&gt;&gt; 0 } function isdisabled(path: string) { path = path.tolowercase().replace(/\\/g, '/') return blacklist.has(gethash(path)) } (let = plugins.length - 1; &gt;= 0; --i) { const entry = plugins[i] (isdisabled(entry) || /^@default\//i.test(entry)) { plugins.splice(i, 1) } } } async function loadplugin(entry: string) { let stage = 'load'; try { // acquire plugin const url = `https://plugins/${entry}`; const plugin: plugin = await import(url); // init immediately (typeof plugin.init === 'function') { stage = 'initialize'; const pluginname = entry.substring(0, entry.indexof('/')); const initcontext = { rcp, socket }; // top-level js (pluginname) { const meta = { name: pluginname }; initcontext['meta'] = meta; } await plugin.init(initcontext); } // register load (typeof plugin.load === 'function') { window.addeventlistener('load', plugin.load); } else (typeof plugin.default === 'function') { window.addeventlistener('load', plugin.default); } const msg = `loaded plugin "${entry}".`; console.info('%c pengu ', 'background: #183461; color: #fff', msg); } catch (err) { const msg = `failed ${stage} plugin "${entry}".\n`; console.error('%c pengu ', 'background: #183461; color: #fff', msg, err); } } // load plugins asynchronously const waitable = promise.all( plugins.map(loadplugin) ); // listen first rcp, also first listener rcp.preinit('rcp-fe-common-libs', async function () { // wait plugins load await waitable; }); export { }</file><file name="plugins/src/preload/super-potato.ts">const global_style = ` *:not(.store-loading):not(.spinner):not([animated]):not(.lol-loading-screen-spinner):not(.lol-uikit-vignette-celebration-layer *), *:before, *:after { transition: none !important; transition-property: none !important; /* animation: none !important; */ }`; const shadow_style = ` *:not(.spinner):not([animated]), *:before, *:after { transition: none !important; transition-property: none !important; /* animation: none !important; */ }`; function load() { const style = document.createelement('style'); style.textcontent = global_style; document.body.appendchild(style); const createelement = document.createelement; document.createelement = function (name, options?) { const elm = createelement.call(this, name, options); (elm.shadowroot) { const style = document.createelement('style'); style.textcontent = shadow_style; elm.shadowroot.appendchild(style); } return elm; }; fetch('/lol-settings/v1/local/lol-user-experience', { method: 'patch', headers: { 'content-type': 'application/json' }, body: json.stringify({ schemaversion: 3, data: { potatomodeenabled: true } }) }); } (window.pengu.superpotato) { window.addeventlistener('load', load); } export { }</file><file name="plugins/src/preload/index.ts">import './api'; import './polyfills'; import './super-potato'; import './load-hooks'; import './loader'; import { version } '../../package.json' window.pengu.version = version object.freeze(window.pengu);</file><file name="plugins/src/preload/polyfills.ts">declare global { interface object { hasown: function } } (!object.hasown) { object.hasown = function (obj, prop) { return object.prototype.hasownproperty.call(obj, prop); }; } (!array.prototype.at) { array.prototype.at = function (idx) { idx = number(idx) || 0; (idx &lt; 0) { idx = this.length + idx; (idx &lt; 0) { return undefined; } } (idx &gt;= this.length) { return undefined; } return this[idx]; }; } export { }</file><file name="plugins/src/preload/load-hooks.ts">let windowloaded = false; window.addeventlistener('load', function () { windowloaded = true; }) const windowaddeventlistener = window.addeventlistener; const documentaddeventlistener = document.addeventlistener; // make sure late window's load &amp; domcontentloaded listeners called window.addeventlistener = function (type, listener, options) { (type === 'load' &amp;&amp; windowloaded) { settimeout(listener, 1); } else (type === 'domcontentloaded' &amp;&amp; document.readystate === 'complete') { settimeout(listener, 1); } else { windowaddeventlistener.call(this, type, listener, options); } }; // make sure late document's domcontentloaded listeners called document.addeventlistener = function (type, listener, options) { (type === 'domcontentloaded' &amp;&amp; (document.readystate === 'interactive' || document.readystate === 'complete')) { settimeout(listener, 1); } else { documentaddeventlistener.call(this, type, listener, options); } }; export { }</file><file name="plugins/src/preload/api/DataStore.ts">import { native } './native'; let data_: map&lt;string, any&gt;; function data() { (data_ === undefined) { try { var object = json.parse(native.loaddatastore()); data_ = new map(object.entries(object)); } catch { data_ = new map(); } } return data_; } function commit() { var object = object.fromentries(data_); native.savedatastore(json.stringify(object)); } window.datastore = { has(key) { return data().has(string(key)); }, get(key, fallback) { (typeof key !== 'string') { return undefined; } else (data().has(key)) { return data().get(key); } return fallback; }, set(key, value) { (typeof key !== 'string') { return false; } data().set(string(key), value); commit(); return true; }, remove(key) { var result = data().delete(string(key)); commit(); return result; } }</file><file name="plugins/src/preload/api/Effect.ts">import { native } './native'; const nsvisualeffectmaterial = { titlebar: 3, selection: 4, menu: 5, popover: 6, sidebar: 7, headerview: 10, sheet: 11, windowbackground: 12, hudwindow: 13, fullscreenui: 15, tooltip: 17, contentbackground: 18, underwindowbackground: 21, underpagebackground: 22, } const wintomacmaterial = { transparent: nsvisualeffectmaterial.underwindowbackground, blurbehind: nsvisualeffectmaterial.hudwindow, acrylic: nsvisualeffectmaterial.fullscreenui, unified: nsvisualeffectmaterial.popover, mica: nsvisualeffectmaterial.headerview, } const win11micamaterial = { auto: 0, none: 1, mica: 2, acrylic: 3, tabbed: 4, } type effectname = | 'transparent' | 'blurbehind' | 'acrylic' | 'unified' | 'mica' | 'vibrancy' const winbackdroptype = { transparent: 0, blurbehind: 1, acrylic: 2, unified: 3, mica: 4, } function parsehexcolor(color: string): number { (typeof color === 'string') { (color.startswith('#')) { let hex = color.slice(1) let size = hex.length let = 0, step = size &gt; 4 ? 1 : 0 let r = parseint(hex[i] + hex[i += step], 16); let g = parseint(hex[++i] + hex[i += step], 16) let b = parseint(hex[++i] + hex[i += step], 16) let = 255 (size === 4 || size === 8) { = parseint(hex[++i] + hex[i += step], 16) } return ((a &lt;&lt; 24) | (b &lt;&lt; 16) | (g &lt;&lt; 8) | r) &gt;&gt;&gt; 0 } } return 0 } function applywindoweffectmac(name: effectname, options) { (name === 'vibrancy') { const material = string(options.material) const alwayson = boolean(options.alwayson) (material nsvisualeffectmaterial) { const state = alwayson ? 1 : 0 native.setwindowvibrancy(nsvisualeffectmaterial[material], state) } else { console.warn('unsupported vibrancy material: %s', material) } } else (name wintomacmaterial) { native.setwindowvibrancy(wintomacmaterial[name], 0) } else { console.warn('unknown window visual effect: %s', name) } } function applywindoweffectwin(name: effectname, options) { (name winbackdroptype) { (name === 'mica') { const material = string(options.material || 'mica') (material win11micamaterial) { native.setwindowvibrancy(winbackdroptype.mica, win11micamaterial[material]) } else { console.warn('unsupported mica material: %s', material) } } else { const color = parsehexcolor(options.color) native.setwindowvibrancy(winbackdroptype[name], color) } } else { console.warn('unknown window visual effect: %s', name) } } window.effect = { apply(name, options) { options = options || {} (window.pengu.ismac) { applywindoweffectmac(name, options) } else { applywindoweffectwin(name, options) } }, clear() { native.setwindowvibrancy(null); }, settheme(theme) { (theme === 'light') native.setwindowtheme(false) else (theme === 'dark') native.setwindowtheme(true) }, }</file><file name="plugins/src/preload/api/native.ts">// @ts-ignore export const native: native = window.__native; // @ts-ignore delete window.__native; interface native { opendevtools: () =&gt; void; openpluginsfolder: (path?: string) =&gt; boolean; reloadclient: () =&gt; void; setwindowtheme: (dark: boolean) =&gt; void; setwindowvibrancy: (kind: number | null, state?: number) =&gt; void; loaddatastore: () =&gt; string; savedatastore: (data: string) =&gt; void; }</file><file name="plugins/src/preload/api/index.ts">import { native } './native'; import './datastore'; import './effect'; window.opendevtools = function () { native.opendevtools(); }; window.openpluginsfolder = function (path?: string) { (typeof path === 'string' &amp;&amp; path) { (!path.startswith('..') &amp;&amp; !/[\\\/]\.\.[\\\/]/.test(path)) { (/^[\\/]/.test(path)) path = path.substring(1); return native.openpluginsfolder(path); } } return native.openpluginsfolder(); }; window.reloadclient = function () { native.reloadclient(); }; window.restartclient = function () { fetch('/riotclient/kill-and-restart-ux', { method: 'post' }); }; window.getscriptpath = function () { const error = new error(); const stack = error.stack; return stack?.match(/(?:http|https):\/\/[^\s]+\.js/g)?.[0]; }; export { }</file><file name="plugins/src/preload/rcp/index.ts">export { rcp } './hooks'; export { socket } './socket';</file><file name="plugins/src/preload/rcp/hooks.ts">const length = symbol("length"); type callbacktype = "before" | "after"; interface callback { (...args: any): void | promise&lt;void&gt;; } interface plugincontainer { impl: null | object; state: "preinit" | "init" | "postinit" | "fulfilled" } type callbackcontainer = { [length]: number; } &amp; { [k callbacktype]?: callback[]; } class rcp { static readonly pref = "riotplugin.announce:"; static readonly pref_len = this.pref.length; static isannounceevent(event: event): event rcpannouceevent { return event.type.startswith(this.pref); } constructor() { const self = this; const { dispatchevent } = document; function dispatcheventwrap(this: any, event: event): boolean { (rcp.isannounceevent(event)) self.onpluginannounce(event); return dispatchevent.call(this, event); } object.defineproperty(document, "dispatchevent", { value: dispatcheventwrap }); } private readonly pluginregistry = new map&lt;string, plugincontainer&gt;(); private readonly callbacks = new map&lt;string, callbackcontainer&gt;(); private onpluginannounce(event: rcpannouceevent) { const self = this; const name = event.type.substring(rcp.pref_len); const { registrationhandler } = event; function registrationhandlerwrap(this: any, registrar: parameters&lt;typeof registrationhandler&gt;[0]): returntype&lt;typeof registrationhandler&gt; { return registrationhandler.call(this, async function(provider) { const container: plugincontainer = { impl: null, state: "preinit" }; self.pluginregistry.set(name, container); // callbacks called immidiatly, without adding microtasks queue // so, edgecases pre/post init callback added already // cant called, state plugin changes (point await) await self.invokecallbacks("before", name, () =&gt; { container.state = "init"; }, provider); const api = (container.impl = await registrar(provider)); container.state = "postinit"; await self.invokecallbacks("after", name, () =&gt; { container.state = "fulfilled"; }, api); return api; }); } object.defineproperty(event, "registrationhandler", { value: registrationhandlerwrap, }) } private async invokecallbacks(type: callbacktype, name: string, callback: () =&gt; void, ...args: any[]) { const container = this.callbacks.get(name); (container == undefined) return void callback(); const callbacks = container[type]; (callbacks == undefined) return void callback(); //while older callbacks dont finished, new ones stll added (callbacks.length &gt; 0) { container[length] -= callbacks.length; await promise.allsettled(callbacks.splice(0).map(callback =&gt; callback(...args))); } (callbacks.length &gt; 0); (container[length] == 0) this.callbacks.delete(name); callback(); } private addcallback(type: callbacktype, name: string, callback: callback) { let container = this.callbacks.get(name); (container == undefined) this.callbacks.set(name, (container = { [type]: [], [length]: 0 })); const arr = container[type] ?? (container[type] = []); container[length]++; arr.push(callback); } public preinit(name: string, callback: (provider: any) =&gt; any): boolean { name = string(name); (typeof callback !== "function") throw new typeerror(`${callback} function`); const plugin = this.pluginregistry.get(name); (plugin == undefined || plugin.state == "preinit") return (this.addcallback("before", name, callback), true); return false; } public postinit(name: string, callback: (api: any) =&gt; any, blocking: boolean = false){ name = string(name); (typeof callback !== "function") throw new typeerror(`${callback} function`); const plugin = this.pluginregistry.get(name); (plugin !== undefined &amp;&amp; plugin.state === "fulfilled") return false; this.addcallback("after", name, blocking ? callback : (api: any) =&gt; void callback(api)); return true; } private whenreadyone(name: string) { return new promise(resolve =&gt; { (!this.postinit(name, resolve)) resolve(this.pluginregistry.get(name)!.impl); }); } private whenreadyall(names: string[]) { return promise.all(names.map(name =&gt; this.whenreadyone(string(name)))); } public whenready(param){ (typeof param == "string") return this.whenreadyone(param); (array.isarray(param)) return this.whenreadyall(param); throw new typeerror(`unexpected argument ${param}`); } public get(name: string){ name = string(name).tolowercase(); (!name.startswith('rcp-')) name = 'rcp-' + name; return this.pluginregistry.get(name)?.impl; } // [symbol.iterator](){ // return this.pluginregistry.entries(); // } } export const rcp = new rcp(); object.defineproperty(window, "rcp", { value: rcp, enumerable: false, configurable: false, writable: false })</file><file name="plugins/src/preload/rcp/socket.ts">import { rcp } './hooks'; interface eventdata { data: any; uri: string; eventtype: 'create' | 'update' | 'delete'; } interface apilistener { (message: eventdata): void; } let ws: websocket; const eventqueue = array&lt;string&gt;(); const listenersmap = new map&lt;string, array&lt;apilistener&gt;&gt;(); rcp.preinit('rcp-fe-common-libs', async function (provider) { const { _endpoint } = provider.context.socket; ws = new websocket(_endpoint, 'wamp'); ws.addeventlistener('open', () =&gt; { (const e eventqueue.splice(0, eventqueue.length)) { ws.send(json.stringify([5, e])); } }); ws.addeventlistener('message', handlemessage); window.addeventlistener('beforeunload', () =&gt; ws.close()); }); function handlemessage(e: messageevent&lt;string&gt;) { const [type, endpoint, data] = json.parse(e.data); (type === 8 &amp;&amp; listenersmap.has(endpoint)) { const listeners = listenersmap.get(endpoint)!; (const callback listeners) { settimeout(() =&gt; callback(&lt;eventdata&gt;data), 0); } } } function buildapi(api: string): string { (api === 'all') return 'onjsonapievent'; api = api.tolowercase().replace(/^\/+|\/+$/g, ''); return 'onjsonapievent_' + api.replace(/\//g, '_'); } function observe(api: string, listener: apilistener) { (typeof api !== 'string' || api === '' || typeof listener !== 'function') return false; const endpoint = buildapi(api); listener = listener.bind(self); (listenersmap.has(endpoint)) { const arr = listenersmap.get(endpoint); arr!.push(listener); } else { listenersmap.set(endpoint, [listener]); } (ws?.readystate === 1) { ws.send(json.stringify([5, endpoint])); } else { eventqueue.push(endpoint); } return { disconnect: () =&gt; disconnect(api, listener), }; } function disconnect(api: string, listener: apilistener) { const endpoint = buildapi(api); (listenersmap.has(endpoint)) { const arr = listenersmap.get(endpoint)!.filter(x =&gt; x !== listener); (arr.length === 0) { ws.send(json.stringify([6, endpoint])); listenersmap.delete(endpoint); } else { listenersmap.set(endpoint, arr); } return true; } return false; } export const socket = { observe, disconnect, };</file></source>